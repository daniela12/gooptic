<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZNode.Libraries.DataAccess.Service</name>
    </assembly>
    <members>
        <member name="T:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.OnProcessStarting(ZNode.Libraries.DataAccess.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.OnProcessEnded(ZNode.Libraries.DataAccess.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IProcessorResult.AddBrokenRulesList(System.Type,ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GenericProcessorResult.AddBrokenRulesList(System.Type,ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase">
            <summary>
             An object representation of the 'ZNodeIPCommerce' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IPCommerce.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.OnProcessStarting(ZNode.Libraries.DataAccess.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.OnProcessEnded(ZNode.Libraries.DataAccess.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.BulkInsert(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepSave(`0,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepSave(`0,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{`0},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.CreateIPCommerce(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="iPPFSocketId"></param>
            <param name="merchantLogin"></param>
            <param name="merchantPassword"></param>
            <param name="merchantStoreId"></param>
            <param name="merchantSocketNum"></param>
            <param name="merchantCountryCode"></param>
            <param name="merchantName"></param>
            <param name="merchantCustServicePhone"></param>
            <param name="merchantAddress"></param>
            <param name="merchantStreet1"></param>
            <param name="merchantStreet2"></param>
            <param name="merchantCity"></param>
            <param name="merchantStateProv"></param>
            <param name="merchantPostalCode"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="custom4"></param>
            <param name="custom5"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Get(ZNode.Libraries.DataAccess.Entities.IPCommerceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeIPCommerce index.
            </summary>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeIPCommerce index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetByIPCommerceID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeIPCommerce index.
            </summary>
            <param name="iPCommerceID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetByIPCommerceID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeIPCommerce index.
            </summary>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IPCommerce} of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IPCommerce</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	public virtualmethod that Inserts a IPCommerce object into the datasource using a transaction.
            </summary>
            <param name="entity">IPCommerce object to Insert.</param>
            <remarks>After Inserting into the datasource, the IPCommerce object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IPCommerce entity = new IPCommerce();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IPCommerceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IPCommerce</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IPCommerce</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IPCommerce.
             <code><![CDATA[
             TList<IPCommerce> list = new TList<IPCommerce>();
             IPCommerce entity = new IPCommerce();
             entity.StringProperty = "foo";
             IPCommerce entity2 = new IPCommerce();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IPCommerceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Update(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	public virtualmethod that Updates a IPCommerce object into the datasource using a transaction.
            </summary>
            <param name="entity">IPCommerce object to Update.</param>
            <remarks>After Updateing into the datasource, the IPCommerce object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IPCommerce entity = IPCommerceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IPCommerceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IPCommerce</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IPCommerce</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IPCommerce.
             <code><![CDATA[
             TList<IPCommerce> list = new TList<IPCommerce>();
             IPCommerce entity = new IPCommerce();
             entity.StringProperty = "foo";
             IPCommerce entity2 = new IPCommerce();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IPCommerceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Save(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	public virtualmethod that Saves a IPCommerce object into the datasource using a transaction.
            </summary>
            <param name="entity">IPCommerce object to Save.</param>
            <remarks>After Saveing into the datasource, the IPCommerce object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IPCommerce entity = IPCommerceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IPCommerceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IPCommerce</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IPCommerce</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IPCommerce.
             <code><![CDATA[
             TList<IPCommerce> list = new TList<IPCommerce>();
             IPCommerce entity = new IPCommerce();
             entity.StringProperty = "foo";
             IPCommerce entity2 = new IPCommerce();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IPCommerceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	public virtualmethod that Deletes a IPCommerce object into the datasource using a transaction.
            </summary>
            <param name="entity">IPCommerce object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IPCommerce object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IPCommerce entity = IPCommerceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IPCommerceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IPCommerce</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IPCommerce</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IPCommerce.
             <code><![CDATA[
             TList<IPCommerce> list = new TList<IPCommerce>();
             IPCommerce entity = new IPCommerce();
             entity.StringProperty = "foo";
             IPCommerce entity2 = new IPCommerce();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IPCommerceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.IPCommerceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 iPCommerceID
            </summary>
            <param name="iPCommerceID">IPCommerce pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoadByPortalID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="portalID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IPCommerce Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoadByIPCommerceID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="iPCommerceID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IPCommerce Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IPCommerce Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IPCommerce Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IPCommerce Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.IPCommerce)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IPCommerce Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.IPCommerce,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IPCommerce object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IPCommerce Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IPCommerce</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IPCommerce} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IPCommerce Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IPCommerceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CasePriorityService">
            <summary>
             An component type implementation of the 'ZNodeCasePriority' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase">
            <summary>
             An object representation of the 'ZNodeCasePriority' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CasePriority.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.CreateCasePriority(System.Int32,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> instance.
            </summary>
            <param name="casePriorityID"></param>
            <param name="casePriorityNme"></param>
            <param name="viewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CasePriorityKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetByCasePriorityID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CasePriority index.
            </summary>
            <param name="casePriorityID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetByCasePriorityID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CasePriority index.
            </summary>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CasePriority} of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CasePriority</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	public virtualmethod that Inserts a CasePriority object into the datasource using a transaction.
            </summary>
            <param name="entity">CasePriority object to Insert.</param>
            <remarks>After Inserting into the datasource, the CasePriority object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CasePriority entity = new CasePriority();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CasePriorityService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CasePriority</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CasePriority</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CasePriority.
             <code><![CDATA[
             TList<CasePriority> list = new TList<CasePriority>();
             CasePriority entity = new CasePriority();
             entity.StringProperty = "foo";
             CasePriority entity2 = new CasePriority();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CasePriorityService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Update(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	public virtualmethod that Updates a CasePriority object into the datasource using a transaction.
            </summary>
            <param name="entity">CasePriority object to Update.</param>
            <remarks>After Updateing into the datasource, the CasePriority object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CasePriority entity = CasePriorityService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CasePriorityService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CasePriority</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CasePriority</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CasePriority.
             <code><![CDATA[
             TList<CasePriority> list = new TList<CasePriority>();
             CasePriority entity = new CasePriority();
             entity.StringProperty = "foo";
             CasePriority entity2 = new CasePriority();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CasePriorityService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Save(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	public virtualmethod that Saves a CasePriority object into the datasource using a transaction.
            </summary>
            <param name="entity">CasePriority object to Save.</param>
            <remarks>After Saveing into the datasource, the CasePriority object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CasePriority entity = CasePriorityService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CasePriorityService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CasePriority</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CasePriority</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CasePriority.
             <code><![CDATA[
             TList<CasePriority> list = new TList<CasePriority>();
             CasePriority entity = new CasePriority();
             entity.StringProperty = "foo";
             CasePriority entity2 = new CasePriority();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CasePriorityService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	public virtualmethod that Deletes a CasePriority object into the datasource using a transaction.
            </summary>
            <param name="entity">CasePriority object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CasePriority object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CasePriority entity = CasePriorityService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CasePriorityService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CasePriority</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CasePriority</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CasePriority.
             <code><![CDATA[
             TList<CasePriority> list = new TList<CasePriority>();
             CasePriority entity = new CasePriority();
             entity.StringProperty = "foo";
             CasePriority entity2 = new CasePriority();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CasePriorityService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CasePriorityKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 casePriorityID
            </summary>
            <param name="casePriorityID">CasePriority pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoadByCasePriorityID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="casePriorityID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CasePriority Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CasePriority Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CasePriority Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CasePriority Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CasePriority)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CasePriority Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CasePriority,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CasePriority object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CasePriority Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CasePriority</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CasePriority} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CasePriority Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CasePriorityServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CasePriorityService.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeSupplierType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SupplierType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.CreateSupplierType(System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> instance.
            </summary>
            <param name="className"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.SupplierTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetBySupplierTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeSupplierType index.
            </summary>
            <param name="supplierTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetBySupplierTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeSupplierType index.
            </summary>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SupplierType} of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SupplierType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	public virtualmethod that Inserts a SupplierType object into the datasource using a transaction.
            </summary>
            <param name="entity">SupplierType object to Insert.</param>
            <remarks>After Inserting into the datasource, the SupplierType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SupplierType entity = new SupplierType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SupplierTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SupplierType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SupplierType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SupplierType.
             <code><![CDATA[
             TList<SupplierType> list = new TList<SupplierType>();
             SupplierType entity = new SupplierType();
             entity.StringProperty = "foo";
             SupplierType entity2 = new SupplierType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	public virtualmethod that Updates a SupplierType object into the datasource using a transaction.
            </summary>
            <param name="entity">SupplierType object to Update.</param>
            <remarks>After Updateing into the datasource, the SupplierType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SupplierType entity = SupplierTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SupplierTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SupplierType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SupplierType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SupplierType.
             <code><![CDATA[
             TList<SupplierType> list = new TList<SupplierType>();
             SupplierType entity = new SupplierType();
             entity.StringProperty = "foo";
             SupplierType entity2 = new SupplierType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	public virtualmethod that Saves a SupplierType object into the datasource using a transaction.
            </summary>
            <param name="entity">SupplierType object to Save.</param>
            <remarks>After Saveing into the datasource, the SupplierType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SupplierType entity = SupplierTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SupplierTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SupplierType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SupplierType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SupplierType.
             <code><![CDATA[
             TList<SupplierType> list = new TList<SupplierType>();
             SupplierType entity = new SupplierType();
             entity.StringProperty = "foo";
             SupplierType entity2 = new SupplierType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	public virtualmethod that Deletes a SupplierType object into the datasource using a transaction.
            </summary>
            <param name="entity">SupplierType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SupplierType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SupplierType entity = SupplierTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SupplierTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SupplierType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SupplierType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SupplierType.
             <code><![CDATA[
             TList<SupplierType> list = new TList<SupplierType>();
             SupplierType entity = new SupplierType();
             entity.StringProperty = "foo";
             SupplierType entity2 = new SupplierType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SupplierTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 supplierTypeID
            </summary>
            <param name="supplierTypeID">SupplierType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoadBySupplierTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="supplierTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SupplierType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SupplierType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SupplierType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SupplierType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SupplierType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SupplierType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SupplierType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SupplierType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SupplierType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SupplierType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SupplierType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SupplierType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SupplierTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SupplierTypeService">
            <summary>
             An component type implementation of the 'ZNodeSupplierType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierTypeService.#ctor">
            <summary>
            Initializes a new instance of the SupplierTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodService">
            <summary>
             An component type implementation of the 'ZNodeSavedPaymentMethod' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase">
            <summary>
             An object representation of the 'ZNodeSavedPaymentMethod' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SavedPaymentMethod.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.CreateSavedPaymentMethod(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> instance.
            </summary>
            <param name="accountID"></param>
            <param name="paymentSettingID"></param>
            <param name="name"></param>
            <param name="paymentProfileID"></param>
            <param name="customerProfileID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetByAccountID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetByPaymentSettingID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns a generic collection of SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Get(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethodKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetBySavedPaymentMethodID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetBySavedPaymentMethodID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SavedPaymentMethod} of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SavedPaymentMethod</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	public virtualmethod that Inserts a SavedPaymentMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">SavedPaymentMethod object to Insert.</param>
            <remarks>After Inserting into the datasource, the SavedPaymentMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SavedPaymentMethod entity = new SavedPaymentMethod();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SavedPaymentMethodService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SavedPaymentMethod</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SavedPaymentMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SavedPaymentMethod.
             <code><![CDATA[
             TList<SavedPaymentMethod> list = new TList<SavedPaymentMethod>();
             SavedPaymentMethod entity = new SavedPaymentMethod();
             entity.StringProperty = "foo";
             SavedPaymentMethod entity2 = new SavedPaymentMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SavedPaymentMethodService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Update(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	public virtualmethod that Updates a SavedPaymentMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">SavedPaymentMethod object to Update.</param>
            <remarks>After Updateing into the datasource, the SavedPaymentMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SavedPaymentMethod entity = SavedPaymentMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SavedPaymentMethodService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SavedPaymentMethod</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SavedPaymentMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SavedPaymentMethod.
             <code><![CDATA[
             TList<SavedPaymentMethod> list = new TList<SavedPaymentMethod>();
             SavedPaymentMethod entity = new SavedPaymentMethod();
             entity.StringProperty = "foo";
             SavedPaymentMethod entity2 = new SavedPaymentMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SavedPaymentMethodService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Save(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	public virtualmethod that Saves a SavedPaymentMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">SavedPaymentMethod object to Save.</param>
            <remarks>After Saveing into the datasource, the SavedPaymentMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SavedPaymentMethod entity = SavedPaymentMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SavedPaymentMethodService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SavedPaymentMethod</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SavedPaymentMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SavedPaymentMethod.
             <code><![CDATA[
             TList<SavedPaymentMethod> list = new TList<SavedPaymentMethod>();
             SavedPaymentMethod entity = new SavedPaymentMethod();
             entity.StringProperty = "foo";
             SavedPaymentMethod entity2 = new SavedPaymentMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SavedPaymentMethodService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	public virtualmethod that Deletes a SavedPaymentMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">SavedPaymentMethod object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SavedPaymentMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SavedPaymentMethod entity = SavedPaymentMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SavedPaymentMethodService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SavedPaymentMethod</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SavedPaymentMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SavedPaymentMethod.
             <code><![CDATA[
             TList<SavedPaymentMethod> list = new TList<SavedPaymentMethod>();
             SavedPaymentMethod entity = new SavedPaymentMethod();
             entity.StringProperty = "foo";
             SavedPaymentMethod entity2 = new SavedPaymentMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SavedPaymentMethodService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethodKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 savedPaymentMethodID
            </summary>
            <param name="savedPaymentMethodID">SavedPaymentMethod pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoadBySavedPaymentMethodID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SavedPaymentMethod Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SavedPaymentMethod Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SavedPaymentMethod Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SavedPaymentMethod Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SavedPaymentMethod Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SavedPaymentMethod object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SavedPaymentMethod Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SavedPaymentMethod</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SavedPaymentMethod} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SavedPaymentMethod Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SavedPaymentMethodService.#ctor">
            <summary>
            Initializes a new instance of the SavedPaymentMethodService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeService">
            <summary>
             An component type implementation of the 'ZNodeShippingRuleType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeShippingRuleType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShippingRuleType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.CreateShippingRuleType(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> instance.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="className"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetByShippingRuleTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingRuleType index.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingRuleType index.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShippingRuleType} of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShippingRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	public virtualmethod that Inserts a ShippingRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRuleType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShippingRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShippingRuleType entity = new ShippingRuleType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShippingRuleTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShippingRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShippingRuleType.
             <code><![CDATA[
             TList<ShippingRuleType> list = new TList<ShippingRuleType>();
             ShippingRuleType entity = new ShippingRuleType();
             entity.StringProperty = "foo";
             ShippingRuleType entity2 = new ShippingRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	public virtualmethod that Updates a ShippingRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRuleType object to Update.</param>
            <remarks>After Updateing into the datasource, the ShippingRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShippingRuleType entity = ShippingRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShippingRuleTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShippingRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShippingRuleType.
             <code><![CDATA[
             TList<ShippingRuleType> list = new TList<ShippingRuleType>();
             ShippingRuleType entity = new ShippingRuleType();
             entity.StringProperty = "foo";
             ShippingRuleType entity2 = new ShippingRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	public virtualmethod that Saves a ShippingRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRuleType object to Save.</param>
            <remarks>After Saveing into the datasource, the ShippingRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShippingRuleType entity = ShippingRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShippingRuleTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShippingRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShippingRuleType.
             <code><![CDATA[
             TList<ShippingRuleType> list = new TList<ShippingRuleType>();
             ShippingRuleType entity = new ShippingRuleType();
             entity.StringProperty = "foo";
             ShippingRuleType entity2 = new ShippingRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	public virtualmethod that Deletes a ShippingRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRuleType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShippingRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShippingRuleType entity = ShippingRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShippingRuleTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShippingRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShippingRuleType.
             <code><![CDATA[
             TList<ShippingRuleType> list = new TList<ShippingRuleType>();
             ShippingRuleType entity = new ShippingRuleType();
             entity.StringProperty = "foo";
             ShippingRuleType entity2 = new ShippingRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 shippingRuleTypeID
            </summary>
            <param name="shippingRuleTypeID">ShippingRuleType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoadByShippingRuleTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingRuleType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShippingRuleType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShippingRuleType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingRuleType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShippingRuleType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingRuleType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShippingRuleType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShippingRuleType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShippingRuleType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShippingRuleType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShippingRuleType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleTypeService.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Service.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContextView`2.#ctor(`0,ZNode.Libraries.DataAccess.Service.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContextView`2.#ctor(`0,ZNode.Libraries.DataAccess.Service.SecurityContext{`0},ZNode.Libraries.DataAccess.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase">
            <summary>
             An object representation of the 'ZNodeProductImage' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductImage.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.CreateProductImage(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="name"></param>
            <param name="imageFile"></param>
            <param name="imageAltTag"></param>
            <param name="alternateThumbnailImageFile"></param>
            <param name="activeInd"></param>
            <param name="showOnCategoryPage"></param>
            <param name="productImageTypeID"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductImageTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="productImageTypeID"></param>
            <returns>Returns a generic collection of ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductImageTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductImageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Search index.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Search index.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductImageID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductView index.
            </summary>
            <param name="productImageID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetByProductImageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductView index.
            </summary>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductImage} of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductImage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	public virtualmethod that Inserts a ProductImage object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImage object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductImage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductImage entity = new ProductImage();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductImageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductImage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductImage.
             <code><![CDATA[
             TList<ProductImage> list = new TList<ProductImage>();
             ProductImage entity = new ProductImage();
             entity.StringProperty = "foo";
             ProductImage entity2 = new ProductImage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	public virtualmethod that Updates a ProductImage object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImage object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductImage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductImage entity = ProductImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductImageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductImage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductImage.
             <code><![CDATA[
             TList<ProductImage> list = new TList<ProductImage>();
             ProductImage entity = new ProductImage();
             entity.StringProperty = "foo";
             ProductImage entity2 = new ProductImage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	public virtualmethod that Saves a ProductImage object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImage object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductImage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductImage entity = ProductImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductImageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductImage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductImage.
             <code><![CDATA[
             TList<ProductImage> list = new TList<ProductImage>();
             ProductImage entity = new ProductImage();
             entity.StringProperty = "foo";
             ProductImage entity2 = new ProductImage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	public virtualmethod that Deletes a ProductImage object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImage object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductImage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductImage entity = ProductImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductImageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductImage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductImage.
             <code><![CDATA[
             TList<ProductImage> list = new TList<ProductImage>();
             ProductImage entity = new ProductImage();
             entity.StringProperty = "foo";
             ProductImage entity2 = new ProductImage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductImageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productImageID
            </summary>
            <param name="productImageID">ProductImage pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoadByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductImage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoadByProductImageID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productImageID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductImage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductImage Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductImage Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductImage Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductImage Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductImage,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductImage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductImage Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductImage</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductImage} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductImage Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductImageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PromotionServiceBase">
            <summary>
             An object representation of the 'ZNodePromotion' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Promotion.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.CreatePromotion(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Decimal,System.DateTime,System.DateTime,System.Boolean,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> instance.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="profileID"></param>
            <param name="accountID"></param>
            <param name="productID"></param>
            <param name="addOnValueID"></param>
            <param name="sKUID"></param>
            <param name="discountTypeID"></param>
            <param name="discount"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="couponInd"></param>
            <param name="couponCode"></param>
            <param name="couponQuantityAvailable"></param>
            <param name="promotionMessage"></param>
            <param name="orderMinimum"></param>
            <param name="quantityMinimum"></param>
            <param name="promotionProductQty"></param>
            <param name="promotionProductID"></param>
            <param name="displayOrder"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByAddOnValueID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="addOnValueID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByAddOnValueID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByDiscountTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="discountTypeID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByProductID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="profileID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetBySKUID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="sKUID"></param>
            <returns>Returns a generic collection of Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetBySKUID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PromotionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByPromotionID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePromotion index.
            </summary>
            <param name="promotionID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetByPromotionID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePromotion index.
            </summary>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Promotion} of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Promotion</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	public virtualmethod that Inserts a Promotion object into the datasource using a transaction.
            </summary>
            <param name="entity">Promotion object to Insert.</param>
            <remarks>After Inserting into the datasource, the Promotion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Promotion entity = new Promotion();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PromotionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Promotion</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Promotion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Promotion.
             <code><![CDATA[
             TList<Promotion> list = new TList<Promotion>();
             Promotion entity = new Promotion();
             entity.StringProperty = "foo";
             Promotion entity2 = new Promotion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PromotionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	public virtualmethod that Updates a Promotion object into the datasource using a transaction.
            </summary>
            <param name="entity">Promotion object to Update.</param>
            <remarks>After Updateing into the datasource, the Promotion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Promotion entity = PromotionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PromotionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Promotion</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Promotion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Promotion.
             <code><![CDATA[
             TList<Promotion> list = new TList<Promotion>();
             Promotion entity = new Promotion();
             entity.StringProperty = "foo";
             Promotion entity2 = new Promotion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PromotionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	public virtualmethod that Saves a Promotion object into the datasource using a transaction.
            </summary>
            <param name="entity">Promotion object to Save.</param>
            <remarks>After Saveing into the datasource, the Promotion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Promotion entity = PromotionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PromotionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Promotion</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Promotion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Promotion.
             <code><![CDATA[
             TList<Promotion> list = new TList<Promotion>();
             Promotion entity = new Promotion();
             entity.StringProperty = "foo";
             Promotion entity2 = new Promotion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PromotionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	public virtualmethod that Deletes a Promotion object into the datasource using a transaction.
            </summary>
            <param name="entity">Promotion object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Promotion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Promotion entity = PromotionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PromotionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Promotion</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Promotion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Promotion.
             <code><![CDATA[
             TList<Promotion> list = new TList<Promotion>();
             Promotion entity = new Promotion();
             entity.StringProperty = "foo";
             Promotion entity2 = new Promotion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PromotionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PromotionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 promotionID
            </summary>
            <param name="promotionID">Promotion pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoadByPromotionID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="promotionID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Promotion Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Promotion Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Promotion Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Promotion Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Promotion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Promotion Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Promotion,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Promotion object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Promotion Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Promotion</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Promotion} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Promotion Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PromotionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase">
            <summary>
             An object representation of the 'ZNodePaymentType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PaymentType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.CreatePaymentType(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> instance.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PaymentTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetByPaymentTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_PaymentType index.
            </summary>
            <param name="paymentTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_PaymentType index.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PaymentType} of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PaymentType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	public virtualmethod that Inserts a PaymentType object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentType object to Insert.</param>
            <remarks>After Inserting into the datasource, the PaymentType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PaymentType entity = new PaymentType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PaymentTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PaymentType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PaymentType.
             <code><![CDATA[
             TList<PaymentType> list = new TList<PaymentType>();
             PaymentType entity = new PaymentType();
             entity.StringProperty = "foo";
             PaymentType entity2 = new PaymentType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	public virtualmethod that Updates a PaymentType object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentType object to Update.</param>
            <remarks>After Updateing into the datasource, the PaymentType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PaymentType entity = PaymentTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PaymentTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PaymentType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PaymentType.
             <code><![CDATA[
             TList<PaymentType> list = new TList<PaymentType>();
             PaymentType entity = new PaymentType();
             entity.StringProperty = "foo";
             PaymentType entity2 = new PaymentType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	public virtualmethod that Saves a PaymentType object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentType object to Save.</param>
            <remarks>After Saveing into the datasource, the PaymentType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PaymentType entity = PaymentTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PaymentTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PaymentType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PaymentType.
             <code><![CDATA[
             TList<PaymentType> list = new TList<PaymentType>();
             PaymentType entity = new PaymentType();
             entity.StringProperty = "foo";
             PaymentType entity2 = new PaymentType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	public virtualmethod that Deletes a PaymentType object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PaymentType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PaymentType entity = PaymentTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PaymentTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PaymentType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PaymentType.
             <code><![CDATA[
             TList<PaymentType> list = new TList<PaymentType>();
             PaymentType entity = new PaymentType();
             entity.StringProperty = "foo";
             PaymentType entity2 = new PaymentType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 paymentTypeID
            </summary>
            <param name="paymentTypeID">PaymentType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoadByName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoadByPaymentTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PaymentType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PaymentType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PaymentType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PaymentType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PaymentType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PaymentType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PaymentType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PaymentType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PaymentTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PortalService">
            <summary>
             An component type implementation of the 'ZNodePortal' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PortalServiceBase">
            <summary>
             An object representation of the 'ZNodePortal' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Portal.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.CreatePortal(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> instance.
            </summary>
            <param name="domainName"></param>
            <param name="companyName"></param>
            <param name="storeName"></param>
            <param name="logoPath"></param>
            <param name="useSSL"></param>
            <param name="adminEmail"></param>
            <param name="salesEmail"></param>
            <param name="customerServiceEmail"></param>
            <param name="salesPhoneNumber"></param>
            <param name="customerServicePhoneNumber"></param>
            <param name="imageNotAvailablePath"></param>
            <param name="maxCatalogDisplayColumns"></param>
            <param name="maxCatalogDisplayItems"></param>
            <param name="maxCatalogCategoryDisplayThumbnails"></param>
            <param name="maxCatalogItemSwatchWidth"></param>
            <param name="maxCatalogItemSmallWidth"></param>
            <param name="maxCatalogItemMediumWidth"></param>
            <param name="maxCatalogItemThumbnailWidth"></param>
            <param name="maxCatalogItemLargeWidth"></param>
            <param name="maxCatalogItemCrossSellWidth"></param>
            <param name="showSwatchInCategory"></param>
            <param name="showAlternateImageInCategory"></param>
            <param name="activeInd"></param>
            <param name="sMTPServer"></param>
            <param name="sMTPUserName"></param>
            <param name="sMTPPassword"></param>
            <param name="sMTPPort"></param>
            <param name="siteWideBottomJavascript"></param>
            <param name="siteWideTopJavascript"></param>
            <param name="orderReceiptAffiliateJavascript"></param>
            <param name="siteWideAnalyticsJavascript"></param>
            <param name="googleAnalyticsCode"></param>
            <param name="uPSUserName"></param>
            <param name="uPSPassword"></param>
            <param name="uPSKey"></param>
            <param name="shippingOriginZipCode"></param>
            <param name="theme"></param>
            <param name="shopByPriceMin"></param>
            <param name="shopByPriceMax"></param>
            <param name="shopByPriceIncrement"></param>
            <param name="fedExAccountNumber"></param>
            <param name="fedExMeterNumber"></param>
            <param name="fedExProductionKey"></param>
            <param name="fedExSecurityCode"></param>
            <param name="fedExCSPKey"></param>
            <param name="fedExCSPPassword"></param>
            <param name="fedExClientProductId"></param>
            <param name="fedExClientProductVersion"></param>
            <param name="fedExDropoffType"></param>
            <param name="fedExPackagingType"></param>
            <param name="fedExUseDiscountRate"></param>
            <param name="fedExAddInsurance"></param>
            <param name="shippingOriginAddress1"></param>
            <param name="shippingOriginAddress2"></param>
            <param name="shippingOriginCity"></param>
            <param name="shippingOriginStateCode"></param>
            <param name="shippingOriginCountryCode"></param>
            <param name="shippingOriginPhone"></param>
            <param name="currencyTypeID"></param>
            <param name="weightUnit"></param>
            <param name="dimensionUnit"></param>
            <param name="emailListLogin"></param>
            <param name="emailListPassword"></param>
            <param name="emailListDefaultList"></param>
            <param name="shippingTaxable"></param>
            <param name="defaultOrderStateID"></param>
            <param name="defaultReviewStatus"></param>
            <param name="inclusiveTax"></param>
            <param name="seoDefaultProductTitle"></param>
            <param name="seoDefaultProductDescription"></param>
            <param name="seoDefaultProductKeyword"></param>
            <param name="seoDefaultCategoryTitle"></param>
            <param name="seoDefaultCategoryDescription"></param>
            <param name="seoDefaultCategoryKeyword"></param>
            <param name="seoDefaultContentTitle"></param>
            <param name="seoDefaultContentDescription"></param>
            <param name="seoDefaultContentKeyword"></param>
            <param name="timeZoneOffset"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByCurrencyTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="currencyTypeID"></param>
            <returns>Returns a generic collection of Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByCurrencyTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByDefaultOrderStateID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="defaultOrderStateID"></param>
            <returns>Returns a generic collection of Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByDefaultOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="defaultOrderStateID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PortalKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByActiveInd(System.Boolean)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByActiveInd(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByPortalID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Portals index.
            </summary>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Portals index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Portal} of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Portal</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	public virtualmethod that Inserts a Portal object into the datasource using a transaction.
            </summary>
            <param name="entity">Portal object to Insert.</param>
            <remarks>After Inserting into the datasource, the Portal object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Portal entity = new Portal();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PortalService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Portal</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Portal</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Portal.
             <code><![CDATA[
             TList<Portal> list = new TList<Portal>();
             Portal entity = new Portal();
             entity.StringProperty = "foo";
             Portal entity2 = new Portal();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PortalService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	public virtualmethod that Updates a Portal object into the datasource using a transaction.
            </summary>
            <param name="entity">Portal object to Update.</param>
            <remarks>After Updateing into the datasource, the Portal object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Portal entity = PortalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PortalService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Portal</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Portal</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Portal.
             <code><![CDATA[
             TList<Portal> list = new TList<Portal>();
             Portal entity = new Portal();
             entity.StringProperty = "foo";
             Portal entity2 = new Portal();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PortalService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	public virtualmethod that Saves a Portal object into the datasource using a transaction.
            </summary>
            <param name="entity">Portal object to Save.</param>
            <remarks>After Saveing into the datasource, the Portal object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Portal entity = PortalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PortalService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Portal</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Portal</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Portal.
             <code><![CDATA[
             TList<Portal> list = new TList<Portal>();
             Portal entity = new Portal();
             entity.StringProperty = "foo";
             Portal entity2 = new Portal();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PortalService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	public virtualmethod that Deletes a Portal object into the datasource using a transaction.
            </summary>
            <param name="entity">Portal object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Portal object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Portal entity = PortalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PortalService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Portal</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Portal</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Portal.
             <code><![CDATA[
             TList<Portal> list = new TList<Portal>();
             Portal entity = new Portal();
             entity.StringProperty = "foo";
             Portal entity2 = new Portal();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PortalService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PortalKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 portalID
            </summary>
            <param name="portalID">Portal pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoadByActiveInd(System.Boolean,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="activeInd"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Portal Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoadByPortalID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="portalID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Portal Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Portal Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Portal Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Portal Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Portal)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Portal Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Portal,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Portal object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Portal Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Portal</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Portal} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Portal Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PortalServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PortalService.#ctor">
            <summary>
            Initializes a new instance of the PortalService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase">
            <summary>
             An object representation of the 'ZNodePaymentSetting' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PaymentSetting.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.CreatePaymentSetting(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Boolean,System.Int32,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> instance.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="profileID"></param>
            <param name="gatewayTypeID"></param>
            <param name="gatewayUsername"></param>
            <param name="gatewayPassword"></param>
            <param name="enableVisa"></param>
            <param name="enableMasterCard"></param>
            <param name="enableAmex"></param>
            <param name="enableDiscover"></param>
            <param name="enableRecurringPayments"></param>
            <param name="enableVault"></param>
            <param name="transactionKey"></param>
            <param name="activeInd"></param>
            <param name="displayOrder"></param>
            <param name="testMode"></param>
            <param name="partner"></param>
            <param name="vendor"></param>
            <param name="preAuthorize"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByGatewayTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="gatewayTypeID"></param>
            <returns>Returns a generic collection of PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByGatewayTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByPaymentTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="paymentTypeID"></param>
            <returns>Returns a generic collection of PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PaymentSettingKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key ix2 index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key ix2 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByPaymentSettingID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_PaymentSetting index.
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_PaymentSetting index.
            </summary>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PaymentSetting} of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PaymentSetting</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	public virtualmethod that Inserts a PaymentSetting object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentSetting object to Insert.</param>
            <remarks>After Inserting into the datasource, the PaymentSetting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PaymentSetting entity = new PaymentSetting();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PaymentSettingService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentSetting</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PaymentSetting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PaymentSetting.
             <code><![CDATA[
             TList<PaymentSetting> list = new TList<PaymentSetting>();
             PaymentSetting entity = new PaymentSetting();
             entity.StringProperty = "foo";
             PaymentSetting entity2 = new PaymentSetting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentSettingService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	public virtualmethod that Updates a PaymentSetting object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentSetting object to Update.</param>
            <remarks>After Updateing into the datasource, the PaymentSetting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PaymentSetting entity = PaymentSettingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PaymentSettingService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentSetting</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PaymentSetting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PaymentSetting.
             <code><![CDATA[
             TList<PaymentSetting> list = new TList<PaymentSetting>();
             PaymentSetting entity = new PaymentSetting();
             entity.StringProperty = "foo";
             PaymentSetting entity2 = new PaymentSetting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentSettingService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	public virtualmethod that Saves a PaymentSetting object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentSetting object to Save.</param>
            <remarks>After Saveing into the datasource, the PaymentSetting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PaymentSetting entity = PaymentSettingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PaymentSettingService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentSetting</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PaymentSetting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PaymentSetting.
             <code><![CDATA[
             TList<PaymentSetting> list = new TList<PaymentSetting>();
             PaymentSetting entity = new PaymentSetting();
             entity.StringProperty = "foo";
             PaymentSetting entity2 = new PaymentSetting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentSettingService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	public virtualmethod that Deletes a PaymentSetting object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentSetting object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PaymentSetting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PaymentSetting entity = PaymentSettingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PaymentSettingService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentSetting</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PaymentSetting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PaymentSetting.
             <code><![CDATA[
             TList<PaymentSetting> list = new TList<PaymentSetting>();
             PaymentSetting entity = new PaymentSetting();
             entity.StringProperty = "foo";
             PaymentSetting entity2 = new PaymentSetting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentSettingService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentSettingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 paymentSettingID
            </summary>
            <param name="paymentSettingID">PaymentSetting pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoadByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentSetting Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoadByProfileID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="profileID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentSetting Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoadByPaymentSettingID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="paymentSettingID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentSetting Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PaymentSetting Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PaymentSetting Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentSetting Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentSetting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PaymentSetting Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentSetting,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PaymentSetting object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PaymentSetting Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PaymentSetting</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PaymentSetting} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PaymentSetting Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PaymentSettingServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountTypeService">
            <summary>
             An component type implementation of the 'ZNodeAccountType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeAccountType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AccountType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.CreateAccountType(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> instance.
            </summary>
            <param name="accountTypeID"></param>
            <param name="accountTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AccountTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetByAccountTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_AccountType index.
            </summary>
            <param name="accountTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetByAccountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_AccountType index.
            </summary>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AccountType} of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AccountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	public virtualmethod that Inserts a AccountType object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountType object to Insert.</param>
            <remarks>After Inserting into the datasource, the AccountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AccountType entity = new AccountType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AccountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AccountType.
             <code><![CDATA[
             TList<AccountType> list = new TList<AccountType>();
             AccountType entity = new AccountType();
             entity.StringProperty = "foo";
             AccountType entity2 = new AccountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	public virtualmethod that Updates a AccountType object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountType object to Update.</param>
            <remarks>After Updateing into the datasource, the AccountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AccountType entity = AccountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AccountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AccountType.
             <code><![CDATA[
             TList<AccountType> list = new TList<AccountType>();
             AccountType entity = new AccountType();
             entity.StringProperty = "foo";
             AccountType entity2 = new AccountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	public virtualmethod that Saves a AccountType object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountType object to Save.</param>
            <remarks>After Saveing into the datasource, the AccountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AccountType entity = AccountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AccountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AccountType.
             <code><![CDATA[
             TList<AccountType> list = new TList<AccountType>();
             AccountType entity = new AccountType();
             entity.StringProperty = "foo";
             AccountType entity2 = new AccountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	public virtualmethod that Deletes a AccountType object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AccountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AccountType entity = AccountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AccountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AccountType.
             <code><![CDATA[
             TList<AccountType> list = new TList<AccountType>();
             AccountType entity = new AccountType();
             entity.StringProperty = "foo";
             AccountType entity2 = new AccountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AccountTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 accountTypeID
            </summary>
            <param name="accountTypeID">AccountType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoadByAccountTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="accountTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccountType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AccountType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AccountType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccountType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AccountType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AccountType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AccountType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AccountType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AccountType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AccountType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AccountType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AccountTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountTypeService.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SKUServiceBase">
            <summary>
             An object representation of the 'ZNodeSKU' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SKU.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.CreateSKU(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Boolean,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="sKU"></param>
            <param name="supplierID"></param>
            <param name="note"></param>
            <param name="quantityOnHand"></param>
            <param name="reorderLevel"></param>
            <param name="weightAdditional"></param>
            <param name="sKUPicturePath"></param>
            <param name="imageAltTag"></param>
            <param name="displayOrder"></param>
            <param name="retailPriceOverride"></param>
            <param name="salePriceOverride"></param>
            <param name="wholesalePriceOverride"></param>
            <param name="recurringBillingPeriod"></param>
            <param name="recurringBillingFrequency"></param>
            <param name="recurringBillingTotalCycles"></param>
            <param name="recurringBillingInitialAmount"></param>
            <param name="activeInd"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="webServiceDownloadDte"></param>
            <param name="updateDte"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a generic collection of SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Get(ZNode.Libraries.DataAccess.Entities.SKUKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetByProductID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ProductId index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ProductId index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySKU(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySKUID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_SKU_PK index.
            </summary>
            <param name="sKUID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetBySKUID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_SKU_PK index.
            </summary>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SKU} of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SKU</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	public virtualmethod that Inserts a SKU object into the datasource using a transaction.
            </summary>
            <param name="entity">SKU object to Insert.</param>
            <remarks>After Inserting into the datasource, the SKU object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SKU entity = new SKU();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SKUService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKU</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SKU</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SKU.
             <code><![CDATA[
             TList<SKU> list = new TList<SKU>();
             SKU entity = new SKU();
             entity.StringProperty = "foo";
             SKU entity2 = new SKU();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Update(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	public virtualmethod that Updates a SKU object into the datasource using a transaction.
            </summary>
            <param name="entity">SKU object to Update.</param>
            <remarks>After Updateing into the datasource, the SKU object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SKU entity = SKUService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SKUService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKU</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SKU</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SKU.
             <code><![CDATA[
             TList<SKU> list = new TList<SKU>();
             SKU entity = new SKU();
             entity.StringProperty = "foo";
             SKU entity2 = new SKU();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Save(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	public virtualmethod that Saves a SKU object into the datasource using a transaction.
            </summary>
            <param name="entity">SKU object to Save.</param>
            <remarks>After Saveing into the datasource, the SKU object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SKU entity = SKUService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SKUService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKU</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SKU</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SKU.
             <code><![CDATA[
             TList<SKU> list = new TList<SKU>();
             SKU entity = new SKU();
             entity.StringProperty = "foo";
             SKU entity2 = new SKU();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	public virtualmethod that Deletes a SKU object into the datasource using a transaction.
            </summary>
            <param name="entity">SKU object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SKU object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SKU entity = SKUService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SKUService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKU</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SKU</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SKU.
             <code><![CDATA[
             TList<SKU> list = new TList<SKU>();
             SKU entity = new SKU();
             entity.StringProperty = "foo";
             SKU entity2 = new SKU();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SKUKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 sKUID
            </summary>
            <param name="sKUID">SKU pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoadByProductID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKU Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoadBySKU(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sKU"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKU Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoadBySKUID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sKUID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKU Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SKU Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SKU Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKU Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKU)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SKU Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SKU,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SKU object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SKU Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SKU</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SKU} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SKU Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SKUServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SKUService">
            <summary>
             An component type implementation of the 'ZNodeSKU' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUService.#ctor">
            <summary>
            Initializes a new instance of the SKUService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StateService">
            <summary>
             An component type implementation of the 'ZNodeState' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StateServiceBase">
            <summary>
             An object representation of the 'ZNodeState' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the State.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.CreateState(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> instance.
            </summary>
            <param name="code"></param>
            <param name="countryCode"></param>
            <param name="name"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Get(ZNode.Libraries.DataAccess.Entities.StateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeState index.
            </summary>
            <param name="code"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeState index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{State} of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>State</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	public virtualmethod that Inserts a State object into the datasource using a transaction.
            </summary>
            <param name="entity">State object to Insert.</param>
            <remarks>After Inserting into the datasource, the State object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            State entity = new State();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>State</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>State</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of State.
             <code><![CDATA[
             TList<State> list = new TList<State>();
             State entity = new State();
             entity.StringProperty = "foo";
             State entity2 = new State();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Update(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	public virtualmethod that Updates a State object into the datasource using a transaction.
            </summary>
            <param name="entity">State object to Update.</param>
            <remarks>After Updateing into the datasource, the State object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            State entity = StateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>State</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>State</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of State.
             <code><![CDATA[
             TList<State> list = new TList<State>();
             State entity = new State();
             entity.StringProperty = "foo";
             State entity2 = new State();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Save(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	public virtualmethod that Saves a State object into the datasource using a transaction.
            </summary>
            <param name="entity">State object to Save.</param>
            <remarks>After Saveing into the datasource, the State object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            State entity = StateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>State</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>State</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of State.
             <code><![CDATA[
             TList<State> list = new TList<State>();
             State entity = new State();
             entity.StringProperty = "foo";
             State entity2 = new State();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	public virtualmethod that Deletes a State object into the datasource using a transaction.
            </summary>
            <param name="entity">State object to Delete.</param>
            <remarks>After Deleteing into the datasource, the State object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            State entity = StateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>State</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>State</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of State.
             <code><![CDATA[
             TList<State> list = new TList<State>();
             State entity = new State();
             entity.StringProperty = "foo";
             State entity2 = new State();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.StateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String code
            </summary>
            <param name="code">State pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoadByCode(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="code"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">State Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">State Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">State Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">State Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.State)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">State Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.State,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the State object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">State Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>State</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{State} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">State Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.StateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StateService.#ctor">
            <summary>
            Initializes a new instance of the StateService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TrackingService">
            <summary>
             An component type implementation of the 'ZNodeTracking' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TrackingServiceBase">
            <summary>
             An object representation of the 'ZNodeTracking' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Tracking.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.CreateTracking(System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> instance.
            </summary>
            <param name="date"></param>
            <param name="refererDomain"></param>
            <param name="refererQuery"></param>
            <param name="affiliateId"></param>
            <param name="campaignSource"></param>
            <param name="campaignId"></param>
            <param name="campaignKeyword"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Get(ZNode.Libraries.DataAccess.Entities.TrackingKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetByTrackingID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTracking index.
            </summary>
            <param name="trackingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetByTrackingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTracking index.
            </summary>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Tracking} of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Tracking</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	public virtualmethod that Inserts a Tracking object into the datasource using a transaction.
            </summary>
            <param name="entity">Tracking object to Insert.</param>
            <remarks>After Inserting into the datasource, the Tracking object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Tracking entity = new Tracking();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TrackingService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Tracking</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Tracking</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Tracking.
             <code><![CDATA[
             TList<Tracking> list = new TList<Tracking>();
             Tracking entity = new Tracking();
             entity.StringProperty = "foo";
             Tracking entity2 = new Tracking();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	public virtualmethod that Updates a Tracking object into the datasource using a transaction.
            </summary>
            <param name="entity">Tracking object to Update.</param>
            <remarks>After Updateing into the datasource, the Tracking object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Tracking entity = TrackingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TrackingService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Tracking</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Tracking</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Tracking.
             <code><![CDATA[
             TList<Tracking> list = new TList<Tracking>();
             Tracking entity = new Tracking();
             entity.StringProperty = "foo";
             Tracking entity2 = new Tracking();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	public virtualmethod that Saves a Tracking object into the datasource using a transaction.
            </summary>
            <param name="entity">Tracking object to Save.</param>
            <remarks>After Saveing into the datasource, the Tracking object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Tracking entity = TrackingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TrackingService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Tracking</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Tracking</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Tracking.
             <code><![CDATA[
             TList<Tracking> list = new TList<Tracking>();
             Tracking entity = new Tracking();
             entity.StringProperty = "foo";
             Tracking entity2 = new Tracking();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	public virtualmethod that Deletes a Tracking object into the datasource using a transaction.
            </summary>
            <param name="entity">Tracking object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Tracking object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Tracking entity = TrackingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TrackingService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Tracking</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Tracking</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Tracking.
             <code><![CDATA[
             TList<Tracking> list = new TList<Tracking>();
             Tracking entity = new Tracking();
             entity.StringProperty = "foo";
             Tracking entity2 = new Tracking();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TrackingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 trackingID
            </summary>
            <param name="trackingID">Tracking pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoadByTrackingID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="trackingID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Tracking Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Tracking Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Tracking Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Tracking Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Tracking)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Tracking Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Tracking,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Tracking object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Tracking Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Tracking</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Tracking} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Tracking Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.TrackingServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingService.#ctor">
            <summary>
            Initializes a new instance of the TrackingService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTypeService">
            <summary>
             An component type implementation of the 'ZNodeProductType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeProductType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.CreateProductType(System.Int32,System.String,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> instance.
            </summary>
            <param name="portalId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetByPortalId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <returns>Returns a generic collection of ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetByPortalId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetByProductTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductType index.
            </summary>
            <param name="productTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetByProductTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductType index.
            </summary>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductType} of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	public virtualmethod that Inserts a ProductType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductType entity = new ProductType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductType.
             <code><![CDATA[
             TList<ProductType> list = new TList<ProductType>();
             ProductType entity = new ProductType();
             entity.StringProperty = "foo";
             ProductType entity2 = new ProductType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	public virtualmethod that Updates a ProductType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductType object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductType entity = ProductTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductType.
             <code><![CDATA[
             TList<ProductType> list = new TList<ProductType>();
             ProductType entity = new ProductType();
             entity.StringProperty = "foo";
             ProductType entity2 = new ProductType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	public virtualmethod that Saves a ProductType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductType object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductType entity = ProductTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductType.
             <code><![CDATA[
             TList<ProductType> list = new TList<ProductType>();
             ProductType entity = new ProductType();
             entity.StringProperty = "foo";
             ProductType entity2 = new ProductType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	public virtualmethod that Deletes a ProductType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductType entity = ProductTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductType.
             <code><![CDATA[
             TList<ProductType> list = new TList<ProductType>();
             ProductType entity = new ProductType();
             entity.StringProperty = "foo";
             ProductType entity2 = new ProductType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productTypeId
            </summary>
            <param name="productTypeId">ProductType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoadByProductTypeId(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeService.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingTypeService">
            <summary>
             An component type implementation of the 'ZNodeShippingType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeShippingType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShippingType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.CreateShippingType(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> instance.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="className"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="isActive"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ShippingTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetByShippingTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingType index.
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingType index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShippingType} of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShippingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	public virtualmethod that Inserts a ShippingType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShippingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShippingType entity = new ShippingType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShippingTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShippingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShippingType.
             <code><![CDATA[
             TList<ShippingType> list = new TList<ShippingType>();
             ShippingType entity = new ShippingType();
             entity.StringProperty = "foo";
             ShippingType entity2 = new ShippingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	public virtualmethod that Updates a ShippingType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingType object to Update.</param>
            <remarks>After Updateing into the datasource, the ShippingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShippingType entity = ShippingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShippingTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShippingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShippingType.
             <code><![CDATA[
             TList<ShippingType> list = new TList<ShippingType>();
             ShippingType entity = new ShippingType();
             entity.StringProperty = "foo";
             ShippingType entity2 = new ShippingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	public virtualmethod that Saves a ShippingType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingType object to Save.</param>
            <remarks>After Saveing into the datasource, the ShippingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShippingType entity = ShippingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShippingTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShippingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShippingType.
             <code><![CDATA[
             TList<ShippingType> list = new TList<ShippingType>();
             ShippingType entity = new ShippingType();
             entity.StringProperty = "foo";
             ShippingType entity2 = new ShippingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	public virtualmethod that Deletes a ShippingType object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShippingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShippingType entity = ShippingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShippingTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShippingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShippingType.
             <code><![CDATA[
             TList<ShippingType> list = new TList<ShippingType>();
             ShippingType entity = new ShippingType();
             entity.StringProperty = "foo";
             ShippingType entity2 = new ShippingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 shippingTypeID
            </summary>
            <param name="shippingTypeID">ShippingType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoadByShippingTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShippingType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShippingType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShippingType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShippingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShippingType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShippingType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShippingType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShippingType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ShippingTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingTypeService.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase">
            <summary>
             An object representation of the 'ZNodeDigitalAsset' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DigitalAsset.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.CreateDigitalAsset(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="digitalAsset"></param>
            <param name="orderLineItemID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByOrderLineItemID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="orderLineItemID"></param>
            <returns>Returns a generic collection of DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Get(ZNode.Libraries.DataAccess.Entities.DigitalAssetKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByDigitalAssetID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeDigitalAsset index.
            </summary>
            <param name="digitalAssetID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetByDigitalAssetID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeDigitalAsset index.
            </summary>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DigitalAsset} of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DigitalAsset</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	public virtualmethod that Inserts a DigitalAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">DigitalAsset object to Insert.</param>
            <remarks>After Inserting into the datasource, the DigitalAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DigitalAsset entity = new DigitalAsset();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DigitalAssetService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DigitalAsset</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DigitalAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DigitalAsset.
             <code><![CDATA[
             TList<DigitalAsset> list = new TList<DigitalAsset>();
             DigitalAsset entity = new DigitalAsset();
             entity.StringProperty = "foo";
             DigitalAsset entity2 = new DigitalAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DigitalAssetService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Update(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	public virtualmethod that Updates a DigitalAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">DigitalAsset object to Update.</param>
            <remarks>After Updateing into the datasource, the DigitalAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DigitalAsset entity = DigitalAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DigitalAssetService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DigitalAsset</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DigitalAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DigitalAsset.
             <code><![CDATA[
             TList<DigitalAsset> list = new TList<DigitalAsset>();
             DigitalAsset entity = new DigitalAsset();
             entity.StringProperty = "foo";
             DigitalAsset entity2 = new DigitalAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DigitalAssetService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Save(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	public virtualmethod that Saves a DigitalAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">DigitalAsset object to Save.</param>
            <remarks>After Saveing into the datasource, the DigitalAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DigitalAsset entity = DigitalAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DigitalAssetService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DigitalAsset</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DigitalAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DigitalAsset.
             <code><![CDATA[
             TList<DigitalAsset> list = new TList<DigitalAsset>();
             DigitalAsset entity = new DigitalAsset();
             entity.StringProperty = "foo";
             DigitalAsset entity2 = new DigitalAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DigitalAssetService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	public virtualmethod that Deletes a DigitalAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">DigitalAsset object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DigitalAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DigitalAsset entity = DigitalAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DigitalAssetService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DigitalAsset</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DigitalAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DigitalAsset.
             <code><![CDATA[
             TList<DigitalAsset> list = new TList<DigitalAsset>();
             DigitalAsset entity = new DigitalAsset();
             entity.StringProperty = "foo";
             DigitalAsset entity2 = new DigitalAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DigitalAssetService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.DigitalAssetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 digitalAssetID
            </summary>
            <param name="digitalAssetID">DigitalAsset pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoadByDigitalAssetID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="digitalAssetID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DigitalAsset Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DigitalAsset Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DigitalAsset Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DigitalAsset Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DigitalAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DigitalAsset Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.DigitalAsset,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DigitalAsset object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DigitalAsset Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DigitalAsset</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DigitalAsset} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DigitalAsset Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.DigitalAssetServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.HighlightTypeService">
            <summary>
             An component type implementation of the 'ZNodeHighlightType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeHighlightType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HighlightType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.CreateHighlightType(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> instance.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.HighlightTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetByHighlightTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeHighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetByHighlightTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeHighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HighlightType} of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HighlightType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	public virtualmethod that Inserts a HighlightType object into the datasource using a transaction.
            </summary>
            <param name="entity">HighlightType object to Insert.</param>
            <remarks>After Inserting into the datasource, the HighlightType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HighlightType entity = new HighlightType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HighlightTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HighlightType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HighlightType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HighlightType.
             <code><![CDATA[
             TList<HighlightType> list = new TList<HighlightType>();
             HighlightType entity = new HighlightType();
             entity.StringProperty = "foo";
             HighlightType entity2 = new HighlightType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	public virtualmethod that Updates a HighlightType object into the datasource using a transaction.
            </summary>
            <param name="entity">HighlightType object to Update.</param>
            <remarks>After Updateing into the datasource, the HighlightType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HighlightType entity = HighlightTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HighlightTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HighlightType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HighlightType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HighlightType.
             <code><![CDATA[
             TList<HighlightType> list = new TList<HighlightType>();
             HighlightType entity = new HighlightType();
             entity.StringProperty = "foo";
             HighlightType entity2 = new HighlightType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	public virtualmethod that Saves a HighlightType object into the datasource using a transaction.
            </summary>
            <param name="entity">HighlightType object to Save.</param>
            <remarks>After Saveing into the datasource, the HighlightType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HighlightType entity = HighlightTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HighlightTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HighlightType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HighlightType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HighlightType.
             <code><![CDATA[
             TList<HighlightType> list = new TList<HighlightType>();
             HighlightType entity = new HighlightType();
             entity.StringProperty = "foo";
             HighlightType entity2 = new HighlightType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	public virtualmethod that Deletes a HighlightType object into the datasource using a transaction.
            </summary>
            <param name="entity">HighlightType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HighlightType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HighlightType entity = HighlightTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HighlightTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HighlightType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HighlightType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HighlightType.
             <code><![CDATA[
             TList<HighlightType> list = new TList<HighlightType>();
             HighlightType entity = new HighlightType();
             entity.StringProperty = "foo";
             HighlightType entity2 = new HighlightType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.HighlightTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 highlightTypeID
            </summary>
            <param name="highlightTypeID">HighlightType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoadByHighlightTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HighlightType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HighlightType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HighlightType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HighlightType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.HighlightType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HighlightType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.HighlightType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HighlightType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HighlightType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HighlightType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HighlightType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HighlightType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.HighlightTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightTypeService.#ctor">
            <summary>
            Initializes a new instance of the HighlightTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase">
            <summary>
             An object representation of the 'ZNodeCaseStatus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CaseStatus.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.CreateCaseStatus(System.Int32,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> instance.
            </summary>
            <param name="caseStatusID"></param>
            <param name="caseStatusNme"></param>
            <param name="viewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CaseStatusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetByCaseStatusID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CaseStatus index.
            </summary>
            <param name="caseStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetByCaseStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CaseStatus index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CaseStatus} of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CaseStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	public virtualmethod that Inserts a CaseStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseStatus object to Insert.</param>
            <remarks>After Inserting into the datasource, the CaseStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CaseStatus entity = new CaseStatus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CaseStatusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CaseStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CaseStatus.
             <code><![CDATA[
             TList<CaseStatus> list = new TList<CaseStatus>();
             CaseStatus entity = new CaseStatus();
             entity.StringProperty = "foo";
             CaseStatus entity2 = new CaseStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseStatusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Update(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	public virtualmethod that Updates a CaseStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseStatus object to Update.</param>
            <remarks>After Updateing into the datasource, the CaseStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CaseStatus entity = CaseStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CaseStatusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CaseStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CaseStatus.
             <code><![CDATA[
             TList<CaseStatus> list = new TList<CaseStatus>();
             CaseStatus entity = new CaseStatus();
             entity.StringProperty = "foo";
             CaseStatus entity2 = new CaseStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseStatusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Save(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	public virtualmethod that Saves a CaseStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseStatus object to Save.</param>
            <remarks>After Saveing into the datasource, the CaseStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CaseStatus entity = CaseStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CaseStatusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CaseStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CaseStatus.
             <code><![CDATA[
             TList<CaseStatus> list = new TList<CaseStatus>();
             CaseStatus entity = new CaseStatus();
             entity.StringProperty = "foo";
             CaseStatus entity2 = new CaseStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseStatusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	public virtualmethod that Deletes a CaseStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseStatus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CaseStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CaseStatus entity = CaseStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CaseStatusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CaseStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CaseStatus.
             <code><![CDATA[
             TList<CaseStatus> list = new TList<CaseStatus>();
             CaseStatus entity = new CaseStatus();
             entity.StringProperty = "foo";
             CaseStatus entity2 = new CaseStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseStatusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 caseStatusID
            </summary>
            <param name="caseStatusID">CaseStatus pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoadByCaseStatusID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="caseStatusID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseStatus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CaseStatus Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CaseStatus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseStatus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CaseStatus Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseStatus,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CaseStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CaseStatus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CaseStatus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CaseStatus} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CaseStatus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CaseStatusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase">
            <summary>
             An object representation of the 'ZNodeContentPage' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ContentPage.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.CreateContentPage(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> instance.
            </summary>
            <param name="name"></param>
            <param name="portalID"></param>
            <param name="masterPage"></param>
            <param name="title"></param>
            <param name="sEOTitle"></param>
            <param name="sEOMetaKeywords"></param>
            <param name="sEOMetaDescription"></param>
            <param name="allowDelete"></param>
            <param name="templateName"></param>
            <param name="activeInd"></param>
            <param name="analyticsCode"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="sEOURL"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByPortalID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ContentPageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetBySEOURL(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodePage index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodePage index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByContentPageID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePage_1 index.
            </summary>
            <param name="contentPageID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetByContentPageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePage_1 index.
            </summary>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ContentPage} of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContentPage</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	public virtualmethod that Inserts a ContentPage object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPage object to Insert.</param>
            <remarks>After Inserting into the datasource, the ContentPage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ContentPage entity = new ContentPage();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContentPageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ContentPage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ContentPage.
             <code><![CDATA[
             TList<ContentPage> list = new TList<ContentPage>();
             ContentPage entity = new ContentPage();
             entity.StringProperty = "foo";
             ContentPage entity2 = new ContentPage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	public virtualmethod that Updates a ContentPage object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPage object to Update.</param>
            <remarks>After Updateing into the datasource, the ContentPage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ContentPage entity = ContentPageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContentPageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ContentPage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ContentPage.
             <code><![CDATA[
             TList<ContentPage> list = new TList<ContentPage>();
             ContentPage entity = new ContentPage();
             entity.StringProperty = "foo";
             ContentPage entity2 = new ContentPage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	public virtualmethod that Saves a ContentPage object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPage object to Save.</param>
            <remarks>After Saveing into the datasource, the ContentPage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ContentPage entity = ContentPageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContentPageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ContentPage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ContentPage.
             <code><![CDATA[
             TList<ContentPage> list = new TList<ContentPage>();
             ContentPage entity = new ContentPage();
             entity.StringProperty = "foo";
             ContentPage entity2 = new ContentPage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	public virtualmethod that Deletes a ContentPage object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPage object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ContentPage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ContentPage entity = ContentPageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContentPageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPage</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ContentPage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ContentPage.
             <code><![CDATA[
             TList<ContentPage> list = new TList<ContentPage>();
             ContentPage entity = new ContentPage();
             entity.StringProperty = "foo";
             ContentPage entity2 = new ContentPage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ContentPageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 contentPageID
            </summary>
            <param name="contentPageID">ContentPage pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoadBySEOURL(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sEOURL"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoadByName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoadByContentPageID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="contentPageID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ContentPage Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ContentPage Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPage Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ContentPage Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ContentPage,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ContentPage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ContentPage Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ContentPage</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ContentPage} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ContentPage Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ContentPageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CategoryService">
            <summary>
             An component type implementation of the 'ZNodeCategory' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CategoryServiceBase">
            <summary>
             An object representation of the 'ZNodeCategory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Category.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.CreateCategory(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="masterPage"></param>
            <param name="name"></param>
            <param name="title"></param>
            <param name="shortDescription"></param>
            <param name="description"></param>
            <param name="parentCategoryID"></param>
            <param name="displayOrder"></param>
            <param name="imageFile"></param>
            <param name="imageAltTag"></param>
            <param name="visibleInd"></param>
            <param name="subCategoryGridVisibleInd"></param>
            <param name="sEOTitle"></param>
            <param name="sEOKeywords"></param>
            <param name="sEODescription"></param>
            <param name="alternateDescription"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="sEOURL"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByPortalID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByParentCategoryID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="parentCategoryID"></param>
            <returns>Returns a generic collection of Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByParentCategoryID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="parentCategoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetBySEOURL(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByCategoryID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Category_PK index.
            </summary>
            <param name="categoryID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetByCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Category_PK index.
            </summary>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Category} of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Category</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	public virtualmethod that Inserts a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Insert.</param>
            <remarks>After Inserting into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Category entity = new Category();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	public virtualmethod that Updates a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Update.</param>
            <remarks>After Updateing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	public virtualmethod that Saves a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Save.</param>
            <remarks>After Saveing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	public virtualmethod that Deletes a Category object into the datasource using a transaction.
            </summary>
            <param name="entity">Category object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Category object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Category entity = CategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Category</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Category</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Category.
             <code><![CDATA[
             TList<Category> list = new TList<Category>();
             Category entity = new Category();
             entity.StringProperty = "foo";
             Category entity2 = new Category();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 categoryID
            </summary>
            <param name="categoryID">Category pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoadBySEOURL(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sEOURL"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoadByCategoryID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="categoryID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Category Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Category Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Category)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Category Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Category,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Category object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Category Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Category</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Category} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Category Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CategoryService.#ctor">
            <summary>
            Initializes a new instance of the CategoryService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingServiceBase">
            <summary>
             An object representation of the 'ZNodeShipping' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Shipping.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.CreateShipping(System.Int32,System.Nullable{System.Int32},System.String,System.Decimal,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> instance.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="profileID"></param>
            <param name="shippingCode"></param>
            <param name="handlingCharge">This charge is added on top of the calculated shipping charge for the carrier.</param>
            <param name="destinationCountryCode"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByDestinationCountryCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <returns>Returns a generic collection of Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByDestinationCountryCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ShippingKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByShippingTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SC_Shipping index.
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SC_Shipping index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByShippingID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Shipping index.
            </summary>
            <param name="shippingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetByShippingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Shipping index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Shipping} of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Shipping</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	public virtualmethod that Inserts a Shipping object into the datasource using a transaction.
            </summary>
            <param name="entity">Shipping object to Insert.</param>
            <remarks>After Inserting into the datasource, the Shipping object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Shipping entity = new Shipping();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShippingService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shipping</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Shipping</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Shipping.
             <code><![CDATA[
             TList<Shipping> list = new TList<Shipping>();
             Shipping entity = new Shipping();
             entity.StringProperty = "foo";
             Shipping entity2 = new Shipping();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	public virtualmethod that Updates a Shipping object into the datasource using a transaction.
            </summary>
            <param name="entity">Shipping object to Update.</param>
            <remarks>After Updateing into the datasource, the Shipping object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Shipping entity = ShippingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShippingService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shipping</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Shipping</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Shipping.
             <code><![CDATA[
             TList<Shipping> list = new TList<Shipping>();
             Shipping entity = new Shipping();
             entity.StringProperty = "foo";
             Shipping entity2 = new Shipping();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	public virtualmethod that Saves a Shipping object into the datasource using a transaction.
            </summary>
            <param name="entity">Shipping object to Save.</param>
            <remarks>After Saveing into the datasource, the Shipping object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Shipping entity = ShippingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShippingService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shipping</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Shipping</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Shipping.
             <code><![CDATA[
             TList<Shipping> list = new TList<Shipping>();
             Shipping entity = new Shipping();
             entity.StringProperty = "foo";
             Shipping entity2 = new Shipping();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	public virtualmethod that Deletes a Shipping object into the datasource using a transaction.
            </summary>
            <param name="entity">Shipping object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Shipping object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Shipping entity = ShippingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShippingService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shipping</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Shipping</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Shipping.
             <code><![CDATA[
             TList<Shipping> list = new TList<Shipping>();
             Shipping entity = new Shipping();
             entity.StringProperty = "foo";
             Shipping entity2 = new Shipping();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 shippingID
            </summary>
            <param name="shippingID">Shipping pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoadByShippingTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shipping Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoadByProfileID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="profileID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shipping Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoadByShippingID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shipping Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Shipping Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Shipping Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shipping Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Shipping)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Shipping Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Shipping,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Shipping object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Shipping Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Shipping</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Shipping} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Shipping Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ShippingServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeService">
            <summary>
             An component type implementation of the 'ZNodeProductTypeAttribute' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase">
            <summary>
             An object representation of the 'ZNodeProductTypeAttribute' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductTypeAttribute.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.CreateProductTypeAttribute(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> instance.
            </summary>
            <param name="productTypeId"></param>
            <param name="attributeTypeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetByProductTypeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="productTypeId"></param>
            <returns>Returns a generic collection of ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetByProductTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetByProductAttributeTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="productAttributeTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetByProductAttributeTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductTypeAttribute} of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductTypeAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	public virtualmethod that Inserts a ProductTypeAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTypeAttribute object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductTypeAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductTypeAttribute entity = new ProductTypeAttribute();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductTypeAttributeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTypeAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductTypeAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductTypeAttribute.
             <code><![CDATA[
             TList<ProductTypeAttribute> list = new TList<ProductTypeAttribute>();
             ProductTypeAttribute entity = new ProductTypeAttribute();
             entity.StringProperty = "foo";
             ProductTypeAttribute entity2 = new ProductTypeAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeAttributeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	public virtualmethod that Updates a ProductTypeAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTypeAttribute object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductTypeAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductTypeAttribute entity = ProductTypeAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductTypeAttributeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTypeAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductTypeAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductTypeAttribute.
             <code><![CDATA[
             TList<ProductTypeAttribute> list = new TList<ProductTypeAttribute>();
             ProductTypeAttribute entity = new ProductTypeAttribute();
             entity.StringProperty = "foo";
             ProductTypeAttribute entity2 = new ProductTypeAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeAttributeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	public virtualmethod that Saves a ProductTypeAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTypeAttribute object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductTypeAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductTypeAttribute entity = ProductTypeAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductTypeAttributeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTypeAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductTypeAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductTypeAttribute.
             <code><![CDATA[
             TList<ProductTypeAttribute> list = new TList<ProductTypeAttribute>();
             ProductTypeAttribute entity = new ProductTypeAttribute();
             entity.StringProperty = "foo";
             ProductTypeAttribute entity2 = new ProductTypeAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeAttributeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	public virtualmethod that Deletes a ProductTypeAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTypeAttribute object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductTypeAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductTypeAttribute entity = ProductTypeAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductTypeAttributeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTypeAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductTypeAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductTypeAttribute.
             <code><![CDATA[
             TList<ProductTypeAttribute> list = new TList<ProductTypeAttribute>();
             ProductTypeAttribute entity = new ProductTypeAttribute();
             entity.StringProperty = "foo";
             ProductTypeAttribute entity2 = new ProductTypeAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTypeAttributeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productAttributeTypeID
            </summary>
            <param name="productAttributeTypeID">ProductTypeAttribute pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoadByProductAttributeTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productAttributeTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductTypeAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductTypeAttribute Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductTypeAttribute Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductTypeAttribute Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductTypeAttribute Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductTypeAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductTypeAttribute Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductTypeAttribute</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductTypeAttribute} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductTypeAttribute Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTypeAttributeService.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ZNode.Libraries.DataAccess.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ZNode.Libraries.DataAccess.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.Copy(ZNode.Libraries.DataAccess.Service.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:ZNode.Libraries.DataAccess.Service.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:ZNode.Libraries.DataAccess.Service.ConnectionScope"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase">
            <summary>
             An object representation of the 'ZNodeAccountPayment' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AccountPayment.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.CreateAccountPayment(System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> instance.
            </summary>
            <param name="accountID"></param>
            <param name="orderID"></param>
            <param name="transactionID"></param>
            <param name="receivedDate"></param>
            <param name="description"></param>
            <param name="amount"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByAccountID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByOrderID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="orderID"></param>
            <returns>Returns a generic collection of AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByOrderID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AccountPaymentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByAccountPaymentID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeAccountPayment index.
            </summary>
            <param name="accountPaymentID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetByAccountPaymentID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeAccountPayment index.
            </summary>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AccountPayment} of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AccountPayment</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	public virtualmethod that Inserts a AccountPayment object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountPayment object to Insert.</param>
            <remarks>After Inserting into the datasource, the AccountPayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AccountPayment entity = new AccountPayment();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountPaymentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountPayment</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AccountPayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AccountPayment.
             <code><![CDATA[
             TList<AccountPayment> list = new TList<AccountPayment>();
             AccountPayment entity = new AccountPayment();
             entity.StringProperty = "foo";
             AccountPayment entity2 = new AccountPayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountPaymentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Update(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	public virtualmethod that Updates a AccountPayment object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountPayment object to Update.</param>
            <remarks>After Updateing into the datasource, the AccountPayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AccountPayment entity = AccountPaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountPaymentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountPayment</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AccountPayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AccountPayment.
             <code><![CDATA[
             TList<AccountPayment> list = new TList<AccountPayment>();
             AccountPayment entity = new AccountPayment();
             entity.StringProperty = "foo";
             AccountPayment entity2 = new AccountPayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountPaymentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Save(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	public virtualmethod that Saves a AccountPayment object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountPayment object to Save.</param>
            <remarks>After Saveing into the datasource, the AccountPayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AccountPayment entity = AccountPaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountPaymentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountPayment</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AccountPayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AccountPayment.
             <code><![CDATA[
             TList<AccountPayment> list = new TList<AccountPayment>();
             AccountPayment entity = new AccountPayment();
             entity.StringProperty = "foo";
             AccountPayment entity2 = new AccountPayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountPaymentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	public virtualmethod that Deletes a AccountPayment object into the datasource using a transaction.
            </summary>
            <param name="entity">AccountPayment object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AccountPayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AccountPayment entity = AccountPaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountPaymentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccountPayment</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AccountPayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AccountPayment.
             <code><![CDATA[
             TList<AccountPayment> list = new TList<AccountPayment>();
             AccountPayment entity = new AccountPayment();
             entity.StringProperty = "foo";
             AccountPayment entity2 = new AccountPayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountPaymentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AccountPaymentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 accountPaymentID
            </summary>
            <param name="accountPaymentID">AccountPayment pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoadByAccountPaymentID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="accountPaymentID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccountPayment Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AccountPayment Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AccountPayment Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccountPayment Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AccountPayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AccountPayment Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AccountPayment,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AccountPayment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AccountPayment Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AccountPayment</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AccountPayment} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AccountPayment Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AccountPaymentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeService">
            <summary>
             An component type implementation of the 'ZNodeOrderProcessingType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeOrderProcessingType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderProcessingType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.CreateOrderProcessingType(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> instance.
            </summary>
            <param name="description"></param>
            <param name="classID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetByOrderProcessingTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_OrderProcessingType index.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetByOrderProcessingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_OrderProcessingType index.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderProcessingType} of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OrderProcessingType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	public virtualmethod that Inserts a OrderProcessingType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderProcessingType object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderProcessingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderProcessingType entity = new OrderProcessingType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderProcessingTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderProcessingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderProcessingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderProcessingType.
             <code><![CDATA[
             TList<OrderProcessingType> list = new TList<OrderProcessingType>();
             OrderProcessingType entity = new OrderProcessingType();
             entity.StringProperty = "foo";
             OrderProcessingType entity2 = new OrderProcessingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderProcessingTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	public virtualmethod that Updates a OrderProcessingType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderProcessingType object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderProcessingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderProcessingType entity = OrderProcessingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderProcessingTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderProcessingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderProcessingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderProcessingType.
             <code><![CDATA[
             TList<OrderProcessingType> list = new TList<OrderProcessingType>();
             OrderProcessingType entity = new OrderProcessingType();
             entity.StringProperty = "foo";
             OrderProcessingType entity2 = new OrderProcessingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderProcessingTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	public virtualmethod that Saves a OrderProcessingType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderProcessingType object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderProcessingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderProcessingType entity = OrderProcessingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderProcessingTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderProcessingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderProcessingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderProcessingType.
             <code><![CDATA[
             TList<OrderProcessingType> list = new TList<OrderProcessingType>();
             OrderProcessingType entity = new OrderProcessingType();
             entity.StringProperty = "foo";
             OrderProcessingType entity2 = new OrderProcessingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderProcessingTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	public virtualmethod that Deletes a OrderProcessingType object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderProcessingType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderProcessingType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderProcessingType entity = OrderProcessingTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderProcessingTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderProcessingType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderProcessingType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderProcessingType.
             <code><![CDATA[
             TList<OrderProcessingType> list = new TList<OrderProcessingType>();
             OrderProcessingType entity = new OrderProcessingType();
             entity.StringProperty = "foo";
             OrderProcessingType entity2 = new OrderProcessingType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderProcessingTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderProcessingTypeID
            </summary>
            <param name="orderProcessingTypeID">OrderProcessingType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoadByOrderProcessingTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderProcessingType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderProcessingType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderProcessingType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderProcessingType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderProcessingType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderProcessingType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderProcessingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderProcessingType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderProcessingType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderProcessingType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderProcessingType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderProcessingTypeService.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AddOnService">
            <summary>
             An component type implementation of the 'ZNodeAddOn' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AddOnServiceBase">
            <summary>
             An object representation of the 'ZNodeAddOn' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AddOn.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.CreateAddOn(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="title"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="displayOrder"></param>
            <param name="displayType"></param>
            <param name="optionalInd"></param>
            <param name="allowBackOrder"></param>
            <param name="inStockMsg"></param>
            <param name="outOfStockMsg"></param>
            <param name="backOrderMsg"></param>
            <param name="promptMsg"></param>
            <param name="trackInventoryInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AddOnKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetByAddOnID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOn index.
            </summary>
            <param name="addOnID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOn index.
            </summary>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AddOn} of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	public virtualmethod that Inserts a AddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOn object to Insert.</param>
            <remarks>After Inserting into the datasource, the AddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AddOn entity = new AddOn();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddOnService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AddOn.
             <code><![CDATA[
             TList<AddOn> list = new TList<AddOn>();
             AddOn entity = new AddOn();
             entity.StringProperty = "foo";
             AddOn entity2 = new AddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Update(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	public virtualmethod that Updates a AddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOn object to Update.</param>
            <remarks>After Updateing into the datasource, the AddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AddOn entity = AddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddOnService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AddOn.
             <code><![CDATA[
             TList<AddOn> list = new TList<AddOn>();
             AddOn entity = new AddOn();
             entity.StringProperty = "foo";
             AddOn entity2 = new AddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Save(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	public virtualmethod that Saves a AddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOn object to Save.</param>
            <remarks>After Saveing into the datasource, the AddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AddOn entity = AddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AddOnService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AddOn.
             <code><![CDATA[
             TList<AddOn> list = new TList<AddOn>();
             AddOn entity = new AddOn();
             entity.StringProperty = "foo";
             AddOn entity2 = new AddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	public virtualmethod that Deletes a AddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOn object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AddOn entity = AddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddOnService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AddOn.
             <code><![CDATA[
             TList<AddOn> list = new TList<AddOn>();
             AddOn entity = new AddOn();
             entity.StringProperty = "foo";
             AddOn entity2 = new AddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AddOnKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 addOnID
            </summary>
            <param name="addOnID">AddOn pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoadByAddOnID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="addOnID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddOn Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AddOn Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AddOn Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddOn Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AddOn Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AddOn,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AddOn object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AddOn Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AddOn</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AddOn} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AddOn Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AddOnServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnService.#ctor">
            <summary>
            Initializes a new instance of the AddOnService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ActivityLogTypeService">
            <summary>
             An component type implementation of the 'ZNodeActivityLogType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeActivityLogType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ActivityLogType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.CreateActivityLogType(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> instance.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="name"></param>
            <param name="typeCategory"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ActivityLogTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByActivityLogTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ActivityTypeID index.
            </summary>
            <param name="activityLogTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ActivityTypeID index.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByTypeCategory(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_TypeCategory index.
            </summary>
            <param name="typeCategory"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetByTypeCategory(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_TypeCategory index.
            </summary>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ActivityLogType} of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ActivityLogType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	public virtualmethod that Inserts a ActivityLogType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLogType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ActivityLogType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ActivityLogType entity = new ActivityLogType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ActivityLogTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLogType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ActivityLogType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ActivityLogType.
             <code><![CDATA[
             TList<ActivityLogType> list = new TList<ActivityLogType>();
             ActivityLogType entity = new ActivityLogType();
             entity.StringProperty = "foo";
             ActivityLogType entity2 = new ActivityLogType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	public virtualmethod that Updates a ActivityLogType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLogType object to Update.</param>
            <remarks>After Updateing into the datasource, the ActivityLogType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ActivityLogType entity = ActivityLogTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ActivityLogTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLogType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ActivityLogType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ActivityLogType.
             <code><![CDATA[
             TList<ActivityLogType> list = new TList<ActivityLogType>();
             ActivityLogType entity = new ActivityLogType();
             entity.StringProperty = "foo";
             ActivityLogType entity2 = new ActivityLogType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	public virtualmethod that Saves a ActivityLogType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLogType object to Save.</param>
            <remarks>After Saveing into the datasource, the ActivityLogType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ActivityLogType entity = ActivityLogTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ActivityLogTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLogType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ActivityLogType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ActivityLogType.
             <code><![CDATA[
             TList<ActivityLogType> list = new TList<ActivityLogType>();
             ActivityLogType entity = new ActivityLogType();
             entity.StringProperty = "foo";
             ActivityLogType entity2 = new ActivityLogType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	public virtualmethod that Deletes a ActivityLogType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLogType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ActivityLogType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ActivityLogType entity = ActivityLogTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ActivityLogTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLogType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ActivityLogType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ActivityLogType.
             <code><![CDATA[
             TList<ActivityLogType> list = new TList<ActivityLogType>();
             ActivityLogType entity = new ActivityLogType();
             entity.StringProperty = "foo";
             ActivityLogType entity2 = new ActivityLogType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ActivityLogTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 activityLogTypeID
            </summary>
            <param name="activityLogTypeID">ActivityLogType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoadByActivityLogTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLogType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoadByName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLogType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoadByTypeCategory(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="typeCategory"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLogType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ActivityLogType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ActivityLogType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLogType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLogType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ActivityLogType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ActivityLogType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ActivityLogType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ActivityLogType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ActivityLogType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ActivityLogType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ActivityLogType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ActivityLogTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogTypeService.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase">
            <summary>
             An object representation of the 'ZNodeCaseRequest' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CaseRequest.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.CreateCaseRequest(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="accountID"></param>
            <param name="ownerAccountID"></param>
            <param name="caseStatusID"></param>
            <param name="casePriorityID"></param>
            <param name="caseTypeID"></param>
            <param name="caseOrigin"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="emailID"></param>
            <param name="phoneNumber"></param>
            <param name="createDte"></param>
            <param name="createUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="caseTypeID"></param>
            <returns>Returns a generic collection of CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByPortalID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCasePriorityID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="casePriorityID"></param>
            <returns>Returns a generic collection of CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCasePriorityID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CaseRequestKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByOwnerAccountID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="ownerAccountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByOwnerAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX2 index.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX2 index.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseStatusID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX3 index.
            </summary>
            <param name="caseStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX3 index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX4 index.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX4 index.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Case index.
            </summary>
            <param name="caseID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetByCaseID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Case index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CaseRequest} of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CaseRequest</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	public virtualmethod that Inserts a CaseRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseRequest object to Insert.</param>
            <remarks>After Inserting into the datasource, the CaseRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CaseRequest entity = new CaseRequest();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CaseRequestService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseRequest</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CaseRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CaseRequest.
             <code><![CDATA[
             TList<CaseRequest> list = new TList<CaseRequest>();
             CaseRequest entity = new CaseRequest();
             entity.StringProperty = "foo";
             CaseRequest entity2 = new CaseRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseRequestService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Update(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	public virtualmethod that Updates a CaseRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseRequest object to Update.</param>
            <remarks>After Updateing into the datasource, the CaseRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CaseRequest entity = CaseRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CaseRequestService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseRequest</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CaseRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CaseRequest.
             <code><![CDATA[
             TList<CaseRequest> list = new TList<CaseRequest>();
             CaseRequest entity = new CaseRequest();
             entity.StringProperty = "foo";
             CaseRequest entity2 = new CaseRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseRequestService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Save(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	public virtualmethod that Saves a CaseRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseRequest object to Save.</param>
            <remarks>After Saveing into the datasource, the CaseRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CaseRequest entity = CaseRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CaseRequestService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseRequest</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CaseRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CaseRequest.
             <code><![CDATA[
             TList<CaseRequest> list = new TList<CaseRequest>();
             CaseRequest entity = new CaseRequest();
             entity.StringProperty = "foo";
             CaseRequest entity2 = new CaseRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseRequestService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	public virtualmethod that Deletes a CaseRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseRequest object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CaseRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CaseRequest entity = CaseRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CaseRequestService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseRequest</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CaseRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CaseRequest.
             <code><![CDATA[
             TList<CaseRequest> list = new TList<CaseRequest>();
             CaseRequest entity = new CaseRequest();
             entity.StringProperty = "foo";
             CaseRequest entity2 = new CaseRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseRequestService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 caseID
            </summary>
            <param name="caseID">CaseRequest pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoadByOwnerAccountID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="ownerAccountID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoadByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoadByCaseStatusID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="caseStatusID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoadByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoadByCaseID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="caseID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CaseRequest Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CaseRequest Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CaseRequest Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseRequest,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CaseRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CaseRequest Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CaseRequest</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CaseRequest} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CaseRequest Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CaseRequestServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseStatusService">
            <summary>
             An component type implementation of the 'ZNodeCaseStatus' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseStatusService.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StoreService">
            <summary>
             An component type implementation of the 'ZNodeStore' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StoreServiceBase">
            <summary>
             An object representation of the 'ZNodeStore' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Store.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.CreateStore(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> instance.
            </summary>
            <param name="name"></param>
            <param name="address1"></param>
            <param name="address2"></param>
            <param name="address3"></param>
            <param name="city"></param>
            <param name="state"></param>
            <param name="zip"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="contactName"></param>
            <param name="accountID"></param>
            <param name="displayOrder"></param>
            <param name="imageFile"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Get(ZNode.Libraries.DataAccess.Entities.StoreKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetByStoreID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Store index.
            </summary>
            <param name="storeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetByStoreID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Store index.
            </summary>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Store} of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	public virtualmethod that Inserts a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Insert.</param>
            <remarks>After Inserting into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Store entity = new Store();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StoreService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	public virtualmethod that Updates a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Update.</param>
            <remarks>After Updateing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StoreService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	public virtualmethod that Saves a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Save.</param>
            <remarks>After Saveing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StoreService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	public virtualmethod that Deletes a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StoreService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.StoreKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 storeID
            </summary>
            <param name="storeID">Store pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoadByStoreID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="storeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Store Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Store Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Store Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Store,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Store object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Store Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Store</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Store} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.StoreServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StoreService.#ctor">
            <summary>
            Initializes a new instance of the StoreService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.UrlRedirectService">
            <summary>
             An component type implementation of the 'ZNodeUrlRedirect' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase">
            <summary>
             An object representation of the 'ZNodeUrlRedirect' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UrlRedirect.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.CreateUrlRedirect(System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> instance.
            </summary>
            <param name="oldUrl"></param>
            <param name="newUrl"></param>
            <param name="isActive"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Get(ZNode.Libraries.DataAccess.Entities.UrlRedirectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetByUrlRedirectID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeUrlRedirect index.
            </summary>
            <param name="urlRedirectID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetByUrlRedirectID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeUrlRedirect index.
            </summary>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UrlRedirect} of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UrlRedirect</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	public virtualmethod that Inserts a UrlRedirect object into the datasource using a transaction.
            </summary>
            <param name="entity">UrlRedirect object to Insert.</param>
            <remarks>After Inserting into the datasource, the UrlRedirect object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UrlRedirect entity = new UrlRedirect();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UrlRedirectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UrlRedirect</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UrlRedirect</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UrlRedirect.
             <code><![CDATA[
             TList<UrlRedirect> list = new TList<UrlRedirect>();
             UrlRedirect entity = new UrlRedirect();
             entity.StringProperty = "foo";
             UrlRedirect entity2 = new UrlRedirect();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UrlRedirectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Update(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	public virtualmethod that Updates a UrlRedirect object into the datasource using a transaction.
            </summary>
            <param name="entity">UrlRedirect object to Update.</param>
            <remarks>After Updateing into the datasource, the UrlRedirect object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UrlRedirect entity = UrlRedirectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UrlRedirectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UrlRedirect</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UrlRedirect</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UrlRedirect.
             <code><![CDATA[
             TList<UrlRedirect> list = new TList<UrlRedirect>();
             UrlRedirect entity = new UrlRedirect();
             entity.StringProperty = "foo";
             UrlRedirect entity2 = new UrlRedirect();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UrlRedirectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Save(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	public virtualmethod that Saves a UrlRedirect object into the datasource using a transaction.
            </summary>
            <param name="entity">UrlRedirect object to Save.</param>
            <remarks>After Saveing into the datasource, the UrlRedirect object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UrlRedirect entity = UrlRedirectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UrlRedirectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UrlRedirect</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UrlRedirect</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UrlRedirect.
             <code><![CDATA[
             TList<UrlRedirect> list = new TList<UrlRedirect>();
             UrlRedirect entity = new UrlRedirect();
             entity.StringProperty = "foo";
             UrlRedirect entity2 = new UrlRedirect();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UrlRedirectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	public virtualmethod that Deletes a UrlRedirect object into the datasource using a transaction.
            </summary>
            <param name="entity">UrlRedirect object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UrlRedirect object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UrlRedirect entity = UrlRedirectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UrlRedirectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UrlRedirect</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UrlRedirect</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UrlRedirect.
             <code><![CDATA[
             TList<UrlRedirect> list = new TList<UrlRedirect>();
             UrlRedirect entity = new UrlRedirect();
             entity.StringProperty = "foo";
             UrlRedirect entity2 = new UrlRedirect();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UrlRedirectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.UrlRedirectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 urlRedirectID
            </summary>
            <param name="urlRedirectID">UrlRedirect pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoadByUrlRedirectID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="urlRedirectID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UrlRedirect Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UrlRedirect Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UrlRedirect Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UrlRedirect Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.UrlRedirect)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UrlRedirect Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.UrlRedirect,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UrlRedirect object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UrlRedirect Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UrlRedirect</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UrlRedirect} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UrlRedirect Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.UrlRedirectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.UrlRedirectService.#ctor">
            <summary>
            Initializes a new instance of the UrlRedirectService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountServiceBase">
            <summary>
             An object representation of the 'ZNodeAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Account.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.CreateAccount(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> instance.
            </summary>
            <param name="parentAccountID"></param>
            <param name="portalID"></param>
            <param name="userID"></param>
            <param name="externalAccountNo"></param>
            <param name="companyName"></param>
            <param name="accountTypeID"></param>
            <param name="profileID"></param>
            <param name="accountProfileCode"></param>
            <param name="subAccountLimit"></param>
            <param name="billingFirstName"></param>
            <param name="billingLastName"></param>
            <param name="billingCompanyName"></param>
            <param name="billingStreet"></param>
            <param name="billingStreet1"></param>
            <param name="billingCity"></param>
            <param name="billingStateCode"></param>
            <param name="billingPostalCode"></param>
            <param name="billingCountryCode"></param>
            <param name="billingPhoneNumber"></param>
            <param name="billingEmailID"></param>
            <param name="shipFirstName"></param>
            <param name="shipLastName"></param>
            <param name="shipCompanyName"></param>
            <param name="shipStreet"></param>
            <param name="shipStreet1"></param>
            <param name="shipCity"></param>
            <param name="shipStateCode"></param>
            <param name="shipPostalCode"></param>
            <param name="shipCountryCode"></param>
            <param name="shipEmailID"></param>
            <param name="shipPhoneNumber"></param>
            <param name="description"></param>
            <param name="createUser"></param>
            <param name="createDte"></param>
            <param name="updateUser"></param>
            <param name="updateDte"></param>
            <param name="activeInd"></param>
            <param name="website"></param>
            <param name="source"></param>
            <param name="referralAccountID"></param>
            <param name="referralStatus"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="emailOptIn"></param>
            <param name="webServiceDownloadDte"></param>
            <param name="referralCommission"></param>
            <param name="referralCommissionTypeID"></param>
            <param name="taxID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByParentAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="parentAccountID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByParentAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="parentAccountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByAccountTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="accountTypeID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByAccountTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="profileID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByReferralAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByReferralCommissionTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="referralCommissionTypeID"></param>
            <returns>Returns a generic collection of Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByReferralCommissionTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByUserID(System.Nullable{System.Guid})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_UserID index.
            </summary>
            <param name="userID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByUserID(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_UserID index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByCompanyName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="companyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByCompanyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByAccountID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="accountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Account} of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	public virtualmethod that Inserts a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Insert.</param>
            <remarks>After Inserting into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Account entity = new Account();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	public virtualmethod that Updates a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Update.</param>
            <remarks>After Updateing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	public virtualmethod that Saves a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Save.</param>
            <remarks>After Saveing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	public virtualmethod that Deletes a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 accountID
            </summary>
            <param name="accountID">Account pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoadByUserID(System.Nullable{System.Guid},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="userID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoadByCompanyName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="companyName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoadByAccountID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="accountID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Account Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Account Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Account Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Account,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Account Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Account</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Account} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IProcessor.ChangeProcessorState(ZNode.Libraries.DataAccess.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProcessorBase.ChangeProcessorState(ZNode.Libraries.DataAccess.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProcessorBase.OnNotifyProcessorStateChanging(ZNode.Libraries.DataAccess.Service.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Service.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase">
            <summary>
             An object representation of the 'ZNodeProductTier' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductTier.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.CreateProductTier(System.Int32,System.Nullable{System.Int32},System.Int32,System.Int32,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="profileID"></param>
            <param name="tierStart"></param>
            <param name="tierEnd"></param>
            <param name="price"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductTierKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetByProductTierID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductTier index.
            </summary>
            <param name="productTierID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetByProductTierID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductTier index.
            </summary>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductTier} of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductTier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	public virtualmethod that Inserts a ProductTier object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTier object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductTier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductTier entity = new ProductTier();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductTierService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductTier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductTier.
             <code><![CDATA[
             TList<ProductTier> list = new TList<ProductTier>();
             ProductTier entity = new ProductTier();
             entity.StringProperty = "foo";
             ProductTier entity2 = new ProductTier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTierService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	public virtualmethod that Updates a ProductTier object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTier object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductTier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductTier entity = ProductTierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductTierService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductTier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductTier.
             <code><![CDATA[
             TList<ProductTier> list = new TList<ProductTier>();
             ProductTier entity = new ProductTier();
             entity.StringProperty = "foo";
             ProductTier entity2 = new ProductTier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTierService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	public virtualmethod that Saves a ProductTier object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTier object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductTier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductTier entity = ProductTierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductTierService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductTier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductTier.
             <code><![CDATA[
             TList<ProductTier> list = new TList<ProductTier>();
             ProductTier entity = new ProductTier();
             entity.StringProperty = "foo";
             ProductTier entity2 = new ProductTier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTierService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	public virtualmethod that Deletes a ProductTier object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductTier object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductTier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductTier entity = ProductTierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductTierService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductTier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductTier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductTier.
             <code><![CDATA[
             TList<ProductTier> list = new TList<ProductTier>();
             ProductTier entity = new ProductTier();
             entity.StringProperty = "foo";
             ProductTier entity2 = new ProductTier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductTierService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductTierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productTierID
            </summary>
            <param name="productTierID">ProductTier pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoadByProductTierID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productTierID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductTier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductTier Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductTier Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductTier Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductTier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductTier Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductTier,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductTier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductTier Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductTier</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductTier} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductTier Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductTierServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeAttributeType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AttributeType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.CreateAttributeType(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> instance.
            </summary>
            <param name="portalId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="displayOrder"></param>
            <param name="isPrivate"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AttributeTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetByAttributeTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_AttributeType index.
            </summary>
            <param name="attributeTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_AttributeType index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AttributeType} of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AttributeType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	public virtualmethod that Inserts a AttributeType object into the datasource using a transaction.
            </summary>
            <param name="entity">AttributeType object to Insert.</param>
            <remarks>After Inserting into the datasource, the AttributeType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AttributeType entity = new AttributeType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AttributeTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttributeType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AttributeType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AttributeType.
             <code><![CDATA[
             TList<AttributeType> list = new TList<AttributeType>();
             AttributeType entity = new AttributeType();
             entity.StringProperty = "foo";
             AttributeType entity2 = new AttributeType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttributeTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	public virtualmethod that Updates a AttributeType object into the datasource using a transaction.
            </summary>
            <param name="entity">AttributeType object to Update.</param>
            <remarks>After Updateing into the datasource, the AttributeType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AttributeType entity = AttributeTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AttributeTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttributeType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AttributeType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AttributeType.
             <code><![CDATA[
             TList<AttributeType> list = new TList<AttributeType>();
             AttributeType entity = new AttributeType();
             entity.StringProperty = "foo";
             AttributeType entity2 = new AttributeType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttributeTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	public virtualmethod that Saves a AttributeType object into the datasource using a transaction.
            </summary>
            <param name="entity">AttributeType object to Save.</param>
            <remarks>After Saveing into the datasource, the AttributeType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AttributeType entity = AttributeTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AttributeTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttributeType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AttributeType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AttributeType.
             <code><![CDATA[
             TList<AttributeType> list = new TList<AttributeType>();
             AttributeType entity = new AttributeType();
             entity.StringProperty = "foo";
             AttributeType entity2 = new AttributeType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttributeTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	public virtualmethod that Deletes a AttributeType object into the datasource using a transaction.
            </summary>
            <param name="entity">AttributeType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AttributeType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AttributeType entity = AttributeTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AttributeTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AttributeType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AttributeType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AttributeType.
             <code><![CDATA[
             TList<AttributeType> list = new TList<AttributeType>();
             AttributeType entity = new AttributeType();
             entity.StringProperty = "foo";
             AttributeType entity2 = new AttributeType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AttributeTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AttributeTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 attributeTypeId
            </summary>
            <param name="attributeTypeId">AttributeType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoadByAttributeTypeId(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttributeType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AttributeType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AttributeType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AttributeType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AttributeType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AttributeType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AttributeType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AttributeType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AttributeType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AttributeType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AttributeType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AttributeType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AttributeTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.WishListServiceBase">
            <summary>
             An object representation of the 'ZNodeWishList' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WishList.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.CreateWishList(System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> instance.
            </summary>
            <param name="accountID"></param>
            <param name="productID"></param>
            <param name="createDte"></param>
            <param name="custom"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByAccountID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Get(ZNode.Libraries.DataAccess.Entities.WishListKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByWishListID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeWishList index.
            </summary>
            <param name="wishListID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetByWishListID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeWishList index.
            </summary>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{WishList} of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WishList</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	public virtualmethod that Inserts a WishList object into the datasource using a transaction.
            </summary>
            <param name="entity">WishList object to Insert.</param>
            <remarks>After Inserting into the datasource, the WishList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WishList entity = new WishList();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WishListService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WishList</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WishList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WishList.
             <code><![CDATA[
             TList<WishList> list = new TList<WishList>();
             WishList entity = new WishList();
             entity.StringProperty = "foo";
             WishList entity2 = new WishList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WishListService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Update(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	public virtualmethod that Updates a WishList object into the datasource using a transaction.
            </summary>
            <param name="entity">WishList object to Update.</param>
            <remarks>After Updateing into the datasource, the WishList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WishList entity = WishListService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WishListService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WishList</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WishList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WishList.
             <code><![CDATA[
             TList<WishList> list = new TList<WishList>();
             WishList entity = new WishList();
             entity.StringProperty = "foo";
             WishList entity2 = new WishList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WishListService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Save(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	public virtualmethod that Saves a WishList object into the datasource using a transaction.
            </summary>
            <param name="entity">WishList object to Save.</param>
            <remarks>After Saveing into the datasource, the WishList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            WishList entity = WishListService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WishListService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WishList</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>WishList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of WishList.
             <code><![CDATA[
             TList<WishList> list = new TList<WishList>();
             WishList entity = new WishList();
             entity.StringProperty = "foo";
             WishList entity2 = new WishList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WishListService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	public virtualmethod that Deletes a WishList object into the datasource using a transaction.
            </summary>
            <param name="entity">WishList object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WishList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WishList entity = WishListService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WishListService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WishList</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WishList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WishList.
             <code><![CDATA[
             TList<WishList> list = new TList<WishList>();
             WishList entity = new WishList();
             entity.StringProperty = "foo";
             WishList entity2 = new WishList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WishListService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.WishListKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 wishListID
            </summary>
            <param name="wishListID">WishList pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoadByWishListID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="wishListID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WishList Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">WishList Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">WishList Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WishList Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.WishList)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">WishList Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.WishList,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the WishList object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">WishList Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>WishList</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{WishList} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">WishList Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.WishListServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase">
            <summary>
             An object representation of the 'ZNodeShippingRule' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShippingRule.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.CreateShippingRule(System.Int32,System.Int32,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> instance.
            </summary>
            <param name="shippingID"></param>
            <param name="shippingRuleTypeID"></param>
            <param name="className"></param>
            <param name="lowerLimit"></param>
            <param name="upperLimit"></param>
            <param name="baseCost"></param>
            <param name="perItemCost"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingRuleTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a generic collection of ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ShippingRuleKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="shippingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingRuleID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingRule index.
            </summary>
            <param name="shippingRuleID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetByShippingRuleID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ShippingRule index.
            </summary>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShippingRule} of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShippingRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	public virtualmethod that Inserts a ShippingRule object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRule object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShippingRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShippingRule entity = new ShippingRule();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShippingRuleService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShippingRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShippingRule.
             <code><![CDATA[
             TList<ShippingRule> list = new TList<ShippingRule>();
             ShippingRule entity = new ShippingRule();
             entity.StringProperty = "foo";
             ShippingRule entity2 = new ShippingRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	public virtualmethod that Updates a ShippingRule object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRule object to Update.</param>
            <remarks>After Updateing into the datasource, the ShippingRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShippingRule entity = ShippingRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShippingRuleService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShippingRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShippingRule.
             <code><![CDATA[
             TList<ShippingRule> list = new TList<ShippingRule>();
             ShippingRule entity = new ShippingRule();
             entity.StringProperty = "foo";
             ShippingRule entity2 = new ShippingRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	public virtualmethod that Saves a ShippingRule object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRule object to Save.</param>
            <remarks>After Saveing into the datasource, the ShippingRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShippingRule entity = ShippingRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShippingRuleService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShippingRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShippingRule.
             <code><![CDATA[
             TList<ShippingRule> list = new TList<ShippingRule>();
             ShippingRule entity = new ShippingRule();
             entity.StringProperty = "foo";
             ShippingRule entity2 = new ShippingRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	public virtualmethod that Deletes a ShippingRule object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingRule object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShippingRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShippingRule entity = ShippingRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShippingRuleService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShippingRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShippingRule.
             <code><![CDATA[
             TList<ShippingRule> list = new TList<ShippingRule>();
             ShippingRule entity = new ShippingRule();
             entity.StringProperty = "foo";
             ShippingRule entity2 = new ShippingRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingRuleService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingRuleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 shippingRuleID
            </summary>
            <param name="shippingRuleID">ShippingRule pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoadByShippingID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingRule Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoadByShippingRuleID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingRuleID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingRule Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShippingRule Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShippingRule Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingRule Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShippingRule Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingRule,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShippingRule object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShippingRule Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShippingRule</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShippingRule} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShippingRule Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ShippingRuleServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeCurrencyType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CurrencyType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.CreateCurrencyType(System.Int32,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> instance.
            </summary>
            <param name="currencyTypeID"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="currencySuffix"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CurrencyTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetByCurrencyTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeCurrencyType index.
            </summary>
            <param name="currencyTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetByCurrencyTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeCurrencyType index.
            </summary>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CurrencyType} of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CurrencyType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	public virtualmethod that Inserts a CurrencyType object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyType object to Insert.</param>
            <remarks>After Inserting into the datasource, the CurrencyType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CurrencyType entity = new CurrencyType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CurrencyTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CurrencyType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CurrencyType.
             <code><![CDATA[
             TList<CurrencyType> list = new TList<CurrencyType>();
             CurrencyType entity = new CurrencyType();
             entity.StringProperty = "foo";
             CurrencyType entity2 = new CurrencyType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	public virtualmethod that Updates a CurrencyType object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyType object to Update.</param>
            <remarks>After Updateing into the datasource, the CurrencyType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CurrencyType entity = CurrencyTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CurrencyTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CurrencyType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CurrencyType.
             <code><![CDATA[
             TList<CurrencyType> list = new TList<CurrencyType>();
             CurrencyType entity = new CurrencyType();
             entity.StringProperty = "foo";
             CurrencyType entity2 = new CurrencyType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	public virtualmethod that Saves a CurrencyType object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyType object to Save.</param>
            <remarks>After Saveing into the datasource, the CurrencyType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CurrencyType entity = CurrencyTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CurrencyTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CurrencyType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CurrencyType.
             <code><![CDATA[
             TList<CurrencyType> list = new TList<CurrencyType>();
             CurrencyType entity = new CurrencyType();
             entity.StringProperty = "foo";
             CurrencyType entity2 = new CurrencyType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	public virtualmethod that Deletes a CurrencyType object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CurrencyType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CurrencyType entity = CurrencyTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CurrencyTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CurrencyType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CurrencyType.
             <code><![CDATA[
             TList<CurrencyType> list = new TList<CurrencyType>();
             CurrencyType entity = new CurrencyType();
             entity.StringProperty = "foo";
             CurrencyType entity2 = new CurrencyType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CurrencyTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 currencyTypeID
            </summary>
            <param name="currencyTypeID">CurrencyType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoadByCurrencyTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="currencyTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CurrencyType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CurrencyType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CurrencyType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CurrencyType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CurrencyType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CurrencyType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CurrencyType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CurrencyType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CurrencyType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CurrencyType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CurrencyType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CurrencyType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CurrencyTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ManufacturerService">
            <summary>
             An component type implementation of the 'ZNodeManufacturer' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase">
            <summary>
             An object representation of the 'ZNodeManufacturer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Manufacturer.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.CreateManufacturer(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="websiteLink"></param>
            <param name="emailID"></param>
            <param name="isDropShipper"></param>
            <param name="emailNotificationTemplate"></param>
            <param name="displayOrder"></param>
            <param name="activeInd"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ManufacturerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetByManufacturerID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Manufacturer index.
            </summary>
            <param name="manufacturerID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetByManufacturerID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Manufacturer index.
            </summary>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Manufacturer} of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Manufacturer</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	public virtualmethod that Inserts a Manufacturer object into the datasource using a transaction.
            </summary>
            <param name="entity">Manufacturer object to Insert.</param>
            <remarks>After Inserting into the datasource, the Manufacturer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Manufacturer entity = new Manufacturer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ManufacturerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Manufacturer</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Manufacturer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Manufacturer.
             <code><![CDATA[
             TList<Manufacturer> list = new TList<Manufacturer>();
             Manufacturer entity = new Manufacturer();
             entity.StringProperty = "foo";
             Manufacturer entity2 = new Manufacturer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ManufacturerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	public virtualmethod that Updates a Manufacturer object into the datasource using a transaction.
            </summary>
            <param name="entity">Manufacturer object to Update.</param>
            <remarks>After Updateing into the datasource, the Manufacturer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Manufacturer entity = ManufacturerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ManufacturerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Manufacturer</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Manufacturer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Manufacturer.
             <code><![CDATA[
             TList<Manufacturer> list = new TList<Manufacturer>();
             Manufacturer entity = new Manufacturer();
             entity.StringProperty = "foo";
             Manufacturer entity2 = new Manufacturer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ManufacturerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	public virtualmethod that Saves a Manufacturer object into the datasource using a transaction.
            </summary>
            <param name="entity">Manufacturer object to Save.</param>
            <remarks>After Saveing into the datasource, the Manufacturer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Manufacturer entity = ManufacturerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ManufacturerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Manufacturer</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Manufacturer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Manufacturer.
             <code><![CDATA[
             TList<Manufacturer> list = new TList<Manufacturer>();
             Manufacturer entity = new Manufacturer();
             entity.StringProperty = "foo";
             Manufacturer entity2 = new Manufacturer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ManufacturerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	public virtualmethod that Deletes a Manufacturer object into the datasource using a transaction.
            </summary>
            <param name="entity">Manufacturer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Manufacturer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Manufacturer entity = ManufacturerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ManufacturerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Manufacturer</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Manufacturer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Manufacturer.
             <code><![CDATA[
             TList<Manufacturer> list = new TList<Manufacturer>();
             Manufacturer entity = new Manufacturer();
             entity.StringProperty = "foo";
             Manufacturer entity2 = new Manufacturer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ManufacturerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ManufacturerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 manufacturerID
            </summary>
            <param name="manufacturerID">Manufacturer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoadByManufacturerID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="manufacturerID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Manufacturer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Manufacturer Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Manufacturer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Manufacturer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Manufacturer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Manufacturer Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Manufacturer,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Manufacturer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Manufacturer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Manufacturer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Manufacturer} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Manufacturer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ManufacturerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ManufacturerService.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeReferralCommissionType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReferralCommissionType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.CreateReferralCommissionType(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> instance.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ReferralCommissionTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetByReferralCommissionTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetByReferralCommissionTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ReferralCommissionType} of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ReferralCommissionType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	public virtualmethod that Inserts a ReferralCommissionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferralCommissionType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReferralCommissionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReferralCommissionType entity = new ReferralCommissionType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferralCommissionTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferralCommissionType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReferralCommissionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReferralCommissionType.
             <code><![CDATA[
             TList<ReferralCommissionType> list = new TList<ReferralCommissionType>();
             ReferralCommissionType entity = new ReferralCommissionType();
             entity.StringProperty = "foo";
             ReferralCommissionType entity2 = new ReferralCommissionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralCommissionTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	public virtualmethod that Updates a ReferralCommissionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferralCommissionType object to Update.</param>
            <remarks>After Updateing into the datasource, the ReferralCommissionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReferralCommissionType entity = ReferralCommissionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferralCommissionTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferralCommissionType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReferralCommissionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReferralCommissionType.
             <code><![CDATA[
             TList<ReferralCommissionType> list = new TList<ReferralCommissionType>();
             ReferralCommissionType entity = new ReferralCommissionType();
             entity.StringProperty = "foo";
             ReferralCommissionType entity2 = new ReferralCommissionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralCommissionTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	public virtualmethod that Saves a ReferralCommissionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferralCommissionType object to Save.</param>
            <remarks>After Saveing into the datasource, the ReferralCommissionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ReferralCommissionType entity = ReferralCommissionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReferralCommissionTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferralCommissionType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ReferralCommissionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ReferralCommissionType.
             <code><![CDATA[
             TList<ReferralCommissionType> list = new TList<ReferralCommissionType>();
             ReferralCommissionType entity = new ReferralCommissionType();
             entity.StringProperty = "foo";
             ReferralCommissionType entity2 = new ReferralCommissionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralCommissionTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	public virtualmethod that Deletes a ReferralCommissionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferralCommissionType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReferralCommissionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReferralCommissionType entity = ReferralCommissionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferralCommissionTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferralCommissionType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReferralCommissionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReferralCommissionType.
             <code><![CDATA[
             TList<ReferralCommissionType> list = new TList<ReferralCommissionType>();
             ReferralCommissionType entity = new ReferralCommissionType();
             entity.StringProperty = "foo";
             ReferralCommissionType entity2 = new ReferralCommissionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralCommissionTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ReferralCommissionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 referralCommissionTypeID
            </summary>
            <param name="referralCommissionTypeID">ReferralCommissionType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoadByReferralCommissionTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ReferralCommissionType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ReferralCommissionType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ReferralCommissionType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ReferralCommissionType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ReferralCommissionType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ReferralCommissionType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ReferralCommissionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ReferralCommissionType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ReferralCommissionType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ReferralCommissionType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ReferralCommissionType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.NoteService">
            <summary>
             An component type implementation of the 'ZNodeNote' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.NoteServiceBase">
            <summary>
             An object representation of the 'ZNodeNote' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Note.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.CreateNote(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> instance.
            </summary>
            <param name="caseID"></param>
            <param name="accountID"></param>
            <param name="noteTitle"></param>
            <param name="noteBody"></param>
            <param name="createDte"></param>
            <param name="createUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Get(ZNode.Libraries.DataAccess.Entities.NoteKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByCaseID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IN1 index.
            </summary>
            <param name="caseID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByCaseID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IN1 index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByNoteID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_AccountNote index.
            </summary>
            <param name="noteID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetByNoteID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_AccountNote index.
            </summary>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Note} of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Note</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	public virtualmethod that Inserts a Note object into the datasource using a transaction.
            </summary>
            <param name="entity">Note object to Insert.</param>
            <remarks>After Inserting into the datasource, the Note object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Note entity = new Note();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NoteService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Note</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Note</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Note.
             <code><![CDATA[
             TList<Note> list = new TList<Note>();
             Note entity = new Note();
             entity.StringProperty = "foo";
             Note entity2 = new Note();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	public virtualmethod that Updates a Note object into the datasource using a transaction.
            </summary>
            <param name="entity">Note object to Update.</param>
            <remarks>After Updateing into the datasource, the Note object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Note entity = NoteService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NoteService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Note</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Note</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Note.
             <code><![CDATA[
             TList<Note> list = new TList<Note>();
             Note entity = new Note();
             entity.StringProperty = "foo";
             Note entity2 = new Note();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	public virtualmethod that Saves a Note object into the datasource using a transaction.
            </summary>
            <param name="entity">Note object to Save.</param>
            <remarks>After Saveing into the datasource, the Note object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Note entity = NoteService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NoteService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Note</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Note</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Note.
             <code><![CDATA[
             TList<Note> list = new TList<Note>();
             Note entity = new Note();
             entity.StringProperty = "foo";
             Note entity2 = new Note();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	public virtualmethod that Deletes a Note object into the datasource using a transaction.
            </summary>
            <param name="entity">Note object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Note object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Note entity = NoteService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NoteService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Note</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Note</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Note.
             <code><![CDATA[
             TList<Note> list = new TList<Note>();
             Note entity = new Note();
             entity.StringProperty = "foo";
             Note entity2 = new Note();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.NoteKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 noteID
            </summary>
            <param name="noteID">Note pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoadByCaseID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="caseID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Note Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoadByNoteID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="noteID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Note Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Note Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Note Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Note Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Note)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Note Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Note,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Note object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Note Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Note</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Note} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Note Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.NoteServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.NoteService.#ctor">
            <summary>
            Initializes a new instance of the NoteService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase">
            <summary>
             An object representation of the 'ZNodeOrderLineItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderLineItem.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.CreateOrderLineItem(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> instance.
            </summary>
            <param name="orderID"></param>
            <param name="shipmentID"></param>
            <param name="productNum"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="quantity"></param>
            <param name="price"></param>
            <param name="weight"></param>
            <param name="sKU"></param>
            <param name="parentOrderLineItemID"></param>
            <param name="downloadLink"></param>
            <param name="discountAmount"></param>
            <param name="shipDate"></param>
            <param name="returnDate"></param>
            <param name="shippingCost"></param>
            <param name="promoDescription"></param>
            <param name="salesTax"></param>
            <param name="vAT"></param>
            <param name="gST"></param>
            <param name="pST"></param>
            <param name="hST"></param>
            <param name="transactionNumber"></param>
            <param name="paymentStatusID"></param>
            <param name="trackingNumber"></param>
            <param name="autoGeneratedTracking"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByOrderID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="orderID"></param>
            <returns>Returns a generic collection of OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByOrderID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByParentOrderLineItemID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="parentOrderLineItemID"></param>
            <returns>Returns a generic collection of OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByParentOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="parentOrderLineItemID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByPaymentStatusID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns a generic collection of OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Get(ZNode.Libraries.DataAccess.Entities.OrderLineItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByOrderLineItemID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_OrderLineItem_PK index.
            </summary>
            <param name="orderLineItemID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetByOrderLineItemID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_OrderLineItem_PK index.
            </summary>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderLineItem} of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OrderLineItem</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	public virtualmethod that Inserts a OrderLineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderLineItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderLineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderLineItem entity = new OrderLineItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderLineItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderLineItem</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderLineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderLineItem.
             <code><![CDATA[
             TList<OrderLineItem> list = new TList<OrderLineItem>();
             OrderLineItem entity = new OrderLineItem();
             entity.StringProperty = "foo";
             OrderLineItem entity2 = new OrderLineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderLineItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Update(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	public virtualmethod that Updates a OrderLineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderLineItem object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderLineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderLineItem entity = OrderLineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderLineItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderLineItem</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderLineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderLineItem.
             <code><![CDATA[
             TList<OrderLineItem> list = new TList<OrderLineItem>();
             OrderLineItem entity = new OrderLineItem();
             entity.StringProperty = "foo";
             OrderLineItem entity2 = new OrderLineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderLineItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Save(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	public virtualmethod that Saves a OrderLineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderLineItem object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderLineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderLineItem entity = OrderLineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderLineItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderLineItem</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderLineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderLineItem.
             <code><![CDATA[
             TList<OrderLineItem> list = new TList<OrderLineItem>();
             OrderLineItem entity = new OrderLineItem();
             entity.StringProperty = "foo";
             OrderLineItem entity2 = new OrderLineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderLineItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	public virtualmethod that Deletes a OrderLineItem object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderLineItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderLineItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderLineItem entity = OrderLineItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderLineItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderLineItem</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderLineItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderLineItem.
             <code><![CDATA[
             TList<OrderLineItem> list = new TList<OrderLineItem>();
             OrderLineItem entity = new OrderLineItem();
             entity.StringProperty = "foo";
             OrderLineItem entity2 = new OrderLineItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderLineItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderLineItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderLineItemID
            </summary>
            <param name="orderLineItemID">OrderLineItem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoadByOrderLineItemID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="orderLineItemID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderLineItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderLineItem Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderLineItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderLineItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderLineItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderLineItem Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderLineItem,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderLineItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderLineItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderLineItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderLineItem} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderLineItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.OrderLineItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductAttributeService">
            <summary>
             An component type implementation of the 'ZNodeProductAttribute' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase">
            <summary>
             An object representation of the 'ZNodeProductAttribute' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductAttribute.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.CreateProductAttribute(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> instance.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="name"></param>
            <param name="externalId"></param>
            <param name="displayOrder"></param>
            <param name="isActive"></param>
            <param name="oldAttributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductAttributeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetByAttributeTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_1 index.
            </summary>
            <param name="attributeTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_1 index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetByAttributeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Attribute index.
            </summary>
            <param name="attributeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetByAttributeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Attribute index.
            </summary>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductAttribute} of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	public virtualmethod that Inserts a ProductAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAttribute object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductAttribute entity = new ProductAttribute();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductAttributeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductAttribute.
             <code><![CDATA[
             TList<ProductAttribute> list = new TList<ProductAttribute>();
             ProductAttribute entity = new ProductAttribute();
             entity.StringProperty = "foo";
             ProductAttribute entity2 = new ProductAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAttributeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	public virtualmethod that Updates a ProductAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAttribute object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductAttribute entity = ProductAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductAttributeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductAttribute.
             <code><![CDATA[
             TList<ProductAttribute> list = new TList<ProductAttribute>();
             ProductAttribute entity = new ProductAttribute();
             entity.StringProperty = "foo";
             ProductAttribute entity2 = new ProductAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAttributeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	public virtualmethod that Saves a ProductAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAttribute object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductAttribute entity = ProductAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductAttributeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductAttribute.
             <code><![CDATA[
             TList<ProductAttribute> list = new TList<ProductAttribute>();
             ProductAttribute entity = new ProductAttribute();
             entity.StringProperty = "foo";
             ProductAttribute entity2 = new ProductAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAttributeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	public virtualmethod that Deletes a ProductAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAttribute object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductAttribute entity = ProductAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductAttributeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductAttribute.
             <code><![CDATA[
             TList<ProductAttribute> list = new TList<ProductAttribute>();
             ProductAttribute entity = new ProductAttribute();
             entity.StringProperty = "foo";
             ProductAttribute entity2 = new ProductAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAttributeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 attributeId
            </summary>
            <param name="attributeId">ProductAttribute pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoadByAttributeTypeId(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoadByAttributeId(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="attributeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductAttribute Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductAttribute Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductAttribute Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductAttribute Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductAttribute Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductAttribute</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductAttribute} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductAttribute Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductAttributeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAttributeService.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.DigitalAssetService">
            <summary>
             An component type implementation of the 'ZNodeDigitalAsset' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DigitalAssetService.#ctor">
            <summary>
            Initializes a new instance of the DigitalAssetService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ReviewServiceBase">
            <summary>
             An object representation of the 'ZNodeReview' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Review.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.CreateReview(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="accountID"></param>
            <param name="subject"></param>
            <param name="pros"></param>
            <param name="cons"></param>
            <param name="comments"></param>
            <param name="createUser"></param>
            <param name="userLocation"></param>
            <param name="rating"></param>
            <param name="status"></param>
            <param name="createDate"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a generic collection of Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByProductID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ReviewKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByReviewID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Review index.
            </summary>
            <param name="reviewID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetByReviewID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Review index.
            </summary>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Review} of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Review</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	public virtualmethod that Inserts a Review object into the datasource using a transaction.
            </summary>
            <param name="entity">Review object to Insert.</param>
            <remarks>After Inserting into the datasource, the Review object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Review entity = new Review();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReviewService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Review</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Review</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Review.
             <code><![CDATA[
             TList<Review> list = new TList<Review>();
             Review entity = new Review();
             entity.StringProperty = "foo";
             Review entity2 = new Review();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReviewService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	public virtualmethod that Updates a Review object into the datasource using a transaction.
            </summary>
            <param name="entity">Review object to Update.</param>
            <remarks>After Updateing into the datasource, the Review object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Review entity = ReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReviewService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Review</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Review</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Review.
             <code><![CDATA[
             TList<Review> list = new TList<Review>();
             Review entity = new Review();
             entity.StringProperty = "foo";
             Review entity2 = new Review();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReviewService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	public virtualmethod that Saves a Review object into the datasource using a transaction.
            </summary>
            <param name="entity">Review object to Save.</param>
            <remarks>After Saveing into the datasource, the Review object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Review entity = ReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReviewService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Review</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Review</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Review.
             <code><![CDATA[
             TList<Review> list = new TList<Review>();
             Review entity = new Review();
             entity.StringProperty = "foo";
             Review entity2 = new Review();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReviewService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	public virtualmethod that Deletes a Review object into the datasource using a transaction.
            </summary>
            <param name="entity">Review object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Review object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Review entity = ReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReviewService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Review</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Review</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Review.
             <code><![CDATA[
             TList<Review> list = new TList<Review>();
             Review entity = new Review();
             entity.StringProperty = "foo";
             Review entity2 = new Review();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReviewService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ReviewKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 reviewID
            </summary>
            <param name="reviewID">Review pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoadByReviewID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="reviewID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Review Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Review Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Review Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Review Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Review)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Review Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Review,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Review object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Review Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Review</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Review} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Review Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ReviewServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.HighlightService">
            <summary>
             An component type implementation of the 'ZNodeHighlight' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.HighlightServiceBase">
            <summary>
             An object representation of the 'ZNodeHighlight' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Highlight.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.CreateHighlight(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="imageFile"></param>
            <param name="imageAltTag"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="displayPopup"></param>
            <param name="hyperlink"></param>
            <param name="hyperlinkNewWinInd"></param>
            <param name="highlightTypeID"></param>
            <param name="activeInd"></param>
            <param name="displayOrder"></param>
            <param name="shortDescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Get(ZNode.Libraries.DataAccess.Entities.HighlightKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetByHighlightTypeID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_HighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetByHighlightTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_HighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetByHighlightID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetByHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Highlight} of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Highlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	public virtualmethod that Inserts a Highlight object into the datasource using a transaction.
            </summary>
            <param name="entity">Highlight object to Insert.</param>
            <remarks>After Inserting into the datasource, the Highlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Highlight entity = new Highlight();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HighlightService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Highlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Highlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Highlight.
             <code><![CDATA[
             TList<Highlight> list = new TList<Highlight>();
             Highlight entity = new Highlight();
             entity.StringProperty = "foo";
             Highlight entity2 = new Highlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	public virtualmethod that Updates a Highlight object into the datasource using a transaction.
            </summary>
            <param name="entity">Highlight object to Update.</param>
            <remarks>After Updateing into the datasource, the Highlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Highlight entity = HighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HighlightService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Highlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Highlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Highlight.
             <code><![CDATA[
             TList<Highlight> list = new TList<Highlight>();
             Highlight entity = new Highlight();
             entity.StringProperty = "foo";
             Highlight entity2 = new Highlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	public virtualmethod that Saves a Highlight object into the datasource using a transaction.
            </summary>
            <param name="entity">Highlight object to Save.</param>
            <remarks>After Saveing into the datasource, the Highlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Highlight entity = HighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HighlightService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Highlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Highlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Highlight.
             <code><![CDATA[
             TList<Highlight> list = new TList<Highlight>();
             Highlight entity = new Highlight();
             entity.StringProperty = "foo";
             Highlight entity2 = new Highlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	public virtualmethod that Deletes a Highlight object into the datasource using a transaction.
            </summary>
            <param name="entity">Highlight object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Highlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Highlight entity = HighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HighlightService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Highlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Highlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Highlight.
             <code><![CDATA[
             TList<Highlight> list = new TList<Highlight>();
             Highlight entity = new Highlight();
             entity.StringProperty = "foo";
             Highlight entity2 = new Highlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HighlightService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.HighlightKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 highlightID
            </summary>
            <param name="highlightID">Highlight pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoadByHighlightTypeID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Highlight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoadByHighlightID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="highlightID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Highlight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Highlight Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Highlight Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Highlight Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Highlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Highlight Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Highlight,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Highlight object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Highlight Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Highlight</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Highlight} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Highlight Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.HighlightServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.HighlightService.#ctor">
            <summary>
            Initializes a new instance of the HighlightService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase">
            <summary>
             An object representation of the 'ZNodeProductCategory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductCategory.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.CreateProductCategory(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="categoryID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByCategoryID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="categoryID"></param>
            <returns>Returns a generic collection of ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductCategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByProductCategoryID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCategory index.
            </summary>
            <param name="productCategoryID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetByProductCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCategory index.
            </summary>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductCategory} of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	public virtualmethod that Inserts a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductCategory entity = new ProductCategory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductCategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	public virtualmethod that Updates a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductCategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	public virtualmethod that Saves a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductCategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	public virtualmethod that Deletes a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductCategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productCategoryID
            </summary>
            <param name="productCategoryID">ProductCategory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoadByProductCategoryID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productCategoryID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductCategory Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductCategory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductCategory Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductCategory,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductCategory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductCategory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductCategory} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductCategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.GatewayService">
            <summary>
             An component type implementation of the 'ZNodeGateway' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.GatewayServiceBase">
            <summary>
             An object representation of the 'ZNodeGateway' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Gateway.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.CreateGateway(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> instance.
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="gatewayName"></param>
            <param name="websiteURL"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Get(ZNode.Libraries.DataAccess.Entities.GatewayKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetByGatewayTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Gateway index.
            </summary>
            <param name="gatewayTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetByGatewayTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Gateway index.
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Gateway} of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Gateway</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	public virtualmethod that Inserts a Gateway object into the datasource using a transaction.
            </summary>
            <param name="entity">Gateway object to Insert.</param>
            <remarks>After Inserting into the datasource, the Gateway object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Gateway entity = new Gateway();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GatewayService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gateway</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Gateway</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Gateway.
             <code><![CDATA[
             TList<Gateway> list = new TList<Gateway>();
             Gateway entity = new Gateway();
             entity.StringProperty = "foo";
             Gateway entity2 = new Gateway();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GatewayService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	public virtualmethod that Updates a Gateway object into the datasource using a transaction.
            </summary>
            <param name="entity">Gateway object to Update.</param>
            <remarks>After Updateing into the datasource, the Gateway object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Gateway entity = GatewayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GatewayService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gateway</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Gateway</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Gateway.
             <code><![CDATA[
             TList<Gateway> list = new TList<Gateway>();
             Gateway entity = new Gateway();
             entity.StringProperty = "foo";
             Gateway entity2 = new Gateway();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GatewayService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	public virtualmethod that Saves a Gateway object into the datasource using a transaction.
            </summary>
            <param name="entity">Gateway object to Save.</param>
            <remarks>After Saveing into the datasource, the Gateway object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Gateway entity = GatewayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GatewayService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gateway</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Gateway</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Gateway.
             <code><![CDATA[
             TList<Gateway> list = new TList<Gateway>();
             Gateway entity = new Gateway();
             entity.StringProperty = "foo";
             Gateway entity2 = new Gateway();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GatewayService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	public virtualmethod that Deletes a Gateway object into the datasource using a transaction.
            </summary>
            <param name="entity">Gateway object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Gateway object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Gateway entity = GatewayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GatewayService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gateway</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Gateway</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Gateway.
             <code><![CDATA[
             TList<Gateway> list = new TList<Gateway>();
             Gateway entity = new Gateway();
             entity.StringProperty = "foo";
             Gateway entity2 = new Gateway();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GatewayService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.GatewayKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 gatewayTypeID
            </summary>
            <param name="gatewayTypeID">Gateway pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoadByGatewayTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Gateway Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Gateway Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Gateway Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Gateway Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Gateway)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Gateway Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Gateway,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Gateway object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Gateway Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Gateway</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Gateway} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Gateway Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.GatewayServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.GatewayService.#ctor">
            <summary>
            Initializes a new instance of the GatewayService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase">
            <summary>
             An object representation of the 'ZNodeContentPageRevision' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ContentPageRevision.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.CreateContentPageRevision(System.Int32,System.DateTime,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> instance.
            </summary>
            <param name="contentPageID"></param>
            <param name="updateDate"></param>
            <param name="updateUser"></param>
            <param name="description"></param>
            <param name="htmlText"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetByContentPageID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="contentPageID"></param>
            <returns>Returns a generic collection of ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetByContentPageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetByRevisionID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePageRevision index.
            </summary>
            <param name="revisionID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetByRevisionID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePageRevision index.
            </summary>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ContentPageRevision} of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContentPageRevision</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	public virtualmethod that Inserts a ContentPageRevision object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPageRevision object to Insert.</param>
            <remarks>After Inserting into the datasource, the ContentPageRevision object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ContentPageRevision entity = new ContentPageRevision();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContentPageRevisionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPageRevision</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ContentPageRevision</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ContentPageRevision.
             <code><![CDATA[
             TList<ContentPageRevision> list = new TList<ContentPageRevision>();
             ContentPageRevision entity = new ContentPageRevision();
             entity.StringProperty = "foo";
             ContentPageRevision entity2 = new ContentPageRevision();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageRevisionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	public virtualmethod that Updates a ContentPageRevision object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPageRevision object to Update.</param>
            <remarks>After Updateing into the datasource, the ContentPageRevision object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ContentPageRevision entity = ContentPageRevisionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContentPageRevisionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPageRevision</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ContentPageRevision</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ContentPageRevision.
             <code><![CDATA[
             TList<ContentPageRevision> list = new TList<ContentPageRevision>();
             ContentPageRevision entity = new ContentPageRevision();
             entity.StringProperty = "foo";
             ContentPageRevision entity2 = new ContentPageRevision();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageRevisionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	public virtualmethod that Saves a ContentPageRevision object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPageRevision object to Save.</param>
            <remarks>After Saveing into the datasource, the ContentPageRevision object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ContentPageRevision entity = ContentPageRevisionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContentPageRevisionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPageRevision</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ContentPageRevision</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ContentPageRevision.
             <code><![CDATA[
             TList<ContentPageRevision> list = new TList<ContentPageRevision>();
             ContentPageRevision entity = new ContentPageRevision();
             entity.StringProperty = "foo";
             ContentPageRevision entity2 = new ContentPageRevision();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageRevisionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	public virtualmethod that Deletes a ContentPageRevision object into the datasource using a transaction.
            </summary>
            <param name="entity">ContentPageRevision object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ContentPageRevision object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ContentPageRevision entity = ContentPageRevisionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContentPageRevisionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContentPageRevision</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ContentPageRevision</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ContentPageRevision.
             <code><![CDATA[
             TList<ContentPageRevision> list = new TList<ContentPageRevision>();
             ContentPageRevision entity = new ContentPageRevision();
             entity.StringProperty = "foo";
             ContentPageRevision entity2 = new ContentPageRevision();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContentPageRevisionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 revisionID
            </summary>
            <param name="revisionID">ContentPageRevision pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoadByRevisionID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="revisionID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPageRevision Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ContentPageRevision Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ContentPageRevision Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContentPageRevision Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ContentPageRevision Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ContentPageRevision,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ContentPageRevision object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ContentPageRevision Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ContentPageRevision</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ContentPageRevision} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ContentPageRevision Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ContentPageRevisionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ContentPageService">
            <summary>
             An component type implementation of the 'ZNodeContentPage' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageService.#ctor">
            <summary>
            Initializes a new instance of the ContentPageService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CurrencyTypeService">
            <summary>
             An component type implementation of the 'ZNodeCurrencyType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CurrencyTypeService.#ctor">
            <summary>
            Initializes a new instance of the CurrencyTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductServiceBase">
            <summary>
             An object representation of the 'ZNodeProduct' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Product.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.CreateProduct(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="masterPage"></param>
            <param name="name"></param>
            <param name="shortDescription"></param>
            <param name="description"></param>
            <param name="featuresDesc"></param>
            <param name="productNum"></param>
            <param name="productTypeID"></param>
            <param name="retailPrice"></param>
            <param name="salePrice"></param>
            <param name="wholesalePrice"></param>
            <param name="imageFile"></param>
            <param name="imageAltTag"></param>
            <param name="weight"></param>
            <param name="length"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="beginActiveDate"></param>
            <param name="endActiveDate"></param>
            <param name="activeInd"></param>
            <param name="displayOrder"></param>
            <param name="callForPricing"></param>
            <param name="homepageSpecial"></param>
            <param name="categorySpecial"></param>
            <param name="inventoryDisplay"></param>
            <param name="keywords"></param>
            <param name="manufacturerID"></param>
            <param name="additionalInfoLink"></param>
            <param name="additionalInfoLinkLabel"></param>
            <param name="shippingRuleTypeID"></param>
            <param name="sEOTitle"></param>
            <param name="sEOKeywords"></param>
            <param name="sEODescription"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="shipEachItemSeparately"></param>
            <param name="sKU"></param>
            <param name="quantityOnHand"></param>
            <param name="allowBackOrder"></param>
            <param name="backOrderMsg"></param>
            <param name="dropShipInd"></param>
            <param name="dropShipEmailID"></param>
            <param name="specifications"></param>
            <param name="additionalInformation"></param>
            <param name="inStockMsg"></param>
            <param name="outOfStockMsg"></param>
            <param name="trackInventoryInd"></param>
            <param name="downloadLink"></param>
            <param name="freeShippingInd"></param>
            <param name="newProductInd"></param>
            <param name="sEOURL"></param>
            <param name="maxQty"></param>
            <param name="shipSeparately"></param>
            <param name="featuredInd"></param>
            <param name="webServiceDownloadDte"></param>
            <param name="updateDte"></param>
            <param name="reorderLevel"></param>
            <param name="supplierID"></param>
            <param name="recurringBillingInd"></param>
            <param name="recurringBillingInstallmentInd"></param>
            <param name="recurringBillingPeriod"></param>
            <param name="recurringBillingFrequency"></param>
            <param name="recurringBillingTotalCycles"></param>
            <param name="recurringBillingInitialAmount"></param>
            <param name="taxClassID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByPortalID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByManufacturerID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="manufacturerID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByManufacturerID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="productTypeID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="productTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByShippingRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySEOURL(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySKU(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByPortalIDActiveInd(System.Int32,System.Boolean)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByPortalIDActiveInd(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductNum(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX3 index.
            </summary>
            <param name="productNum"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX3 index.
            </summary>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByHomepageSpecialPortalID(System.Boolean,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX4 index.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByHomepageSpecialPortalID(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX4 index.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Product_PK index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Product_PK index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Product} of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	public virtualmethod that Inserts a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Insert.</param>
            <remarks>After Inserting into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Product entity = new Product();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	public virtualmethod that Updates a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Update.</param>
            <remarks>After Updateing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	public virtualmethod that Saves a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Save.</param>
            <remarks>After Saveing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	public virtualmethod that Deletes a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productID
            </summary>
            <param name="productID">Product pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadBySEOURL(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sEOURL"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadBySKU(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sKU"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadByPortalIDActiveInd(System.Int32,System.Boolean,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadByProductNum(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadByHomepageSpecialPortalID(System.Boolean,System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoadByProductID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Product Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Product Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Product Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Product,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Product Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Product</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Product} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductService">
            <summary>
             An component type implementation of the 'ZNodeProduct' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductService.#ctor">
            <summary>
            Initializes a new instance of the ProductService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Service.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductTierService">
            <summary>
             An component type implementation of the 'ZNodeProductTier' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductTierService.#ctor">
            <summary>
            Initializes a new instance of the ProductTierService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountPaymentService">
            <summary>
             An component type implementation of the 'ZNodeAccountPayment' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountPaymentService.#ctor">
            <summary>
            Initializes a new instance of the AccountPaymentService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AddOnValueService">
            <summary>
             An component type implementation of the 'ZNodeAddOnValue' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase">
            <summary>
             An object representation of the 'ZNodeAddOnValue' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AddOnValue.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.CreateAddOnValue(System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> instance.
            </summary>
            <param name="addOnID"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="sKU"></param>
            <param name="quantityOnHand"></param>
            <param name="defaultInd"></param>
            <param name="displayOrder"></param>
            <param name="imageFile"></param>
            <param name="imageAltTag"></param>
            <param name="retailPrice"></param>
            <param name="salePrice"></param>
            <param name="wholesalePrice"></param>
            <param name="recurringBillingInd"></param>
            <param name="recurringBillingInstallmentInd"></param>
            <param name="recurringBillingPeriod"></param>
            <param name="recurringBillingFrequency"></param>
            <param name="recurringBillingTotalCycles"></param>
            <param name="recurringBillingInitialAmount"></param>
            <param name="weight"></param>
            <param name="length"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="shippingRuleTypeID"></param>
            <param name="freeShippingInd"></param>
            <param name="webServiceDownloadDte"></param>
            <param name="updateDte"></param>
            <param name="reorderLevel"></param>
            <param name="supplierID"></param>
            <param name="taxClassID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByShippingRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a generic collection of AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a generic collection of AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a generic collection of AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByAddOnID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <returns>Returns a generic collection of AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Get(ZNode.Libraries.DataAccess.Entities.AddOnValueKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetBySKU(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByAddOnValueID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="addOnValueID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetByAddOnValueID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AddOnValue} of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AddOnValue</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	public virtualmethod that Inserts a AddOnValue object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOnValue object to Insert.</param>
            <remarks>After Inserting into the datasource, the AddOnValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AddOnValue entity = new AddOnValue();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddOnValueService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOnValue</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AddOnValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AddOnValue.
             <code><![CDATA[
             TList<AddOnValue> list = new TList<AddOnValue>();
             AddOnValue entity = new AddOnValue();
             entity.StringProperty = "foo";
             AddOnValue entity2 = new AddOnValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnValueService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Update(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	public virtualmethod that Updates a AddOnValue object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOnValue object to Update.</param>
            <remarks>After Updateing into the datasource, the AddOnValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AddOnValue entity = AddOnValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddOnValueService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOnValue</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AddOnValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AddOnValue.
             <code><![CDATA[
             TList<AddOnValue> list = new TList<AddOnValue>();
             AddOnValue entity = new AddOnValue();
             entity.StringProperty = "foo";
             AddOnValue entity2 = new AddOnValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnValueService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Save(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	public virtualmethod that Saves a AddOnValue object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOnValue object to Save.</param>
            <remarks>After Saveing into the datasource, the AddOnValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AddOnValue entity = AddOnValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AddOnValueService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOnValue</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AddOnValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AddOnValue.
             <code><![CDATA[
             TList<AddOnValue> list = new TList<AddOnValue>();
             AddOnValue entity = new AddOnValue();
             entity.StringProperty = "foo";
             AddOnValue entity2 = new AddOnValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnValueService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	public virtualmethod that Deletes a AddOnValue object into the datasource using a transaction.
            </summary>
            <param name="entity">AddOnValue object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AddOnValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AddOnValue entity = AddOnValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddOnValueService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddOnValue</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AddOnValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AddOnValue.
             <code><![CDATA[
             TList<AddOnValue> list = new TList<AddOnValue>();
             AddOnValue entity = new AddOnValue();
             entity.StringProperty = "foo";
             AddOnValue entity2 = new AddOnValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddOnValueService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.AddOnValueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 addOnValueID
            </summary>
            <param name="addOnValueID">AddOnValue pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoadBySKU(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sKU"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddOnValue Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoadByAddOnValueID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="addOnValueID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddOnValue Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AddOnValue Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AddOnValue Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddOnValue Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.AddOnValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AddOnValue Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.AddOnValue,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AddOnValue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AddOnValue Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AddOnValue</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AddOnValue} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AddOnValue Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.AddOnValueServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AddOnValueService.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase">
            <summary>
             An object representation of the 'ZNodePaymentStatus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PaymentStatus.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.CreatePaymentStatus(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> instance.
            </summary>
            <param name="paymentStatusID"></param>
            <param name="paymentStatusName"></param>
            <param name="description"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PaymentStatusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetByPaymentStatusID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePaymentStatus index.
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetByPaymentStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePaymentStatus index.
            </summary>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PaymentStatus} of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PaymentStatus</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	public virtualmethod that Inserts a PaymentStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentStatus object to Insert.</param>
            <remarks>After Inserting into the datasource, the PaymentStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PaymentStatus entity = new PaymentStatus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PaymentStatusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PaymentStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PaymentStatus.
             <code><![CDATA[
             TList<PaymentStatus> list = new TList<PaymentStatus>();
             PaymentStatus entity = new PaymentStatus();
             entity.StringProperty = "foo";
             PaymentStatus entity2 = new PaymentStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentStatusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Update(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	public virtualmethod that Updates a PaymentStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentStatus object to Update.</param>
            <remarks>After Updateing into the datasource, the PaymentStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PaymentStatus entity = PaymentStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PaymentStatusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PaymentStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PaymentStatus.
             <code><![CDATA[
             TList<PaymentStatus> list = new TList<PaymentStatus>();
             PaymentStatus entity = new PaymentStatus();
             entity.StringProperty = "foo";
             PaymentStatus entity2 = new PaymentStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentStatusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Save(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	public virtualmethod that Saves a PaymentStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentStatus object to Save.</param>
            <remarks>After Saveing into the datasource, the PaymentStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PaymentStatus entity = PaymentStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PaymentStatusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PaymentStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PaymentStatus.
             <code><![CDATA[
             TList<PaymentStatus> list = new TList<PaymentStatus>();
             PaymentStatus entity = new PaymentStatus();
             entity.StringProperty = "foo";
             PaymentStatus entity2 = new PaymentStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentStatusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	public virtualmethod that Deletes a PaymentStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentStatus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PaymentStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PaymentStatus entity = PaymentStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PaymentStatusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentStatus</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PaymentStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PaymentStatus.
             <code><![CDATA[
             TList<PaymentStatus> list = new TList<PaymentStatus>();
             PaymentStatus entity = new PaymentStatus();
             entity.StringProperty = "foo";
             PaymentStatus entity2 = new PaymentStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentStatusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PaymentStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 paymentStatusID
            </summary>
            <param name="paymentStatusID">PaymentStatus pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoadByPaymentStatusID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="paymentStatusID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentStatus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PaymentStatus Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PaymentStatus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentStatus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PaymentStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PaymentStatus Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PaymentStatus,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PaymentStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PaymentStatus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PaymentStatus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PaymentStatus} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PaymentStatus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PaymentStatusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase">
            <summary>
             An object representation of the 'ZNodeShippingServiceCode' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShippingServiceCode.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.CreateShippingServiceCode(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> instance.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="code"></param>
            <param name="description"></param>
            <param name="displayOrder"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetByShippingTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns a generic collection of ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetByShippingServiceCodeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetByShippingServiceCodeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShippingServiceCode} of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShippingServiceCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	public virtualmethod that Inserts a ShippingServiceCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingServiceCode object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShippingServiceCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShippingServiceCode entity = new ShippingServiceCode();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShippingServiceCodeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingServiceCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShippingServiceCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShippingServiceCode.
             <code><![CDATA[
             TList<ShippingServiceCode> list = new TList<ShippingServiceCode>();
             ShippingServiceCode entity = new ShippingServiceCode();
             entity.StringProperty = "foo";
             ShippingServiceCode entity2 = new ShippingServiceCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingServiceCodeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	public virtualmethod that Updates a ShippingServiceCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingServiceCode object to Update.</param>
            <remarks>After Updateing into the datasource, the ShippingServiceCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShippingServiceCode entity = ShippingServiceCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShippingServiceCodeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingServiceCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShippingServiceCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShippingServiceCode.
             <code><![CDATA[
             TList<ShippingServiceCode> list = new TList<ShippingServiceCode>();
             ShippingServiceCode entity = new ShippingServiceCode();
             entity.StringProperty = "foo";
             ShippingServiceCode entity2 = new ShippingServiceCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingServiceCodeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	public virtualmethod that Saves a ShippingServiceCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingServiceCode object to Save.</param>
            <remarks>After Saveing into the datasource, the ShippingServiceCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShippingServiceCode entity = ShippingServiceCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShippingServiceCodeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingServiceCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShippingServiceCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShippingServiceCode.
             <code><![CDATA[
             TList<ShippingServiceCode> list = new TList<ShippingServiceCode>();
             ShippingServiceCode entity = new ShippingServiceCode();
             entity.StringProperty = "foo";
             ShippingServiceCode entity2 = new ShippingServiceCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingServiceCodeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	public virtualmethod that Deletes a ShippingServiceCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ShippingServiceCode object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShippingServiceCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShippingServiceCode entity = ShippingServiceCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShippingServiceCodeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShippingServiceCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShippingServiceCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShippingServiceCode.
             <code><![CDATA[
             TList<ShippingServiceCode> list = new TList<ShippingServiceCode>();
             ShippingServiceCode entity = new ShippingServiceCode();
             entity.StringProperty = "foo";
             ShippingServiceCode entity2 = new ShippingServiceCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShippingServiceCodeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 shippingServiceCodeID
            </summary>
            <param name="shippingServiceCodeID">ShippingServiceCode pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoadByShippingServiceCodeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingServiceCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShippingServiceCode Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShippingServiceCode Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShippingServiceCode Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShippingServiceCode Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShippingServiceCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShippingServiceCode Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShippingServiceCode</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShippingServiceCode} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShippingServiceCode Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.GetErrorsFromList``1(ZNode.Libraries.DataAccess.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductImageService">
            <summary>
             An component type implementation of the 'ZNodeProductImage' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageService.#ctor">
            <summary>
            Initializes a new instance of the ProductImageService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.IPCommerceService">
            <summary>
             An component type implementation of the 'ZNodeIPCommerce' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.IPCommerceService.#ctor">
            <summary>
            Initializes a new instance of the IPCommerceService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductAddOnService">
            <summary>
             An component type implementation of the 'ZNodeProductAddOn' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase">
            <summary>
             An object representation of the 'ZNodeProductAddOn' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductAddOn.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.CreateProductAddOn(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="addOnID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByAddOnID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <returns>Returns a generic collection of ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByProductID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a generic collection of ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductAddOnKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByProductAddOnID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="productAddOnID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetByProductAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductAddOn} of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductAddOn</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	public virtualmethod that Inserts a ProductAddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAddOn object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductAddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductAddOn entity = new ProductAddOn();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductAddOnService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductAddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductAddOn.
             <code><![CDATA[
             TList<ProductAddOn> list = new TList<ProductAddOn>();
             ProductAddOn entity = new ProductAddOn();
             entity.StringProperty = "foo";
             ProductAddOn entity2 = new ProductAddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAddOnService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	public virtualmethod that Updates a ProductAddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAddOn object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductAddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductAddOn entity = ProductAddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductAddOnService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductAddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductAddOn.
             <code><![CDATA[
             TList<ProductAddOn> list = new TList<ProductAddOn>();
             ProductAddOn entity = new ProductAddOn();
             entity.StringProperty = "foo";
             ProductAddOn entity2 = new ProductAddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAddOnService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	public virtualmethod that Saves a ProductAddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAddOn object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductAddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductAddOn entity = ProductAddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductAddOnService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductAddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductAddOn.
             <code><![CDATA[
             TList<ProductAddOn> list = new TList<ProductAddOn>();
             ProductAddOn entity = new ProductAddOn();
             entity.StringProperty = "foo";
             ProductAddOn entity2 = new ProductAddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAddOnService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	public virtualmethod that Deletes a ProductAddOn object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductAddOn object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductAddOn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductAddOn entity = ProductAddOnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductAddOnService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductAddOn</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductAddOn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductAddOn.
             <code><![CDATA[
             TList<ProductAddOn> list = new TList<ProductAddOn>();
             ProductAddOn entity = new ProductAddOn();
             entity.StringProperty = "foo";
             ProductAddOn entity2 = new ProductAddOn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductAddOnService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductAddOnKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productAddOnID
            </summary>
            <param name="productAddOnID">ProductAddOn pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoadByProductAddOnID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productAddOnID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductAddOn Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductAddOn Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductAddOn Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductAddOn Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductAddOn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductAddOn Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductAddOn,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductAddOn object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductAddOn Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductAddOn</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductAddOn} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductAddOn Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductAddOnServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductAddOnService.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseRequestService">
            <summary>
             An component type implementation of the 'ZNodeCaseRequest' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseRequestService.#ctor">
            <summary>
            Initializes a new instance of the CaseRequestService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.WishListService">
            <summary>
             An component type implementation of the 'ZNodeWishList' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.WishListService.#ctor">
            <summary>
            Initializes a new instance of the WishListService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeService">
            <summary>
             An component type implementation of the 'ZNodeShippingServiceCode' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingServiceCodeService.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingRuleService">
            <summary>
             An component type implementation of the 'ZNodeShippingRule' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingRuleService.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductImageTypeService">
            <summary>
             An component type implementation of the 'ZNodeProductImageType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeProductImageType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductImageType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.CreateProductImageType(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> instance.
            </summary>
            <param name="productImageTypeID"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductImageTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetByProductImageTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductImageType index.
            </summary>
            <param name="productImageTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetByProductImageTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeProductImageType index.
            </summary>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductImageType} of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductImageType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	public virtualmethod that Inserts a ProductImageType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImageType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductImageType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductImageType entity = new ProductImageType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductImageTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImageType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductImageType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductImageType.
             <code><![CDATA[
             TList<ProductImageType> list = new TList<ProductImageType>();
             ProductImageType entity = new ProductImageType();
             entity.StringProperty = "foo";
             ProductImageType entity2 = new ProductImageType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	public virtualmethod that Updates a ProductImageType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImageType object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductImageType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductImageType entity = ProductImageTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductImageTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImageType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductImageType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductImageType.
             <code><![CDATA[
             TList<ProductImageType> list = new TList<ProductImageType>();
             ProductImageType entity = new ProductImageType();
             entity.StringProperty = "foo";
             ProductImageType entity2 = new ProductImageType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	public virtualmethod that Saves a ProductImageType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImageType object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductImageType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductImageType entity = ProductImageTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductImageTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImageType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductImageType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductImageType.
             <code><![CDATA[
             TList<ProductImageType> list = new TList<ProductImageType>();
             ProductImageType entity = new ProductImageType();
             entity.StringProperty = "foo";
             ProductImageType entity2 = new ProductImageType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	public virtualmethod that Deletes a ProductImageType object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductImageType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductImageType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductImageType entity = ProductImageTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductImageTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductImageType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductImageType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductImageType.
             <code><![CDATA[
             TList<ProductImageType> list = new TList<ProductImageType>();
             ProductImageType entity = new ProductImageType();
             entity.StringProperty = "foo";
             ProductImageType entity2 = new ProductImageType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductImageTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductImageTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productImageTypeID
            </summary>
            <param name="productImageTypeID">ProductImageType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoadByProductImageTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productImageTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductImageType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductImageType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductImageType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductImageType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductImageType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductImageType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductImageType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductImageType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductImageType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductImageType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductImageType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductImageType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductImageTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductImageTypeService.#ctor">
            <summary>
            Initializes a new instance of the ProductImageTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AccountService">
            <summary>
             An component type implementation of the 'ZNodeAccount' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AccountService.#ctor">
            <summary>
            Initializes a new instance of the AccountService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeService">
            <summary>
             An component type implementation of the 'ZNodeReferralCommissionType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReferralCommissionTypeService.#ctor">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductCrossSellService">
            <summary>
             An component type implementation of the 'ZNodeProductCrossSell' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase">
            <summary>
             An object representation of the 'ZNodeProductCrossSell' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductCrossSell.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.CreateProductCrossSell(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> instance.
            </summary>
            <param name="portalId"></param>
            <param name="productId"></param>
            <param name="relatedProductId"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="productId"></param>
            <returns>Returns a generic collection of ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="productId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetByProductCrossSellTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductCrossSellType index.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetByProductCrossSellTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductCrossSellType index.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductCrossSell} of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCrossSell</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	public virtualmethod that Inserts a ProductCrossSell object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCrossSell object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductCrossSell object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductCrossSell entity = new ProductCrossSell();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductCrossSellService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCrossSell</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductCrossSell</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductCrossSell.
             <code><![CDATA[
             TList<ProductCrossSell> list = new TList<ProductCrossSell>();
             ProductCrossSell entity = new ProductCrossSell();
             entity.StringProperty = "foo";
             ProductCrossSell entity2 = new ProductCrossSell();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCrossSellService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	public virtualmethod that Updates a ProductCrossSell object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCrossSell object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductCrossSell object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductCrossSell entity = ProductCrossSellService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductCrossSellService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCrossSell</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductCrossSell</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductCrossSell.
             <code><![CDATA[
             TList<ProductCrossSell> list = new TList<ProductCrossSell>();
             ProductCrossSell entity = new ProductCrossSell();
             entity.StringProperty = "foo";
             ProductCrossSell entity2 = new ProductCrossSell();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCrossSellService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	public virtualmethod that Saves a ProductCrossSell object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCrossSell object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductCrossSell object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductCrossSell entity = ProductCrossSellService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductCrossSellService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCrossSell</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductCrossSell</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductCrossSell.
             <code><![CDATA[
             TList<ProductCrossSell> list = new TList<ProductCrossSell>();
             ProductCrossSell entity = new ProductCrossSell();
             entity.StringProperty = "foo";
             ProductCrossSell entity2 = new ProductCrossSell();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCrossSellService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	public virtualmethod that Deletes a ProductCrossSell object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCrossSell object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductCrossSell object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductCrossSell entity = ProductCrossSellService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductCrossSellService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCrossSell</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductCrossSell</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductCrossSell.
             <code><![CDATA[
             TList<ProductCrossSell> list = new TList<ProductCrossSell>();
             ProductCrossSell entity = new ProductCrossSell();
             entity.StringProperty = "foo";
             ProductCrossSell entity2 = new ProductCrossSell();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCrossSellService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productCrossSellTypeId
            </summary>
            <param name="productCrossSellTypeId">ProductCrossSell pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoadByProductCrossSellTypeId(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCrossSell Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductCrossSell Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductCrossSell Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCrossSell Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductCrossSell Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductCrossSell,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductCrossSell object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductCrossSell Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductCrossSell</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductCrossSell} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductCrossSell Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductCrossSellServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCrossSellService.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.AttributeTypeService">
            <summary>
             An component type implementation of the 'ZNodeAttributeType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.AttributeTypeService.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase">
            <summary>
             An object representation of the 'ZNodeActivityLog' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ActivityLog.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.CreateActivityLog(System.Int32,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> instance.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="createDte"></param>
            <param name="endDte"></param>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="data3"></param>
            <param name="status"></param>
            <param name="longData"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByActivityLogTypeID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="activityLogTypeID"></param>
            <returns>Returns a generic collection of ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ActivityLogKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData1(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data1 index.
            </summary>
            <param name="data1"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData1(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data1 index.
            </summary>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData2(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data2 index.
            </summary>
            <param name="data2"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData2(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data2 index.
            </summary>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData3(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data3 index.
            </summary>
            <param name="data3"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByData3(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Data3 index.
            </summary>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByActivityLogID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeActivityLog index.
            </summary>
            <param name="activityLogID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetByActivityLogID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeActivityLog index.
            </summary>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ActivityLog} of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ActivityLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	public virtualmethod that Inserts a ActivityLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLog object to Insert.</param>
            <remarks>After Inserting into the datasource, the ActivityLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ActivityLog entity = new ActivityLog();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ActivityLogService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ActivityLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ActivityLog.
             <code><![CDATA[
             TList<ActivityLog> list = new TList<ActivityLog>();
             ActivityLog entity = new ActivityLog();
             entity.StringProperty = "foo";
             ActivityLog entity2 = new ActivityLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	public virtualmethod that Updates a ActivityLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLog object to Update.</param>
            <remarks>After Updateing into the datasource, the ActivityLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ActivityLog entity = ActivityLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ActivityLogService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ActivityLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ActivityLog.
             <code><![CDATA[
             TList<ActivityLog> list = new TList<ActivityLog>();
             ActivityLog entity = new ActivityLog();
             entity.StringProperty = "foo";
             ActivityLog entity2 = new ActivityLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	public virtualmethod that Saves a ActivityLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLog object to Save.</param>
            <remarks>After Saveing into the datasource, the ActivityLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ActivityLog entity = ActivityLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ActivityLogService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ActivityLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ActivityLog.
             <code><![CDATA[
             TList<ActivityLog> list = new TList<ActivityLog>();
             ActivityLog entity = new ActivityLog();
             entity.StringProperty = "foo";
             ActivityLog entity2 = new ActivityLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	public virtualmethod that Deletes a ActivityLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ActivityLog object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ActivityLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ActivityLog entity = ActivityLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ActivityLogService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActivityLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ActivityLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ActivityLog.
             <code><![CDATA[
             TList<ActivityLog> list = new TList<ActivityLog>();
             ActivityLog entity = new ActivityLog();
             entity.StringProperty = "foo";
             ActivityLog entity2 = new ActivityLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActivityLogService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ActivityLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 activityLogID
            </summary>
            <param name="activityLogID">ActivityLog pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoadByData1(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="data1"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoadByData2(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="data2"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoadByData3(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="data3"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoadByActivityLogID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="activityLogID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ActivityLog Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ActivityLog Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ActivityLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ActivityLog Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ActivityLog,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ActivityLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ActivityLog Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ActivityLog</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ActivityLog} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ActivityLog Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ActivityLogServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentStatusService">
            <summary>
             An component type implementation of the 'ZNodePaymentStatus' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentStatusService.#ctor">
            <summary>
            Initializes a new instance of the PaymentStatusService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase">
            <summary>
             An object representation of the 'ZNodeTaxClass' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TaxClass.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.CreateTaxClass(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> instance.
            </summary>
            <param name="name"></param>
            <param name="displayOrder"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Get(ZNode.Libraries.DataAccess.Entities.TaxClassKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeTaxClass index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeTaxClass index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetByTaxClassID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTaxClass index.
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetByTaxClassID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTaxClass index.
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TaxClass} of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaxClass</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	public virtualmethod that Inserts a TaxClass object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxClass object to Insert.</param>
            <remarks>After Inserting into the datasource, the TaxClass object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TaxClass entity = new TaxClass();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaxClassService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxClass</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TaxClass</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TaxClass.
             <code><![CDATA[
             TList<TaxClass> list = new TList<TaxClass>();
             TaxClass entity = new TaxClass();
             entity.StringProperty = "foo";
             TaxClass entity2 = new TaxClass();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxClassService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	public virtualmethod that Updates a TaxClass object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxClass object to Update.</param>
            <remarks>After Updateing into the datasource, the TaxClass object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TaxClass entity = TaxClassService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaxClassService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxClass</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TaxClass</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TaxClass.
             <code><![CDATA[
             TList<TaxClass> list = new TList<TaxClass>();
             TaxClass entity = new TaxClass();
             entity.StringProperty = "foo";
             TaxClass entity2 = new TaxClass();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxClassService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	public virtualmethod that Saves a TaxClass object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxClass object to Save.</param>
            <remarks>After Saveing into the datasource, the TaxClass object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TaxClass entity = TaxClassService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaxClassService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxClass</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TaxClass</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TaxClass.
             <code><![CDATA[
             TList<TaxClass> list = new TList<TaxClass>();
             TaxClass entity = new TaxClass();
             entity.StringProperty = "foo";
             TaxClass entity2 = new TaxClass();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxClassService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	public virtualmethod that Deletes a TaxClass object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxClass object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TaxClass object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TaxClass entity = TaxClassService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaxClassService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxClass</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TaxClass</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TaxClass.
             <code><![CDATA[
             TList<TaxClass> list = new TList<TaxClass>();
             TaxClass entity = new TaxClass();
             entity.StringProperty = "foo";
             TaxClass entity2 = new TaxClass();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxClassService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxClassKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 taxClassID
            </summary>
            <param name="taxClassID">TaxClass pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoadByName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxClass Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoadByTaxClassID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="taxClassID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxClass Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TaxClass Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TaxClass Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxClass Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxClass)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TaxClass Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxClass,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TaxClass object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TaxClass Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TaxClass</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TaxClass} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TaxClass Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.TaxClassServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase">
            <summary>
             An object representation of the 'ZNodeProductHighlight' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductHighlight.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.CreateProductHighlight(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> instance.
            </summary>
            <param name="productID"></param>
            <param name="highlightID"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProductHighlightKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByHighlightID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByProductID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Product index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Product index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByProductHighlightID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductHighlight index.
            </summary>
            <param name="productHighlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetByProductHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_ProductHighlight index.
            </summary>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductHighlight} of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductHighlight</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	public virtualmethod that Inserts a ProductHighlight object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductHighlight object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductHighlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductHighlight entity = new ProductHighlight();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductHighlightService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductHighlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductHighlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductHighlight.
             <code><![CDATA[
             TList<ProductHighlight> list = new TList<ProductHighlight>();
             ProductHighlight entity = new ProductHighlight();
             entity.StringProperty = "foo";
             ProductHighlight entity2 = new ProductHighlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductHighlightService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	public virtualmethod that Updates a ProductHighlight object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductHighlight object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductHighlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductHighlight entity = ProductHighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductHighlightService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductHighlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductHighlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductHighlight.
             <code><![CDATA[
             TList<ProductHighlight> list = new TList<ProductHighlight>();
             ProductHighlight entity = new ProductHighlight();
             entity.StringProperty = "foo";
             ProductHighlight entity2 = new ProductHighlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductHighlightService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	public virtualmethod that Saves a ProductHighlight object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductHighlight object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductHighlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductHighlight entity = ProductHighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductHighlightService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductHighlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductHighlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductHighlight.
             <code><![CDATA[
             TList<ProductHighlight> list = new TList<ProductHighlight>();
             ProductHighlight entity = new ProductHighlight();
             entity.StringProperty = "foo";
             ProductHighlight entity2 = new ProductHighlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductHighlightService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	public virtualmethod that Deletes a ProductHighlight object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductHighlight object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductHighlight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductHighlight entity = ProductHighlightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductHighlightService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductHighlight</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductHighlight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductHighlight.
             <code><![CDATA[
             TList<ProductHighlight> list = new TList<ProductHighlight>();
             ProductHighlight entity = new ProductHighlight();
             entity.StringProperty = "foo";
             ProductHighlight entity2 = new ProductHighlight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductHighlightService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProductHighlightKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 productHighlightID
            </summary>
            <param name="productHighlightID">ProductHighlight pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoadByHighlightID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="highlightID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductHighlight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoadByProductID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductHighlight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoadByProductHighlightID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="productHighlightID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductHighlight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductHighlight Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductHighlight Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductHighlight Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ProductHighlight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductHighlight Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ProductHighlight,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductHighlight object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductHighlight Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductHighlight</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductHighlight} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductHighlight Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProductHighlightServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ReviewService">
            <summary>
             An component type implementation of the 'ZNodeReview' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ReviewService.#ctor">
            <summary>
            Initializes a new instance of the ReviewService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ZipCodeService">
            <summary>
             An component type implementation of the 'ZNodeZipCode' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase">
            <summary>
             An object representation of the 'ZNodeZipCode' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ZipCode.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.CreateZipCode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> instance.
            </summary>
            <param name="zIP"></param>
            <param name="zIPType"></param>
            <param name="cityName"></param>
            <param name="cityType"></param>
            <param name="stateName"></param>
            <param name="stateAbbr"></param>
            <param name="areaCode"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="countyName"></param>
            <param name="countyFIPS"></param>
            <param name="stateFIPS"></param>
            <param name="mSACode"></param>
            <param name="timeZone"></param>
            <param name="uTC"></param>
            <param name="dST"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ZipCodeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByAreaCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="areaCode"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByAreaCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByCityName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="cityName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByCityName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByCountyName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="countyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByCountyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByLatitude(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="latitude"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByLatitude(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByLongitude(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="longitude"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByLongitude(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByStateAbbr(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="stateAbbr"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByStateAbbr(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByStateName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="stateName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByStateName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByZIP(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="zIP"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByZIP(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByZipCodeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeZipCode index.
            </summary>
            <param name="zipCodeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetByZipCodeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeZipCode index.
            </summary>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ZipCode} of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ZipCode</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	public virtualmethod that Inserts a ZipCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ZipCode object to Insert.</param>
            <remarks>After Inserting into the datasource, the ZipCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ZipCode entity = new ZipCode();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ZipCodeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ZipCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ZipCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ZipCode.
             <code><![CDATA[
             TList<ZipCode> list = new TList<ZipCode>();
             ZipCode entity = new ZipCode();
             entity.StringProperty = "foo";
             ZipCode entity2 = new ZipCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ZipCodeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	public virtualmethod that Updates a ZipCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ZipCode object to Update.</param>
            <remarks>After Updateing into the datasource, the ZipCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ZipCode entity = ZipCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ZipCodeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ZipCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ZipCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ZipCode.
             <code><![CDATA[
             TList<ZipCode> list = new TList<ZipCode>();
             ZipCode entity = new ZipCode();
             entity.StringProperty = "foo";
             ZipCode entity2 = new ZipCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ZipCodeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	public virtualmethod that Saves a ZipCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ZipCode object to Save.</param>
            <remarks>After Saveing into the datasource, the ZipCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ZipCode entity = ZipCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ZipCodeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ZipCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ZipCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ZipCode.
             <code><![CDATA[
             TList<ZipCode> list = new TList<ZipCode>();
             ZipCode entity = new ZipCode();
             entity.StringProperty = "foo";
             ZipCode entity2 = new ZipCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ZipCodeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	public virtualmethod that Deletes a ZipCode object into the datasource using a transaction.
            </summary>
            <param name="entity">ZipCode object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ZipCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ZipCode entity = ZipCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ZipCodeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ZipCode</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ZipCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ZipCode.
             <code><![CDATA[
             TList<ZipCode> list = new TList<ZipCode>();
             ZipCode entity = new ZipCode();
             entity.StringProperty = "foo";
             ZipCode entity2 = new ZipCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ZipCodeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ZipCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 zipCodeID
            </summary>
            <param name="zipCodeID">ZipCode pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByAreaCode(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="areaCode"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByCityName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="cityName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByCountyName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="countyName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByLatitude(System.Nullable{System.Decimal},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="latitude"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByLongitude(System.Nullable{System.Decimal},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="longitude"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByStateAbbr(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="stateAbbr"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByStateName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="stateName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByZIP(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="zIP"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoadByZipCodeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="zipCodeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ZipCode Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ZipCode Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.ZipCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ZipCode Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.ZipCode,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ZipCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ZipCode Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ZipCode</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ZipCode} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZipCode Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ZipCodeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ZipCodeService.#ctor">
            <summary>
            Initializes a new instance of the ZipCodeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PasswordLogService">
            <summary>
             An component type implementation of the 'ZNodePasswordLog' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase">
            <summary>
             An object representation of the 'ZNodePasswordLog' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PasswordLog.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.CreatePasswordLog(System.Guid,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> instance.
            </summary>
            <param name="userID"></param>
            <param name="password"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Get(ZNode.Libraries.DataAccess.Entities.PasswordLogKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetByUserID(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodePasswordLog index.
            </summary>
            <param name="userID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetByUserID(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodePasswordLog index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetByPasswordLogID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePasswordLog index.
            </summary>
            <param name="passwordLogID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetByPasswordLogID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodePasswordLog index.
            </summary>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PasswordLog} of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PasswordLog</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	public virtualmethod that Inserts a PasswordLog object into the datasource using a transaction.
            </summary>
            <param name="entity">PasswordLog object to Insert.</param>
            <remarks>After Inserting into the datasource, the PasswordLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PasswordLog entity = new PasswordLog();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PasswordLogService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PasswordLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PasswordLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PasswordLog.
             <code><![CDATA[
             TList<PasswordLog> list = new TList<PasswordLog>();
             PasswordLog entity = new PasswordLog();
             entity.StringProperty = "foo";
             PasswordLog entity2 = new PasswordLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PasswordLogService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Update(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	public virtualmethod that Updates a PasswordLog object into the datasource using a transaction.
            </summary>
            <param name="entity">PasswordLog object to Update.</param>
            <remarks>After Updateing into the datasource, the PasswordLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PasswordLog entity = PasswordLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PasswordLogService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PasswordLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PasswordLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PasswordLog.
             <code><![CDATA[
             TList<PasswordLog> list = new TList<PasswordLog>();
             PasswordLog entity = new PasswordLog();
             entity.StringProperty = "foo";
             PasswordLog entity2 = new PasswordLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PasswordLogService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Save(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	public virtualmethod that Saves a PasswordLog object into the datasource using a transaction.
            </summary>
            <param name="entity">PasswordLog object to Save.</param>
            <remarks>After Saveing into the datasource, the PasswordLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PasswordLog entity = PasswordLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PasswordLogService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PasswordLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PasswordLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PasswordLog.
             <code><![CDATA[
             TList<PasswordLog> list = new TList<PasswordLog>();
             PasswordLog entity = new PasswordLog();
             entity.StringProperty = "foo";
             PasswordLog entity2 = new PasswordLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PasswordLogService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	public virtualmethod that Deletes a PasswordLog object into the datasource using a transaction.
            </summary>
            <param name="entity">PasswordLog object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PasswordLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PasswordLog entity = PasswordLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PasswordLogService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PasswordLog</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PasswordLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PasswordLog.
             <code><![CDATA[
             TList<PasswordLog> list = new TList<PasswordLog>();
             PasswordLog entity = new PasswordLog();
             entity.StringProperty = "foo";
             PasswordLog entity2 = new PasswordLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PasswordLogService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.PasswordLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 passwordLogID
            </summary>
            <param name="passwordLogID">PasswordLog pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoadByUserID(System.Guid,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="userID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PasswordLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoadByPasswordLogID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="passwordLogID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PasswordLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PasswordLog Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PasswordLog Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PasswordLog Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.PasswordLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PasswordLog Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.PasswordLog,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PasswordLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PasswordLog Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PasswordLog</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PasswordLog} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PasswordLog Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.PasswordLogServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PasswordLogService.#ctor">
            <summary>
            Initializes a new instance of the PasswordLogService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderServiceBase">
            <summary>
             An object representation of the 'ZNodeOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Order.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.CreateOrder(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> instance.
            </summary>
            <param name="portalId"></param>
            <param name="accountID"></param>
            <param name="orderStateID"></param>
            <param name="shippingID"></param>
            <param name="paymentTypeId"></param>
            <param name="shipFirstName"></param>
            <param name="shipLastName"></param>
            <param name="shipCompanyName"></param>
            <param name="shipStreet"></param>
            <param name="shipStreet1"></param>
            <param name="shipCity"></param>
            <param name="shipStateCode"></param>
            <param name="shipPostalCode"></param>
            <param name="shipCountry"></param>
            <param name="shipPhoneNumber"></param>
            <param name="shipEmailID"></param>
            <param name="billingFirstName"></param>
            <param name="billingLastName"></param>
            <param name="billingCompanyName"></param>
            <param name="billingStreet"></param>
            <param name="billingStreet1"></param>
            <param name="billingCity"></param>
            <param name="billingStateCode"></param>
            <param name="billingPostalCode"></param>
            <param name="billingCountry"></param>
            <param name="billingPhoneNumber"></param>
            <param name="billingEmailId"></param>
            <param name="cardTransactionID"></param>
            <param name="cardAuthCode"></param>
            <param name="cardTypeId"></param>
            <param name="cardExp"></param>
            <param name="taxCost"></param>
            <param name="shippingCost"></param>
            <param name="subTotal"></param>
            <param name="discountAmount"></param>
            <param name="total"></param>
            <param name="orderDate"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="additionalInstructions"></param>
            <param name="custom3"></param>
            <param name="trackingNumber"></param>
            <param name="couponCode"></param>
            <param name="promoDescription"></param>
            <param name="referralAccountID"></param>
            <param name="purchaseOrderNumber"></param>
            <param name="paymentStatusID"></param>
            <param name="webServiceDownloadDate"></param>
            <param name="paymentSettingID"></param>
            <param name="shipDate"></param>
            <param name="returnDate"></param>
            <param name="salesTax"></param>
            <param name="vAT"></param>
            <param name="gST"></param>
            <param name="pST"></param>
            <param name="hST"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPortalId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPortalId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByShippingID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="shippingID"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByShippingID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByReferralAccountID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPaymentSettingID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPaymentSettingID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPaymentStatusID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByOrderStateID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="orderStateID"></param>
            <returns>Returns a generic collection of Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Get(ZNode.Libraries.DataAccess.Entities.OrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Account index.
            </summary>
            <param name="accountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByOrderID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Order_PK index.
            </summary>
            <param name="orderID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetByOrderID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_Order_PK index.
            </summary>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Order} of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Order</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	public virtualmethod that Inserts a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Insert.</param>
            <remarks>After Inserting into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Order entity = new Order();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	public virtualmethod that Updates a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Update.</param>
            <remarks>After Updateing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	public virtualmethod that Saves a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Save.</param>
            <remarks>After Saveing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	public virtualmethod that Deletes a Order object into the datasource using a transaction.
            </summary>
            <param name="entity">Order object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Order object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Order entity = OrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Order</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Order</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Order.
             <code><![CDATA[
             TList<Order> list = new TList<Order>();
             Order entity = new Order();
             entity.StringProperty = "foo";
             Order entity2 = new Order();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderID
            </summary>
            <param name="orderID">Order pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoadByAccountID(System.Nullable{System.Int32},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="accountID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoadByOrderID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="orderID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Order Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Order Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Order)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Order Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Order,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Order object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Order Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Order</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Order} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Order Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.OrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderService">
            <summary>
             An component type implementation of the 'ZNodeOrder' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderService.#ctor">
            <summary>
            Initializes a new instance of the OrderService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CountryServiceBase">
            <summary>
             An object representation of the 'ZNodeCountry' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Country.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.CreateCountry(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> instance.
            </summary>
            <param name="code"></param>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="displayOrder"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CountryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeCountry index.
            </summary>
            <param name="code"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeCountry index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Country} of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Country</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	public virtualmethod that Inserts a Country object into the datasource using a transaction.
            </summary>
            <param name="entity">Country object to Insert.</param>
            <remarks>After Inserting into the datasource, the Country object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Country entity = new Country();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CountryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Country</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Country</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Country.
             <code><![CDATA[
             TList<Country> list = new TList<Country>();
             Country entity = new Country();
             entity.StringProperty = "foo";
             Country entity2 = new Country();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	public virtualmethod that Updates a Country object into the datasource using a transaction.
            </summary>
            <param name="entity">Country object to Update.</param>
            <remarks>After Updateing into the datasource, the Country object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Country entity = CountryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CountryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Country</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Country</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Country.
             <code><![CDATA[
             TList<Country> list = new TList<Country>();
             Country entity = new Country();
             entity.StringProperty = "foo";
             Country entity2 = new Country();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	public virtualmethod that Saves a Country object into the datasource using a transaction.
            </summary>
            <param name="entity">Country object to Save.</param>
            <remarks>After Saveing into the datasource, the Country object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Country entity = CountryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CountryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Country</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Country</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Country.
             <code><![CDATA[
             TList<Country> list = new TList<Country>();
             Country entity = new Country();
             entity.StringProperty = "foo";
             Country entity2 = new Country();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	public virtualmethod that Deletes a Country object into the datasource using a transaction.
            </summary>
            <param name="entity">Country object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Country object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Country entity = CountryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CountryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Country</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Country</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Country.
             <code><![CDATA[
             TList<Country> list = new TList<Country>();
             Country entity = new Country();
             entity.StringProperty = "foo";
             Country entity2 = new Country();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CountryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String code
            </summary>
            <param name="code">Country pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoadByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Country Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoadByCode(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="code"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Country Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Country Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Country Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Country Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Country)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Country Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Country,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Country object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Country Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Country</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Country} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Country Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CountryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CountryService">
            <summary>
             An component type implementation of the 'ZNodeCountry' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CountryService.#ctor">
            <summary>
            Initializes a new instance of the CountryService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StorefrontService">
            <summary>
             An component type implementation of the 'ZNodeStorefront' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase">
            <summary>
             An object representation of the 'ZNodeStorefront' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Storefront.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.CreateStorefront(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> instance.
            </summary>
            <param name="iD"></param>
            <param name="majorVersion"></param>
            <param name="minorVersion"></param>
            <param name="build"></param>
            <param name="iPC"></param>
            <param name="lVK"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Get(ZNode.Libraries.DataAccess.Entities.StorefrontKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetByID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeStorefront index.
            </summary>
            <param name="iD"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetByID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeStorefront index.
            </summary>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Storefront} of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Storefront</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	public virtualmethod that Inserts a Storefront object into the datasource using a transaction.
            </summary>
            <param name="entity">Storefront object to Insert.</param>
            <remarks>After Inserting into the datasource, the Storefront object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Storefront entity = new Storefront();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StorefrontService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Storefront</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Storefront</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Storefront.
             <code><![CDATA[
             TList<Storefront> list = new TList<Storefront>();
             Storefront entity = new Storefront();
             entity.StringProperty = "foo";
             Storefront entity2 = new Storefront();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StorefrontService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	public virtualmethod that Updates a Storefront object into the datasource using a transaction.
            </summary>
            <param name="entity">Storefront object to Update.</param>
            <remarks>After Updateing into the datasource, the Storefront object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Storefront entity = StorefrontService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StorefrontService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Storefront</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Storefront</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Storefront.
             <code><![CDATA[
             TList<Storefront> list = new TList<Storefront>();
             Storefront entity = new Storefront();
             entity.StringProperty = "foo";
             Storefront entity2 = new Storefront();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StorefrontService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	public virtualmethod that Saves a Storefront object into the datasource using a transaction.
            </summary>
            <param name="entity">Storefront object to Save.</param>
            <remarks>After Saveing into the datasource, the Storefront object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Storefront entity = StorefrontService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StorefrontService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Storefront</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Storefront</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Storefront.
             <code><![CDATA[
             TList<Storefront> list = new TList<Storefront>();
             Storefront entity = new Storefront();
             entity.StringProperty = "foo";
             Storefront entity2 = new Storefront();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StorefrontService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	public virtualmethod that Deletes a Storefront object into the datasource using a transaction.
            </summary>
            <param name="entity">Storefront object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Storefront object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Storefront entity = StorefrontService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StorefrontService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Storefront</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Storefront</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Storefront.
             <code><![CDATA[
             TList<Storefront> list = new TList<Storefront>();
             Storefront entity = new Storefront();
             entity.StringProperty = "foo";
             Storefront entity2 = new Storefront();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StorefrontService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.StorefrontKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 iD
            </summary>
            <param name="iD">Storefront pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoadByID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="iD"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Storefront Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Storefront Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Storefront Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Storefront Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Storefront)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Storefront Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Storefront,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Storefront object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Storefront Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Storefront</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Storefront} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Storefront Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.StorefrontServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.StorefrontService.#ctor">
            <summary>
            Initializes a new instance of the StorefrontService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase">
            <summary>
             An object representation of the 'ZNodeTaxRule' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TaxRule.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.CreateTaxRule(System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> instance.
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="portalID"></param>
            <param name="taxClassID"></param>
            <param name="destinationCountryCode"></param>
            <param name="destinationStateCode"></param>
            <param name="countyFIPS"></param>
            <param name="precedence"></param>
            <param name="salesTax"></param>
            <param name="vAT"></param>
            <param name="gST"></param>
            <param name="pST"></param>
            <param name="hST"></param>
            <param name="taxShipping"></param>
            <param name="inclusiveInd"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByDestinationCountryCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <returns>Returns a generic collection of TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByDestinationCountryCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByPortalID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a generic collection of TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a generic collection of TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="taxRuleTypeID"></param>
            <returns>Returns a generic collection of TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Get(ZNode.Libraries.DataAccess.Entities.TaxRuleKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxRuleID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_TaxRule index.
            </summary>
            <param name="taxRuleID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetByTaxRuleID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_TaxRule index.
            </summary>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TaxRule} of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaxRule</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	public virtualmethod that Inserts a TaxRule object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRule object to Insert.</param>
            <remarks>After Inserting into the datasource, the TaxRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TaxRule entity = new TaxRule();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaxRuleService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TaxRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TaxRule.
             <code><![CDATA[
             TList<TaxRule> list = new TList<TaxRule>();
             TaxRule entity = new TaxRule();
             entity.StringProperty = "foo";
             TaxRule entity2 = new TaxRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	public virtualmethod that Updates a TaxRule object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRule object to Update.</param>
            <remarks>After Updateing into the datasource, the TaxRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TaxRule entity = TaxRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaxRuleService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TaxRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TaxRule.
             <code><![CDATA[
             TList<TaxRule> list = new TList<TaxRule>();
             TaxRule entity = new TaxRule();
             entity.StringProperty = "foo";
             TaxRule entity2 = new TaxRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	public virtualmethod that Saves a TaxRule object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRule object to Save.</param>
            <remarks>After Saveing into the datasource, the TaxRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TaxRule entity = TaxRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaxRuleService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TaxRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TaxRule.
             <code><![CDATA[
             TList<TaxRule> list = new TList<TaxRule>();
             TaxRule entity = new TaxRule();
             entity.StringProperty = "foo";
             TaxRule entity2 = new TaxRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	public virtualmethod that Deletes a TaxRule object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRule object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TaxRule object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TaxRule entity = TaxRuleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaxRuleService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRule</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TaxRule</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TaxRule.
             <code><![CDATA[
             TList<TaxRule> list = new TList<TaxRule>();
             TaxRule entity = new TaxRule();
             entity.StringProperty = "foo";
             TaxRule entity2 = new TaxRule();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxRuleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 taxRuleID
            </summary>
            <param name="taxRuleID">TaxRule pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoadByTaxRuleID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="taxRuleID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxRule Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TaxRule Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TaxRule Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxRule Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRule)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TaxRule Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxRule,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TaxRule object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TaxRule Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TaxRule</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TaxRule} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TaxRule Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.TaxRuleServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxRuleService">
            <summary>
             An component type implementation of the 'ZNodeTaxRule' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleService.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProcessorEventArgs.#ctor(ZNode.Libraries.DataAccess.Service.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductCategoryService">
            <summary>
             An component type implementation of the 'ZNodeProductCategory' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductCategoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderLineItemService">
            <summary>
             An component type implementation of the 'ZNodeOrderLineItem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderLineItemService.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeCaseType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CaseType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.CreateCaseType(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> instance.
            </summary>
            <param name="caseTypeID"></param>
            <param name="caseTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.CaseTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetByCaseTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CaseType index.
            </summary>
            <param name="caseTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetByCaseTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_CaseType index.
            </summary>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CaseType} of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CaseType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	public virtualmethod that Inserts a CaseType object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseType object to Insert.</param>
            <remarks>After Inserting into the datasource, the CaseType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CaseType entity = new CaseType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CaseTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CaseType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CaseType.
             <code><![CDATA[
             TList<CaseType> list = new TList<CaseType>();
             CaseType entity = new CaseType();
             entity.StringProperty = "foo";
             CaseType entity2 = new CaseType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	public virtualmethod that Updates a CaseType object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseType object to Update.</param>
            <remarks>After Updateing into the datasource, the CaseType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CaseType entity = CaseTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CaseTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CaseType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CaseType.
             <code><![CDATA[
             TList<CaseType> list = new TList<CaseType>();
             CaseType entity = new CaseType();
             entity.StringProperty = "foo";
             CaseType entity2 = new CaseType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	public virtualmethod that Saves a CaseType object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseType object to Save.</param>
            <remarks>After Saveing into the datasource, the CaseType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CaseType entity = CaseTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CaseTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CaseType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CaseType.
             <code><![CDATA[
             TList<CaseType> list = new TList<CaseType>();
             CaseType entity = new CaseType();
             entity.StringProperty = "foo";
             CaseType entity2 = new CaseType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	public virtualmethod that Deletes a CaseType object into the datasource using a transaction.
            </summary>
            <param name="entity">CaseType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CaseType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CaseType entity = CaseTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CaseTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CaseType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CaseType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CaseType.
             <code><![CDATA[
             TList<CaseType> list = new TList<CaseType>();
             CaseType entity = new CaseType();
             entity.StringProperty = "foo";
             CaseType entity2 = new CaseType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CaseTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.CaseTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 caseTypeID
            </summary>
            <param name="caseTypeID">CaseType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoadByCaseTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="caseTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CaseType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CaseType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CaseType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.CaseType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CaseType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.CaseType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CaseType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CaseType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CaseType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CaseType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CaseType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.CaseTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ContentPageRevisionService">
            <summary>
             An component type implementation of the 'ZNodeContentPageRevision' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ContentPageRevisionService.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ShippingService">
            <summary>
             An component type implementation of the 'ZNodeShipping' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ShippingService.#ctor">
            <summary>
            Initializes a new instance of the ShippingService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeDiscountType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DiscountType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.CreateDiscountType(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> instance.
            </summary>
            <param name="discountTypeID"></param>
            <param name="className"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.DiscountTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetByDiscountTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeDiscountType index.
            </summary>
            <param name="discountTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeDiscountType index.
            </summary>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DiscountType} of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DiscountType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	public virtualmethod that Inserts a DiscountType object into the datasource using a transaction.
            </summary>
            <param name="entity">DiscountType object to Insert.</param>
            <remarks>After Inserting into the datasource, the DiscountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DiscountType entity = new DiscountType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DiscountTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiscountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DiscountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DiscountType.
             <code><![CDATA[
             TList<DiscountType> list = new TList<DiscountType>();
             DiscountType entity = new DiscountType();
             entity.StringProperty = "foo";
             DiscountType entity2 = new DiscountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiscountTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	public virtualmethod that Updates a DiscountType object into the datasource using a transaction.
            </summary>
            <param name="entity">DiscountType object to Update.</param>
            <remarks>After Updateing into the datasource, the DiscountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DiscountType entity = DiscountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DiscountTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiscountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DiscountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DiscountType.
             <code><![CDATA[
             TList<DiscountType> list = new TList<DiscountType>();
             DiscountType entity = new DiscountType();
             entity.StringProperty = "foo";
             DiscountType entity2 = new DiscountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiscountTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	public virtualmethod that Saves a DiscountType object into the datasource using a transaction.
            </summary>
            <param name="entity">DiscountType object to Save.</param>
            <remarks>After Saveing into the datasource, the DiscountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DiscountType entity = DiscountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DiscountTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiscountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DiscountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DiscountType.
             <code><![CDATA[
             TList<DiscountType> list = new TList<DiscountType>();
             DiscountType entity = new DiscountType();
             entity.StringProperty = "foo";
             DiscountType entity2 = new DiscountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiscountTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	public virtualmethod that Deletes a DiscountType object into the datasource using a transaction.
            </summary>
            <param name="entity">DiscountType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DiscountType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DiscountType entity = DiscountTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DiscountTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiscountType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DiscountType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DiscountType.
             <code><![CDATA[
             TList<DiscountType> list = new TList<DiscountType>();
             DiscountType entity = new DiscountType();
             entity.StringProperty = "foo";
             DiscountType entity2 = new DiscountType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiscountTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.DiscountTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 discountTypeID
            </summary>
            <param name="discountTypeID">DiscountType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoadByDiscountTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="discountTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DiscountType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DiscountType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DiscountType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DiscountType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.DiscountType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DiscountType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.DiscountType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DiscountType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DiscountType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DiscountType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DiscountType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DiscountType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.DiscountTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentSettingService">
            <summary>
             An component type implementation of the 'ZNodePaymentSetting' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentSettingService.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ActivityLogService">
            <summary>
             An component type implementation of the 'ZNodeActivityLog' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ActivityLogService.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.CaseTypeService">
            <summary>
             An component type implementation of the 'ZNodeCaseType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.CaseTypeService.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase">
            <summary>
             An object representation of the 'ZNodeSKUAttribute' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SKUAttribute.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.CreateSKUAttribute(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> instance.
            </summary>
            <param name="sKUID"></param>
            <param name="attributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetByAttributeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="attributeId"></param>
            <returns>Returns a generic collection of SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetByAttributeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetBySKUID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="sKUID"></param>
            <returns>Returns a generic collection of SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetBySKUID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.SKUAttributeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetByAttributeIdSKUID(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key ix1 index.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetByAttributeIdSKUID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key ix1 index.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetBySKUAttributeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_SKUAttribute index.
            </summary>
            <param name="sKUAttributeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetBySKUAttributeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_SKUAttribute index.
            </summary>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SKUAttribute} of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SKUAttribute</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	public virtualmethod that Inserts a SKUAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">SKUAttribute object to Insert.</param>
            <remarks>After Inserting into the datasource, the SKUAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SKUAttribute entity = new SKUAttribute();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SKUAttributeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKUAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SKUAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SKUAttribute.
             <code><![CDATA[
             TList<SKUAttribute> list = new TList<SKUAttribute>();
             SKUAttribute entity = new SKUAttribute();
             entity.StringProperty = "foo";
             SKUAttribute entity2 = new SKUAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUAttributeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	public virtualmethod that Updates a SKUAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">SKUAttribute object to Update.</param>
            <remarks>After Updateing into the datasource, the SKUAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SKUAttribute entity = SKUAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SKUAttributeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKUAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SKUAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SKUAttribute.
             <code><![CDATA[
             TList<SKUAttribute> list = new TList<SKUAttribute>();
             SKUAttribute entity = new SKUAttribute();
             entity.StringProperty = "foo";
             SKUAttribute entity2 = new SKUAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUAttributeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	public virtualmethod that Saves a SKUAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">SKUAttribute object to Save.</param>
            <remarks>After Saveing into the datasource, the SKUAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SKUAttribute entity = SKUAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SKUAttributeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKUAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SKUAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SKUAttribute.
             <code><![CDATA[
             TList<SKUAttribute> list = new TList<SKUAttribute>();
             SKUAttribute entity = new SKUAttribute();
             entity.StringProperty = "foo";
             SKUAttribute entity2 = new SKUAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUAttributeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	public virtualmethod that Deletes a SKUAttribute object into the datasource using a transaction.
            </summary>
            <param name="entity">SKUAttribute object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SKUAttribute object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SKUAttribute entity = SKUAttributeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SKUAttributeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SKUAttribute</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SKUAttribute</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SKUAttribute.
             <code><![CDATA[
             TList<SKUAttribute> list = new TList<SKUAttribute>();
             SKUAttribute entity = new SKUAttribute();
             entity.StringProperty = "foo";
             SKUAttribute entity2 = new SKUAttribute();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SKUAttributeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SKUAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 sKUAttributeID
            </summary>
            <param name="sKUAttributeID">SKUAttribute pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoadByAttributeIdSKUID(System.Int32,System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKUAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoadBySKUAttributeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="sKUAttributeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKUAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SKUAttribute Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SKUAttribute Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SKUAttribute Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.SKUAttribute)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SKUAttribute Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.SKUAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SKUAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SKUAttribute Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SKUAttribute</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SKUAttribute} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SKUAttribute Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SKUAttributeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SupplierService">
            <summary>
             An component type implementation of the 'ZNodeSupplier' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SupplierServiceBase">
            <summary>
             An object representation of the 'ZNodeSupplier' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Supplier.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.CreateSupplier(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> instance.
            </summary>
            <param name="supplierTypeID"></param>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="contactFirstName"></param>
            <param name="contactLastName"></param>
            <param name="contactPhone"></param>
            <param name="contactEmail"></param>
            <param name="notificationEmailID"></param>
            <param name="emailNotificationTemplate"></param>
            <param name="enableEmailNotification"></param>
            <param name="displayOrder"></param>
            <param name="activeInd"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
            <param name="custom4"></param>
            <param name="custom5"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetBySupplierTypeID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="supplierTypeID"></param>
            <returns>Returns a generic collection of Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetBySupplierTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Get(ZNode.Libraries.DataAccess.Entities.SupplierKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetByExternalSupplierNoName(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeSupplier index.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetByExternalSupplierNoName(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_ZNodeSupplier index.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetBySupplierID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeSupplier index.
            </summary>
            <param name="supplierID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetBySupplierID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeSupplier index.
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Supplier} of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Supplier</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	public virtualmethod that Inserts a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Insert.</param>
            <remarks>After Inserting into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Supplier entity = new Supplier();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SupplierService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	public virtualmethod that Updates a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Update.</param>
            <remarks>After Updateing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SupplierService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	public virtualmethod that Saves a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Save.</param>
            <remarks>After Saveing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SupplierService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	public virtualmethod that Deletes a Supplier object into the datasource using a transaction.
            </summary>
            <param name="entity">Supplier object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Supplier object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Supplier entity = SupplierService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SupplierService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Supplier</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Supplier</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Supplier.
             <code><![CDATA[
             TList<Supplier> list = new TList<Supplier>();
             Supplier entity = new Supplier();
             entity.StringProperty = "foo";
             Supplier entity2 = new Supplier();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SupplierService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.SupplierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 supplierID
            </summary>
            <param name="supplierID">Supplier pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoadByExternalSupplierNoName(System.String,System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoadBySupplierID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="supplierID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Supplier Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Supplier Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Supplier)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Supplier Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Supplier,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Supplier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Supplier Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Supplier</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Supplier} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Supplier Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.SupplierServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SupplierService.#ctor">
            <summary>
            Initializes a new instance of the SupplierService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase">
            <summary>
             An object representation of the 'ZNodeTaxRuleType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TaxRuleType.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.CreateTaxRuleType(System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> instance.
            </summary>
            <param name="className"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="activeInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Get(ZNode.Libraries.DataAccess.Entities.TaxRuleTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetByTaxRuleTypeID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTaxRuleType index.
            </summary>
            <param name="taxRuleTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetByTaxRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTaxRuleType index.
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TaxRuleType} of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaxRuleType</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	public virtualmethod that Inserts a TaxRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRuleType object to Insert.</param>
            <remarks>After Inserting into the datasource, the TaxRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TaxRuleType entity = new TaxRuleType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaxRuleTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TaxRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TaxRuleType.
             <code><![CDATA[
             TList<TaxRuleType> list = new TList<TaxRuleType>();
             TaxRuleType entity = new TaxRuleType();
             entity.StringProperty = "foo";
             TaxRuleType entity2 = new TaxRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	public virtualmethod that Updates a TaxRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRuleType object to Update.</param>
            <remarks>After Updateing into the datasource, the TaxRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TaxRuleType entity = TaxRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaxRuleTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TaxRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TaxRuleType.
             <code><![CDATA[
             TList<TaxRuleType> list = new TList<TaxRuleType>();
             TaxRuleType entity = new TaxRuleType();
             entity.StringProperty = "foo";
             TaxRuleType entity2 = new TaxRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	public virtualmethod that Saves a TaxRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRuleType object to Save.</param>
            <remarks>After Saveing into the datasource, the TaxRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TaxRuleType entity = TaxRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaxRuleTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TaxRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TaxRuleType.
             <code><![CDATA[
             TList<TaxRuleType> list = new TList<TaxRuleType>();
             TaxRuleType entity = new TaxRuleType();
             entity.StringProperty = "foo";
             TaxRuleType entity2 = new TaxRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	public virtualmethod that Deletes a TaxRuleType object into the datasource using a transaction.
            </summary>
            <param name="entity">TaxRuleType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TaxRuleType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TaxRuleType entity = TaxRuleTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaxRuleTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaxRuleType</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TaxRuleType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TaxRuleType.
             <code><![CDATA[
             TList<TaxRuleType> list = new TList<TaxRuleType>();
             TaxRuleType entity = new TaxRuleType();
             entity.StringProperty = "foo";
             TaxRuleType entity2 = new TaxRuleType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaxRuleTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TaxRuleTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 taxRuleTypeID
            </summary>
            <param name="taxRuleTypeID">TaxRuleType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoadByTaxRuleTypeID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxRuleType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TaxRuleType Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TaxRuleType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaxRuleType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TaxRuleType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TaxRuleType Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TaxRuleType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TaxRuleType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TaxRuleType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TaxRuleType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TaxRuleType} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TaxRuleType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.TaxRuleTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderStateService">
            <summary>
             An component type implementation of the 'ZNodeOrderState' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase">
            <summary>
             An object representation of the 'ZNodeOrderState' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OrderState.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.CreateOrderState(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> instance.
            </summary>
            <param name="orderStateID"></param>
            <param name="orderStateName"></param>
            <param name="description"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Get(ZNode.Libraries.DataAccess.Entities.OrderStateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetByOrderStateID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_OrderState_PK index.
            </summary>
            <param name="orderStateID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetByOrderStateID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key SC_OrderState_PK index.
            </summary>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OrderState} of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OrderState</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	public virtualmethod that Inserts a OrderState object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderState object to Insert.</param>
            <remarks>After Inserting into the datasource, the OrderState object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OrderState entity = new OrderState();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OrderStateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderState</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OrderState</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OrderState.
             <code><![CDATA[
             TList<OrderState> list = new TList<OrderState>();
             OrderState entity = new OrderState();
             entity.StringProperty = "foo";
             OrderState entity2 = new OrderState();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Update(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	public virtualmethod that Updates a OrderState object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderState object to Update.</param>
            <remarks>After Updateing into the datasource, the OrderState object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OrderState entity = OrderStateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OrderStateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderState</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OrderState</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OrderState.
             <code><![CDATA[
             TList<OrderState> list = new TList<OrderState>();
             OrderState entity = new OrderState();
             entity.StringProperty = "foo";
             OrderState entity2 = new OrderState();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Save(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	public virtualmethod that Saves a OrderState object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderState object to Save.</param>
            <remarks>After Saveing into the datasource, the OrderState object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OrderState entity = OrderStateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OrderStateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderState</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OrderState</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OrderState.
             <code><![CDATA[
             TList<OrderState> list = new TList<OrderState>();
             OrderState entity = new OrderState();
             entity.StringProperty = "foo";
             OrderState entity2 = new OrderState();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	public virtualmethod that Deletes a OrderState object into the datasource using a transaction.
            </summary>
            <param name="entity">OrderState object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OrderState object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OrderState entity = OrderStateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OrderStateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OrderState</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OrderState</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OrderState.
             <code><![CDATA[
             TList<OrderState> list = new TList<OrderState>();
             OrderState entity = new OrderState();
             entity.StringProperty = "foo";
             OrderState entity2 = new OrderState();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OrderStateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.OrderStateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 orderStateID
            </summary>
            <param name="orderStateID">OrderState pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoadByOrderStateID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="orderStateID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderState Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OrderState Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OrderState Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OrderState Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.OrderState)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OrderState Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.OrderState,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OrderState object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OrderState Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OrderState</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OrderState} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OrderState Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.OrderStateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.OrderStateService.#ctor">
            <summary>
            Initializes a new instance of the OrderStateService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PromotionService">
            <summary>
             An component type implementation of the 'ZNodePromotion' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PromotionService.#ctor">
            <summary>
            Initializes a new instance of the PromotionService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase">
            <summary>
             An object representation of the 'ZNodeTrackingEvent' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TrackingEvent.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.CreateTrackingEvent(System.Int32,System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> instance.
            </summary>
            <param name="trackingID"></param>
            <param name="date"></param>
            <param name="safeNameEvent"></param>
            <param name="refererDomain"></param>
            <param name="refererQuery"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetByTrackingID(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="trackingID"></param>
            <returns>Returns a generic collection of TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetByTrackingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Get(ZNode.Libraries.DataAccess.Entities.TrackingEventKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetByTrackingEventID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTrackingEvent index.
            </summary>
            <param name="trackingEventID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetByTrackingEventID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_ZNodeTrackingEvent index.
            </summary>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TrackingEvent} of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TrackingEvent</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	public virtualmethod that Inserts a TrackingEvent object into the datasource using a transaction.
            </summary>
            <param name="entity">TrackingEvent object to Insert.</param>
            <remarks>After Inserting into the datasource, the TrackingEvent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TrackingEvent entity = new TrackingEvent();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TrackingEventService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TrackingEvent</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TrackingEvent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TrackingEvent.
             <code><![CDATA[
             TList<TrackingEvent> list = new TList<TrackingEvent>();
             TrackingEvent entity = new TrackingEvent();
             entity.StringProperty = "foo";
             TrackingEvent entity2 = new TrackingEvent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingEventService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	public virtualmethod that Updates a TrackingEvent object into the datasource using a transaction.
            </summary>
            <param name="entity">TrackingEvent object to Update.</param>
            <remarks>After Updateing into the datasource, the TrackingEvent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TrackingEvent entity = TrackingEventService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TrackingEventService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TrackingEvent</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TrackingEvent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TrackingEvent.
             <code><![CDATA[
             TList<TrackingEvent> list = new TList<TrackingEvent>();
             TrackingEvent entity = new TrackingEvent();
             entity.StringProperty = "foo";
             TrackingEvent entity2 = new TrackingEvent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingEventService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	public virtualmethod that Saves a TrackingEvent object into the datasource using a transaction.
            </summary>
            <param name="entity">TrackingEvent object to Save.</param>
            <remarks>After Saveing into the datasource, the TrackingEvent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TrackingEvent entity = TrackingEventService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TrackingEventService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TrackingEvent</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TrackingEvent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TrackingEvent.
             <code><![CDATA[
             TList<TrackingEvent> list = new TList<TrackingEvent>();
             TrackingEvent entity = new TrackingEvent();
             entity.StringProperty = "foo";
             TrackingEvent entity2 = new TrackingEvent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingEventService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	public virtualmethod that Deletes a TrackingEvent object into the datasource using a transaction.
            </summary>
            <param name="entity">TrackingEvent object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TrackingEvent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TrackingEvent entity = TrackingEventService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TrackingEventService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TrackingEvent</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TrackingEvent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TrackingEvent.
             <code><![CDATA[
             TList<TrackingEvent> list = new TList<TrackingEvent>();
             TrackingEvent entity = new TrackingEvent();
             entity.StringProperty = "foo";
             TrackingEvent entity2 = new TrackingEvent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrackingEventService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TrackingEventKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 trackingEventID
            </summary>
            <param name="trackingEventID">TrackingEvent pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoadByTrackingEventID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="trackingEventID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TrackingEvent Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TrackingEvent Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TrackingEvent Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TrackingEvent Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TrackingEvent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TrackingEvent Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TrackingEvent,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TrackingEvent object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TrackingEvent Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TrackingEvent</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TrackingEvent} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TrackingEvent Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.TrackingEventServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxRuleTypeService">
            <summary>
             An component type implementation of the 'ZNodeTaxRuleType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxRuleTypeService.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProductHighlightService">
            <summary>
             An component type implementation of the 'ZNodeProductHighlight' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProductHighlightService.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.SKUAttributeService">
            <summary>
             An component type implementation of the 'ZNodeSKUAttribute' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.SKUAttributeService.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TrackingEventService">
            <summary>
             An component type implementation of the 'ZNodeTrackingEvent' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TrackingEventService.#ctor">
            <summary>
            Initializes a new instance of the TrackingEventService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProfileService">
            <summary>
             An component type implementation of the 'ZNodeProfile' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.ProfileServiceBase">
            <summary>
             An object representation of the 'ZNodeProfile' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Profile.cs file instead.
             All custom implementations should be done in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> instance .
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.CreateProfile(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> instance.
            </summary>
            <param name="portalID"></param>
            <param name="defaultExternalAccountNo"></param>
            <param name="name"></param>
            <param name="isDefault"></param>
            <param name="isAnonymous"></param>
            <param name="useWholesalePricing"></param>
            <param name="emailList"></param>
            <param name="taxExempt"></param>
            <param name="taxClassID"></param>
            <param name="showPricing"></param>
            <param name="showOnPartnerSignup"></param>
            <param name="custom1"></param>
            <param name="custom2"></param>
            <param name="custom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a generic collection of Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Get(ZNode.Libraries.DataAccess.Entities.ProfileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByIsDefault(System.Boolean)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Default index.
            </summary>
            <param name="isDefault"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByIsDefault(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Default index.
            </summary>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByProfileID(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Profile index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetByProfileID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the datasource based on the primary key PK_SC_Profile index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Profile} of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Profile</c> objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	public virtualmethod that Inserts a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Insert.</param>
            <remarks>After Inserting into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Profile entity = new Profile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Insert(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Update(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	public virtualmethod that Updates a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Update.</param>
            <remarks>After Updateing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Update(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Save(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	public virtualmethod that Saves a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Save.</param>
            <remarks>After Saveing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProfileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Save(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	public virtualmethod that Deletes a Profile object into the datasource using a transaction.
            </summary>
            <param name="entity">Profile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Profile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Profile entity = ProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Profile</c> objects in a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Profile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Profile.
             <code><![CDATA[
             TList<Profile> list = new TList<Profile>();
             Profile entity = new Profile();
             entity.StringProperty = "foo";
             Profile entity2 = new Profile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Delete(ZNode.Libraries.DataAccess.Entities.ProfileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 profileID
            </summary>
            <param name="profileID">Profile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoadByIsDefault(System.Boolean,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="isDefault"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoadByName(System.String,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="name"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoadByProfileID(System.Int32,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <param name="profileID"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Profile Object</param>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Profile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.Profile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            public virtualDeep Saves the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Profile Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.Profile,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Profile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Profile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Profile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
            <summary>
            Deep Save the entire <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Profile} Object</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Profile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Service.ProfileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.ProfileService.#ctor">
            <summary>
            Initializes a new instance of the ProfileService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.DiscountTypeService">
            <summary>
             An component type implementation of the 'ZNodeDiscountType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.DiscountTypeService.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.TaxClassService">
            <summary>
             An component type implementation of the 'ZNodeTaxClass' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.TaxClassService.#ctor">
            <summary>
            Initializes a new instance of the TaxClassService class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Service.PaymentTypeService">
            <summary>
             An component type implementation of the 'ZNodePaymentType' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Service.PaymentTypeService.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeService class.
            </summary>
        </member>
    </members>
</doc>
