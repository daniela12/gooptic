<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZNode.Libraries.DataAccess.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="highlightID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Highlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Highlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Highlight objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Highlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Highlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Highlight object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Highlight object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Highlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Highlight object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Highlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productCategoryID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.GetByProductCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCategory object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountPaymentID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.GetByAccountPaymentID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AccountPayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.AccountPayment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountPayment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AccountPayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountPayment object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.AccountPayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="highlightTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.HighlightType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.HighlightType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.HighlightType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.HighlightType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.HighlightType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.HighlightType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.HighlightType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.HighlightType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.HighlightType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.HighlightType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderProcessingTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderProcessingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderProcessingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderProcessingType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderProcessingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.GetByOrderProcessingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderProcessingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.OrderProcessingType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderProcessingType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderProcessingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderProcessingType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.OrderProcessingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="addOnValueID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AddOnValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.AddOnValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOnValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AddOnValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOnValue object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.AddOnValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="manufacturerID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Manufacturer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Manufacturer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Manufacturer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Manufacturer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Manufacturer object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Manufacturer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="savedPaymentMethodID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.GetBySavedPaymentMethodID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSavedPaymentMethodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AccountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.AccountType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AccountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.AccountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="sKUAttributeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetByAttributeIdSKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.GetBySKUAttributeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SKUAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.SKUAttribute object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKUAttribute object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SKUAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKUAttribute object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.SKUAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxRuleID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.GetByTaxRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.TaxRule object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRule object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRule object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByProductTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByProductNum(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByHomepageSpecialPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Product object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Product object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Product object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="noteID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.GetByNoteID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Note object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Note object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Note object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Note object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Note object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Note object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNoteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="passwordLogID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PasswordLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PasswordLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PasswordLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PasswordLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.GetByPasswordLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PasswordLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.PasswordLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PasswordLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PasswordLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PasswordLog object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.PasswordLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPasswordLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProcessingTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="revisionID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.GetByRevisionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPageRevision object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ContentPageRevision object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPageRevision object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPageRevision object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPageRevision object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPageRevision object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUAttributeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="supplierTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SupplierType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SupplierType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SupplierType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SupplierType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SupplierType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.SupplierType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SupplierType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SupplierType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SupplierType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.SupplierType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.PaymentType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="referralCommissionTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ReferralCommissionType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ReferralCommissionType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ReferralCommissionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ReferralCommissionType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="reviewID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.GetByReviewID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Review object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Review object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Review object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Review object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Review object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Review object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="iPCommerceID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.IPCommerce objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.IPCommerce objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.IPCommerce objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.IPCommerce objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.GetByIPCommerceID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.IPCommerce object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.IPCommerce object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.IPCommerce object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.IPCommerce object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.IPCommerce object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.IPCommerce object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productCrossSellTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.GetByProductId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.GetByProductCrossSellTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCrossSell object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductCrossSell object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCrossSell object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCrossSell object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCrossSell object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductCrossSell object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductCrossSellProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountPaymentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="zipCodeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ZipCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ZipCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ZipCode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ZipCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByAreaCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByCityName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByCountyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByLatitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByLongitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByStateAbbr(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByStateName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByZIP(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.GetByZipCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ZipCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ZipCode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ZipCode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ZipCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ZipCode object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ZipCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="activityLogTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLogType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLogType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLogType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLogType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.GetByTypeCategory(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLogType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ActivityLogType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLogType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLogType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLogType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLogType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseStatusID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.CaseStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseStatus object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.CaseStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="trackingID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Tracking objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Tracking objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Tracking objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Tracking objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Tracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Tracking object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Tracking object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Tracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Tracking object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Tracking object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlIPCommerceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentSettingID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetByProfileIDPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentSetting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.PaymentSetting object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentSetting object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentSetting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentSetting object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentSetting object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentSettingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByOwnerAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByTitleFirstNameLastNameCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByAccountIDCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.CaseRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseRequest object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.CaseRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="activityLogID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetByData1(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetByData2(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetByData3(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.GetByActivityLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ActivityLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLog object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ActivityLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contentPageID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ContentPage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPage object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ContentPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productImageTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImageType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImageType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImageType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImageType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImageType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductImageType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImageType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImageType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImageType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImageType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productAttributeTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.GetByProductAttributeTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTypeAttributeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderStateID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderState objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderState objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderState objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderState objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderState object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.OrderState object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderState object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderState object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderState object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.OrderState object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderStateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="profileID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetByIsDefault(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Profile object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Profile object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Profile object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Profile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProfileProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ShippingType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productImageID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetByProductIDActiveIndProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.GetByProductImageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductImage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImage object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductImage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="casePriorityID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CasePriority objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CasePriority objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CasePriority objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CasePriority objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CasePriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.CasePriority object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CasePriority object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CasePriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CasePriority object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.CasePriority object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Shipping object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Shipping object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Shipping object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Shipping object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Shipping object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Shipping object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ShippingTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProfileProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProfileProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProfileProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ReferralCommissionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlReferralCommissionTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlReferralCommissionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ShippingRuleTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingRuleTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingRuleTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.OrderStateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderStateProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderStateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PortalProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPortalProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPortalProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductTypeAttributeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeAttributeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeAttributeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SavedPaymentMethodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSavedPaymentMethodProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSavedPaymentMethodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ManufacturerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlManufacturerProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlManufacturerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PaymentTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductAttributeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductAttributeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductAttributeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.TaxClassProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxClassProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxClassProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductImageTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductImageTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductImageTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ShippingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CurrencyTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCurrencyTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.TaxRuleTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxRuleTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxRuleTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.TaxRuleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxRuleProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTaxRuleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.TrackingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTrackingProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTrackingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.TrackingEventProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTrackingEventProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlTrackingEventProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.UrlRedirectProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlUrlRedirectProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlUrlRedirectProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SupplierTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSupplierTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSupplierTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SupplierProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSupplierProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ShippingRuleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingRuleProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingRuleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ShippingServiceCodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingServiceCodeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlShippingServiceCodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.StateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStateProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.StoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStoreProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.StorefrontProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStorefrontProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlStorefrontProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PaymentStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentStatusProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SKUProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSKUProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSKUProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.WishListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlWishListProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlWishListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SKUAttributeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSKUAttributeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlSKUAttributeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ContentPageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlContentPageProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlContentPageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CountryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCountryProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCountryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ContentPageRevisionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlContentPageRevisionProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlContentPageRevisionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CaseTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.GatewayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlGatewayProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlGatewayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CaseStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseStatusProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ActivityLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlActivityLogProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlActivityLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AccountTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CaseRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseRequestProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCaseRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ActivityLogTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlActivityLogTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlActivityLogTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AddOnProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAddOnProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAddOnProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.CasePriorityProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCasePriorityProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlCasePriorityProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AddOnValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAddOnValueProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAddOnValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PaymentSettingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentSettingProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPaymentSettingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AttributeTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAttributeTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAttributeTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.OrderLineItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderLineItemProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderLineItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.DiscountTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlDiscountTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlDiscountTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductAddOnProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductAddOnProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductAddOnProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.OrderProcessingTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderProcessingTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderProcessingTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.OrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PasswordLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPasswordLogProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPasswordLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ZipCodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlZipCodeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlZipCodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.HighlightTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlHighlightTypeProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlHighlightTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.AccountPaymentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountPaymentProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlAccountPaymentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductCategoryProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.HighlightProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlHighlightProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlHighlightProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.PromotionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPromotionProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlPromotionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductCrossSellProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductCrossSellProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductCrossSellProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.IPCommerceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlIPCommerceProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlIPCommerceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ReviewProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlReviewProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlReviewProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductTierProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTierProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductTierProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductHighlightProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductHighlightProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductHighlightProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.NoteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlNoteProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlNoteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.DigitalAssetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlDigitalAssetProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlDigitalAssetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.ProductImageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductImageProvider">
            <summary>
            Gets the current <c cref="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlNetTiersProvider.SqlProductImageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productTierID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.GetByProductTierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductTier object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTier object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTier object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductTier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductTierProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlZipCodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Order object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Order object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Order object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="discountTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DiscountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DiscountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DiscountType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DiscountType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.DiscountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.DiscountType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DiscountType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.DiscountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DiscountType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.DiscountType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDiscountTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageRevisionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingServiceCodeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.GetByShippingServiceCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingRuleID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.GetByShippingRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ShippingRule object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRule object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRule object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingRuleTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRuleType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ShippingRuleType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRuleType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRuleType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ShippingRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingRuleTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="promotionID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.GetByPromotionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Promotion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Promotion object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Promotion object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Promotion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Promotion object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Promotion object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPromotionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderLineItemID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetByParentOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentOrderLineItemID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderLineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.OrderLineItem object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderLineItem object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.OrderLineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderLineItem object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.OrderLineItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCasePriorityProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="code">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Country objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Country objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Country objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Country objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Country object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Country object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Country object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Country object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCountryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="sKUID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SKU object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.SKU object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKU object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.SKU object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKU object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.SKU object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSKUProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="trackingEventID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.GetByTrackingEventID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TrackingEvent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.TrackingEvent object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TrackingEvent object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TrackingEvent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TrackingEvent object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.TrackingEvent object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="currencyTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CurrencyType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CurrencyType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CurrencyType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CurrencyType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CurrencyType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.CurrencyType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CurrencyType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CurrencyType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CurrencyType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.CurrencyType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCurrencyTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlManufacturerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productHighlightID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductHighlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductHighlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductHighlight objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductHighlight objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.GetByProductHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductHighlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductHighlight object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductHighlight object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductHighlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductHighlight object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductHighlight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductHighlightProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="gatewayTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Gateway objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Gateway objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Gateway objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Gateway objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Gateway object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Gateway object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Gateway object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Gateway object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Gateway object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Gateway object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlGatewayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="iD">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Storefront objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Storefront objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Storefront objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Storefront objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.GetByID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Storefront object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Storefront object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Storefront object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Storefront object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Storefront object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Storefront object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="code">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.State objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.State objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.State objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.State objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.State object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.State object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.State object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.State object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="supplierID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.GetByExternalSupplierNoName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Supplier object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Supplier object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Supplier object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Supplier object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTrackingEventProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReviewProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="wishListID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.GetByWishListID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.WishList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.WishList object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.WishList object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.WishList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.WishList object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.WishList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlWishListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStorefrontProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByParentAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Account object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Account object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Account object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="digitalAssetID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.GetByDigitalAssetID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.DigitalAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.DigitalAsset object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DigitalAsset object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.DigitalAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DigitalAsset object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.DigitalAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlDigitalAssetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attributeTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AttributeType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AttributeType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AttributeType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AttributeType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AttributeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.AttributeType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AttributeType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AttributeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AttributeType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.AttributeType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAttributeTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAccountTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.CaseType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.CaseType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.CaseType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentStatusID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentStatus objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.PaymentStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentStatus object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.PaymentStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxRuleTypeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRuleType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRuleType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.TaxRuleType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRuleType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRuleType object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.TaxRuleType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="portalID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetByDefaultOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="defaultOrderStateID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetByActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Portal object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Portal object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Portal object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPortalProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlOrderLineItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="addOnID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOn objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.AddOn object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOn object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.AddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOn object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.AddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlPaymentStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="storeID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.GetByStoreID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Store object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Store object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Store object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlStateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlReferralCommissionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productAddOnID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.GetByProductAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductAddOn object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAddOn object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAddOn object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAddOn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="categoryID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetByParentCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentCategoryID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.Category object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Category object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Category object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Category object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="urlRedirectID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.UrlRedirect objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.UrlRedirect objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.UrlRedirect objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.UrlRedirect objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.GetByUrlRedirectID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.UrlRedirect object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.UrlRedirect object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.UrlRedirect object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.UrlRedirect object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.UrlRedirect object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.UrlRedirect object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxRuleTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxClassID">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxClass objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxClass objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxClass objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxClass objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxClass object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.TaxClass object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxClass object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.TaxClass object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxClass object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.TaxClass object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlTaxClassProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attributeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAttribute objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	Inserts a ZNode.Libraries.DataAccess.Entities.ProductAttribute object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAttribute object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAttribute object to update.</param>
            <remarks>
            	After updating the datasource, the ZNode.Libraries.DataAccess.Entities.ProductAttribute object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAttributeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlCaseRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlSupplierTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlUrlRedirectProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductImageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlHighlightProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlAddOnValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlContentPageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingServiceCodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlShippingTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlProductAddOnProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ZNode.Libraries.DataAccess.Data.SqlClient.SqlActivityLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
