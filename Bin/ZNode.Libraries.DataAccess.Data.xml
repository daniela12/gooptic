<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZNode.Libraries.DataAccess.Data</name>
    </assembly>
    <members>
        <member name="T:ZNode.Libraries.DataAccess.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.BeginTransaction">
            <summary>
            	Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            	Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.Commit">
            <summary>
            	Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.TransactionManager.ConnectionString">
            <summary>
            	Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:ZNode.Libraries.DataAccess.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityProvider`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> or <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Insert(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Insert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.BulkInsert(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.BulkInsert(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Update(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Update(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Save(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Save(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Save(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,`0,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,`0,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0},System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,`0,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,`0,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>DeepSession</c> of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Entities.TList{`0},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TList{`0},ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(ZNode.Libraries.DataAccess.Entities.IEntity,System.String,ZNode.Libraries.DataAccess.Data.DeepLoadType,ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,ZNode.Libraries.DataAccess.Data.DeepSaveType,ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            	<c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(ZNode.Libraries.DataAccess.Data.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.OnDataRequesting(ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.OnDataRequested(ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.OnDeepLoading(ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.OnDeepSaving(ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productTierID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTierID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	fKZNodeProductTierZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	fKZNodeProductTierZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductTier_ZNodeProduct key.
            	FK_ZNodeProductTier_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTierKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductTier index.
            </summary>
            <param name="productTierID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTierID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.GetByProductTierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductTier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTier},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductTier&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductTier)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTier,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductTier Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTier,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductTier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTier instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductTier Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductTier</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductTierChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTierFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.ZNode#Libraries#DataAccess#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTierParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTierParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productCrossSellTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCrossSellTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="productId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	fKSCProductCrossSellTypeSCProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	fKSCProductCrossSellTypeSCProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCrossSellType_SC_Product key.
            	FK_SC_ProductCrossSellType_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCrossSell objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ProductCrossSellType index.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCrossSellTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.GetByProductCrossSellTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductCrossSellType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCrossSellTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCrossSell},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductCrossSell&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSell,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductCrossSell Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCrossSell,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductCrossSell object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCrossSell instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductCrossSell Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	fKSCOrderPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	fKSCOrderPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_Portals key.
            	FK_SC_Order_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="shippingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	fKSCOrderSCShipping Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	fKSCOrderSCShipping Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
            	FK_SC_Order_SC_Shipping Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	fKZNodeOrderZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralAccountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	fKZNodeOrderZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeAccount key.
            	FK_ZNodeOrder_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	fKZNodeOrderZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentSettingID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	fKZNodeOrderZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentSettingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentSetting key.
            	FK_ZNodeOrder_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	fKZNodeOrderZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentStatusID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	fKZNodeOrderZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentStatusID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodePaymentStatus key.
            	FK_ZNodeOrder_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="orderStateID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	sCOrderStateSCOrderFK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderStateID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	sCOrderStateSCOrderFK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderStateID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
            	SC_OrderState_SC_Order_FK1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Account index.
            </summary>
            <param name="accountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_Order_PK index.
            </summary>
            <param name="orderID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Order_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Order},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Order&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Order,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Order Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Order,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Order object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Order instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Order Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Order</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIdSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.Shipping">
            <summary>
             Composite Property for <c>Shipping</c> at ShippingIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.Order">
            <summary>
             Composite Property for <c>Order</c> at OrderIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.PaymentSetting">
            <summary>
             Composite Property for <c>PaymentSetting</c> at PaymentSettingIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.PaymentStatus">
            <summary>
             Composite Property for <c>PaymentStatus</c> at PaymentStatusIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.OrderState">
            <summary>
             Composite Property for <c>OrderState</c> at OrderStateIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.OrderLineItemCollection">
            <summary>
             Collection of <c>Order</c> as OneToMany for OrderLineItemCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderChildEntityTypes.AccountPaymentCollection">
            <summary>
             Collection of <c>Order</c> as OneToMany for AccountPaymentCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AccountType index.
            </summary>
            <param name="accountTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;AccountType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AccountType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.AccountType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AccountType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.AccountType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeChildEntityTypes.AccountCollection">
            <summary>
             Collection of <c>AccountType</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="activityLogID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="activityLogTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	fKZNodeActivityLogZNodeActivityLogType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="activityLogTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	fKZNodeActivityLogZNodeActivityLogType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="activityLogTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeActivityLog_ZNodeActivityLogType key.
            	FK_ZNodeActivityLog_ZNodeActivityLogType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ActivityLog objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Data1 index.
            </summary>
            <param name="data1"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data1"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData1(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data1"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Data2 index.
            </summary>
            <param name="data2"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data2"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData2(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data2"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Data3 index.
            </summary>
            <param name="data3"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data3"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByData3(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Data3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="data3"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeActivityLog index.
            </summary>
            <param name="activityLogID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.GetByActivityLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeActivityLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLog},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ActivityLog&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ActivityLog)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLog,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ActivityLog Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLog,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ActivityLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLog instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ActivityLog Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_CaseType index.
            </summary>
            <param name="caseTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;CaseType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.CaseType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.CaseType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeChildEntityTypes.CaseRequestCollection">
            <summary>
             Collection of <c>CaseType</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StoreKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="storeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="storeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	fKZNodeStoreZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	fKZNodeStoreZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeStore_ZNodeAccount key.
            	FK_ZNodeStore_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Store objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StoreKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Store index.
            </summary>
            <param name="storeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="storeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.GetByStoreID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Store index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="storeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Store},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Store&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Store,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Store Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Store,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Store object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Store instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Store Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StoreChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Store</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.StoreChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StoreFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StoreParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StoreParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClassKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxClassID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClassKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ZNodeTaxClass index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeTaxClass index.
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxClass index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxClass},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;TaxClass&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.TaxClass)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClass,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxClass Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxClass,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.TaxClass object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxClass instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxClass Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.TaxClass</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxClassChildEntityTypes.ProfileCollection">
            <summary>
             Collection of <c>TaxClass</c> as OneToMany for ProfileCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxClassChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>TaxClass</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxClassChildEntityTypes.TaxRuleCollection">
            <summary>
             Collection of <c>TaxClass</c> as OneToMany for TaxRuleCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxClassChildEntityTypes.AddOnValueCollection">
            <summary>
             Collection of <c>TaxClass</c> as OneToMany for AddOnValueCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxClassFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxClassParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxClassParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attributeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttributeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_1 index.
            </summary>
            <param name="attributeTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Attribute index.
            </summary>
            <param name="attributeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Attribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAttribute},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductAttribute&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAttribute instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductAttribute Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductAttribute</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeChildEntityTypes.SKUAttributeCollection">
            <summary>
             Collection of <c>ProductAttribute</c> as OneToMany for SKUAttributeCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.#ctor(System.String,ZNode.Libraries.DataAccess.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.#ctor(System.String,ZNode.Libraries.DataAccess.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.#ctor(System.String,ZNode.Libraries.DataAccess.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.#ctor(System.String,ZNode.Libraries.DataAccess.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.#ctor(System.String,ZNode.Libraries.DataAccess.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.LoadProvider(ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.LoadProvider(ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <c cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ShippingTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProfileProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ReferralCommissionTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AccountProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ShippingRuleTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.OrderStateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PortalProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductTypeAttributeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.SavedPaymentMethodProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ManufacturerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PaymentTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductAttributeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.TaxClassProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductImageTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ShippingProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CurrencyTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.TaxRuleTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.TaxRuleProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.TrackingProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.TrackingEventProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.UrlRedirectProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.SupplierTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.SupplierProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ShippingRuleProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ShippingServiceCodeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.StateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.StoreProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.StorefrontProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PaymentStatusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.SKUProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.WishListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.SKUAttributeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ContentPageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CountryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ContentPageRevisionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CaseTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.GatewayProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CaseStatusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ActivityLogProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AccountTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CaseRequestProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ActivityLogTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AddOnProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.CasePriorityProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AddOnValueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PaymentSettingProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AttributeTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.OrderLineItemProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.DiscountTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductAddOnProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.OrderProcessingTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.OrderProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PasswordLogProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ZipCodeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.HighlightTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.AccountPaymentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductCategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.HighlightProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.PromotionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductCrossSellProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.IPCommerceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ReviewProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductTierProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductHighlightProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.NoteProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.DigitalAssetProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ProductImageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProfileFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProfileFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileFilters.#ctor">
            <summary>
            Initializes a new instance of the ProfileFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProfileQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProfileParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileQuery.#ctor">
            <summary>
            Initializes a new instance of the ProfileQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProfileQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProfileQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReferralCommissionTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReferralCommissionTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountFilters.#ctor">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountQuery.#ctor">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderStateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderStateFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderStateFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderStateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderStateParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderStateQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderStateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderStateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PortalFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PortalFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PortalFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PortalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PortalFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalFilters.#ctor">
            <summary>
            Initializes a new instance of the PortalFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PortalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PortalFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PortalQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PortalParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PortalParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PortalParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PortalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PortalParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalQuery.#ctor">
            <summary>
            Initializes a new instance of the PortalQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PortalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PortalQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PortalQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeAttributeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodFilters.#ctor">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SavedPaymentMethodParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodQuery.#ctor">
            <summary>
            Initializes a new instance of the SavedPaymentMethodQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SavedPaymentMethodQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SavedPaymentMethodQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ManufacturerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerFilters.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ManufacturerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerQuery.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ManufacturerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ManufacturerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductAttributeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductAttributeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAttributeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxClassFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassFilters.#ctor">
            <summary>
            Initializes a new instance of the TaxClassFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxClassQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxClass"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassQuery.#ctor">
            <summary>
            Initializes a new instance of the TaxClassQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxClassQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxClassQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductImageTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductImageTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductImageTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductImageTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductImageTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductImageTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippingFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippingQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CurrencyTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the CurrencyTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CurrencyTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the CurrencyTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CurrencyTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxRuleTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxRuleTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxRuleFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleFilters.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TaxRuleQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleQuery.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TaxRuleQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TaxRuleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TrackingFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrackingFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingFilters.#ctor">
            <summary>
            Initializes a new instance of the TrackingFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TrackingQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrackingParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingQuery.#ctor">
            <summary>
            Initializes a new instance of the TrackingQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TrackingEventFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrackingEventFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventFilters.#ctor">
            <summary>
            Initializes a new instance of the TrackingEventFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.TrackingEventQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrackingEventParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventQuery.#ctor">
            <summary>
            Initializes a new instance of the TrackingEventQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.TrackingEventQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrackingEventQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.UrlRedirectFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UrlRedirectFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectFilters.#ctor">
            <summary>
            Initializes a new instance of the UrlRedirectFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.UrlRedirectQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UrlRedirectParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectQuery.#ctor">
            <summary>
            Initializes a new instance of the UrlRedirectQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.UrlRedirectQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UrlRedirectQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SupplierTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SupplierTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the SupplierTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SupplierTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SupplierTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the SupplierTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SupplierFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SupplierFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierFilters.#ctor">
            <summary>
            Initializes a new instance of the SupplierFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SupplierQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SupplierParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierQuery.#ctor">
            <summary>
            Initializes a new instance of the SupplierQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SupplierQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SupplierQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingRuleFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingRuleQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingRuleQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingRuleQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ShippingServiceCodeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateFilters.#ctor">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateQuery.#ctor">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StoreFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreFilters.#ctor">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StoreQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StoreParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreQuery.#ctor">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StoreQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StorefrontFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StorefrontFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontFilters.#ctor">
            <summary>
            Initializes a new instance of the StorefrontFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StorefrontQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StorefrontParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontQuery.#ctor">
            <summary>
            Initializes a new instance of the StorefrontQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.StorefrontQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StorefrontQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentStatusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentStatusFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusFilters.#ctor">
            <summary>
            Initializes a new instance of the PaymentStatusFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentStatusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentStatusParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusQuery.#ctor">
            <summary>
            Initializes a new instance of the PaymentStatusQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentStatusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SKUFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SKUFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUFilters.#ctor">
            <summary>
            Initializes a new instance of the SKUFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SKUQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SKUParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUQuery.#ctor">
            <summary>
            Initializes a new instance of the SKUQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.WishListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.WishListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WishListFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WishListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WishListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListFilters.#ctor">
            <summary>
            Initializes a new instance of the WishListFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WishListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WishListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.WishListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.WishListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.WishListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the WishListParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WishListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WishListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListQuery.#ctor">
            <summary>
            Initializes a new instance of the WishListQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WishListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.WishListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the WishListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the CategoryFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the CategoryQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SKUAttributeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeFilters.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SKUAttributeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SKUAttributeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SKUAttributeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ContentPageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContentPageFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageFilters.#ctor">
            <summary>
            Initializes a new instance of the ContentPageFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ContentPageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContentPageParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageQuery.#ctor">
            <summary>
            Initializes a new instance of the ContentPageQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CountryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CountryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryFilters.#ctor">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CountryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CountryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CountryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryQuery.#ctor">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CountryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CountryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ContentPageRevisionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionFilters.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ContentPageRevisionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionQuery.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ContentPageRevisionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ContentPageRevisionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.GatewayFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GatewayFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayFilters.#ctor">
            <summary>
            Initializes a new instance of the GatewayFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.GatewayQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GatewayParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayQuery.#ctor">
            <summary>
            Initializes a new instance of the GatewayQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.GatewayQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GatewayQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseStatusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusFilters.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseStatusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusQuery.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseStatusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseStatusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ActivityLogFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogFilters.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ActivityLogQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLog"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogQuery.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseRequestFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseRequestFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestFilters.#ctor">
            <summary>
            Initializes a new instance of the CaseRequestFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CaseRequestQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CaseRequestParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestQuery.#ctor">
            <summary>
            Initializes a new instance of the CaseRequestQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CaseRequestQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CaseRequestQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ActivityLogTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ActivityLogTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the ActivityLogTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ActivityLogTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityLogTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AddOnFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AddOnFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnFilters.#ctor">
            <summary>
            Initializes a new instance of the AddOnFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AddOnQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AddOnParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnQuery.#ctor">
            <summary>
            Initializes a new instance of the AddOnQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CasePriorityFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityFilters.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.CasePriorityQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityQuery.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.CasePriorityQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CasePriorityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AddOnValueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueFilters.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AddOnValueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueQuery.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AddOnValueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AddOnValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentSettingFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingFilters.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PaymentSettingQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingQuery.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PaymentSettingQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentSettingQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AttributeTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AttributeTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AttributeTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AttributeTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderLineItemFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderLineItemQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderLineItemQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderLineItemQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DiscountTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DiscountTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DiscountTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DiscountTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductAddOnFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductAddOnQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductAddOnQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductAddOnQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderProcessingTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.OrderQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.OrderQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PasswordLogFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PasswordLogFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogFilters.#ctor">
            <summary>
            Initializes a new instance of the PasswordLogFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PasswordLogQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PasswordLogParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogQuery.#ctor">
            <summary>
            Initializes a new instance of the PasswordLogQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PasswordLogQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PasswordLogQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ZipCodeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ZipCodeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeFilters.#ctor">
            <summary>
            Initializes a new instance of the ZipCodeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ZipCodeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ZipCodeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeQuery.#ctor">
            <summary>
            Initializes a new instance of the ZipCodeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ZipCodeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ZipCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.HighlightTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HighlightTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the HighlightTypeFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.HighlightTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HighlightTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the HighlightTypeQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountPaymentFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountPaymentFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentFilters.#ctor">
            <summary>
            Initializes a new instance of the AccountPaymentFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.AccountPaymentQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountPaymentParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentQuery.#ctor">
            <summary>
            Initializes a new instance of the AccountPaymentQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.AccountPaymentQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountPaymentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductCategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductCategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.HighlightFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HighlightFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightFilters.#ctor">
            <summary>
            Initializes a new instance of the HighlightFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.HighlightQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HighlightParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightQuery.#ctor">
            <summary>
            Initializes a new instance of the HighlightQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.HighlightQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HighlightQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PromotionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PromotionFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionFilters.#ctor">
            <summary>
            Initializes a new instance of the PromotionFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.PromotionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PromotionParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionQuery.#ctor">
            <summary>
            Initializes a new instance of the PromotionQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.PromotionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PromotionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductCrossSellFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductCrossSellQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductCrossSellQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductCrossSellQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.IPCommerceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the IPCommerceFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceFilters.#ctor">
            <summary>
            Initializes a new instance of the IPCommerceFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.IPCommerceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the IPCommerceParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceQuery.#ctor">
            <summary>
            Initializes a new instance of the IPCommerceQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IPCommerceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the IPCommerceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ReviewFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReviewFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewFilters.#ctor">
            <summary>
            Initializes a new instance of the ReviewFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ReviewQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReviewParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewQuery.#ctor">
            <summary>
            Initializes a new instance of the ReviewQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ReviewQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReviewQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTierFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductTierFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductTierQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTier"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductTierQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductTierQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductTierQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductHighlightFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductHighlightQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductHighlightQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductHighlightQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.NoteFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NoteFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the NoteFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NoteFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NoteFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteFilters.#ctor">
            <summary>
            Initializes a new instance of the NoteFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NoteFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NoteFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.NoteQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.NoteParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NoteParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the NoteParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NoteParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NoteParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteQuery.#ctor">
            <summary>
            Initializes a new instance of the NoteQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NoteQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.NoteQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NoteQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DigitalAssetFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DigitalAssetFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetFilters.#ctor">
            <summary>
            Initializes a new instance of the DigitalAssetFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.DigitalAssetQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DigitalAssetParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetQuery.#ctor">
            <summary>
            Initializes a new instance of the DigitalAssetQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.DigitalAssetQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DigitalAssetQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductImageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductImageFilterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductImageFilters class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.ProductImageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:ZNode.Libraries.DataAccess.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductImageParameterBuilder class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductImageQuery class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.ProductImageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductImageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlightKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productHighlightID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productHighlightID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlightKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Product index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Product index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ProductHighlight index.
            </summary>
            <param name="productHighlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productHighlightID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.GetByProductHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductHighlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productHighlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductHighlight},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductHighlight&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlight,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductHighlight Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductHighlight,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductHighlight object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductHighlight instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductHighlight Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductHighlight</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightChildEntityTypes.Highlight">
            <summary>
             Composite Property for <c>Highlight</c> at HighlightIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTierProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="highlightID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_HighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.GetByHighlightID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Highlight index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Highlight},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Highlight&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Highlight,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Highlight Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Highlight,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Highlight object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Highlight instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Highlight Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Highlight</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.HighlightChildEntityTypes.HighlightType">
            <summary>
             Composite Property for <c>HighlightType</c> at HighlightTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.HighlightChildEntityTypes.ProductHighlightCollection">
            <summary>
             Collection of <c>Highlight</c> as OneToMany for ProductHighlightCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="passwordLogID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="passwordLogID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLogKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(System.Guid)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ZNodePasswordLog index.
            </summary>
            <param name="userID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Guid)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Guid,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodePasswordLog index.
            </summary>
            <param name="passwordLogID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="passwordLogID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.GetByPasswordLogID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePasswordLog index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="passwordLogID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PasswordLog},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;PasswordLog&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.PasswordLog)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLog,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PasswordLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PasswordLog Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PasswordLog,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.PasswordLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PasswordLog instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PasswordLog Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="addOnValueID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	fKZNodeAddOnValueZNodeShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	fKZNodeAddOnValueZNodeShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeShippingRuleType key.
            	FK_ZNodeAddOnValue_ZNodeShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	fKZNodeAddOnValueZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	fKZNodeAddOnValueZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeSupplier key.
            	FK_ZNodeAddOnValue_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	fKZNodeAddOnValueZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	fKZNodeAddOnValueZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAddOnValue_ZNodeTaxClass key.
            	FK_ZNodeAddOnValue_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	fKZNodeProductAddOnValueZNodeProductAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	fKZNodeProductAddOnValueZNodeProductAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOnValue_ZNodeProductAddOn key.
            	FK_ZNodeProductAddOnValue_ZNodeProductAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AddOnValue objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValueKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="addOnValueID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOnValue index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOnValue},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;AddOnValue&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValue,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AddOnValue Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnValue,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.AddOnValue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOnValue instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AddOnValue Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="supplierID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="supplierTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	fKZNodeSupplierZNodeSupplierType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	fKZNodeSupplierZNodeSupplierType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSupplier_ZNodeSupplierType key.
            	FK_ZNodeSupplier_ZNodeSupplierType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Supplier objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ZNodeSupplier index.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetByExternalSupplierNoName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="externalSupplierNo"></param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeSupplier index.
            </summary>
            <param name="supplierID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplier index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Supplier},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Supplier&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Supplier)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Supplier,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Supplier"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Supplier Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Supplier,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Supplier object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Supplier instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Supplier Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxRuleTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeTaxRuleType index.
            </summary>
            <param name="taxRuleTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTaxRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRuleType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;TaxRuleType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.TaxRuleType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxRuleType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.TaxRuleType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRuleType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxRuleType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	fKZNodeShippingZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="destinationCountryCode"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	fKZNodeShippingZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="destinationCountryCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShipping_ZNodeCountry key.
            	FK_ZNodeShipping_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Shipping objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SC_Shipping index.
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Shipping index.
            </summary>
            <param name="shippingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Shipping index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Shipping},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Shipping&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Shipping,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Shipping Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Shipping,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Shipping object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Shipping instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Shipping Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productImageTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductImageType index.
            </summary>
            <param name="productImageTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductImageType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImageType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductImageType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductImageType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductImageType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductImageType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImageType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductImageType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductImageType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeChildEntityTypes.ProductImageCollection">
            <summary>
             Collection of <c>ProductImageType</c> as OneToMany for ProductImageCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ManufacturerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="manufacturerID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	fKSCManufacturerPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	fKSCManufacturerPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Manufacturer_Portals key.
            	FK_SC_Manufacturer_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Manufacturer objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ManufacturerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Manufacturer index.
            </summary>
            <param name="manufacturerID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Manufacturer index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Manufacturer},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Manufacturer&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Manufacturer,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Manufacturer Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Manufacturer,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Manufacturer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Manufacturer instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Manufacturer Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="parentAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	fKAccountAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentAccountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	fKAccountAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByParentAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Account key.
            	FK_Account_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="accountTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	fKAccountAccountType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	fKAccountAccountType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_AccountType key.
            	FK_Account_AccountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	fKAccountPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	fKAccountPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_Portals key.
            	FK_Account_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="profileID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	fKAccountSCProfile Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="profileID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	fKAccountSCProfile Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="profileID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Account_SC_Profile key.
            	FK_Account_SC_Profile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="referralAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	fKZNodeAccountZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralAccountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	fKZNodeAccountZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralAccountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeAccount key.
            	FK_ZNodeAccount_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="referralCommissionTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	fKZNodeAccountZNodeReferralCommissionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralCommissionTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	fKZNodeAccountZNodeReferralCommissionType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="referralCommissionTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeReferralCommissionType key.
            	FK_ZNodeAccount_ZNodeReferralCommissionType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(System.Nullable{System.Guid})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_UserID index.
            </summary>
            <param name="userID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByUserID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="userID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="companyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="companyName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Account index.
            </summary>
            <param name="accountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Account index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Account},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Account&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Account,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Account Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Account,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Account instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Account Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Account</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at ParentAccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.AccountType">
            <summary>
             Composite Property for <c>AccountType</c> at AccountTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.Profile">
            <summary>
             Composite Property for <c>Profile</c> at ProfileIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.ReferralCommissionType">
            <summary>
             Composite Property for <c>ReferralCommissionType</c> at ReferralCommissionTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.ReviewCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for ReviewCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.CaseRequestCollectionGetByAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.SavedPaymentMethodCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for SavedPaymentMethodCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.AccountCollectionGetByReferralAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.StoreCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for StoreCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.OrderCollectionGetByReferralAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.NoteCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for NoteCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.CaseRequestCollectionGetByOwnerAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.WishListCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for WishListCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.AccountCollectionGetByParentAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.OrderCollectionGetByAccountID">
            <summary>
             Collection of <c>Account</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountChildEntityTypes.AccountPaymentCollection">
            <summary>
             Collection of <c>Account</c> as OneToMany for AccountPaymentCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="attributeTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_AttributeType index.
            </summary>
            <param name="attributeTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.GetByAttributeTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_AttributeType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AttributeType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;AttributeType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AttributeType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AttributeType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.AttributeType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AttributeType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AttributeType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.AttributeType</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="sKUID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	fKZNodeSKUZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	fKZNodeSKUZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSKU_ZNodeSupplier key.
            	FK_ZNodeSKU_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKU objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ProductId index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ProductId index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_SKU_PK index.
            </summary>
            <param name="sKUID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_SKU_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKU},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;SKU&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKU,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SKU Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKU,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.SKU object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKU instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SKU Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.SKU</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUChildEntityTypes.Supplier">
            <summary>
             Composite Property for <c>Supplier</c> at SupplierIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUChildEntityTypes.SKUAttributeCollection">
            <summary>
             Collection of <c>SKU</c> as OneToMany for SKUAttributeCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>SKU</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="portalId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	fKSCProductTypePortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	fKSCProductTypePortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByPortalId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductType_Portals key.
            	FK_SC_ProductType_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductType objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ProductType index.
            </summary>
            <param name="productTypeId"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIdSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeChildEntityTypes.ProductTypeAttributeCollection">
            <summary>
             Collection of <c>ProductType</c> as OneToMany for ProductTypeAttributeCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>ProductType</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityViewProvider`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityViewProvider`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityViewProvider`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.IEntityViewProvider`1.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetAll(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBaseCore`1.Find(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productImageID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="productImageTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	fKZNodeProductImageZNodeProductImageType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productImageTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	fKZNodeProductImageZNodeProductImageType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productImageTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductImage_ZNodeProductImageType key.
            	FK_ZNodeProductImage_ZNodeProductImageType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	fKZNodeProductViewZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	fKZNodeProductViewZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductView_ZNodeProduct key.
            	FK_ZNodeProductView_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductImage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Search index.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductIDActiveIndProductImageTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Search index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="activeInd"></param>
            <param name="productImageTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductView index.
            </summary>
            <param name="productImageID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.GetByProductImageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductView index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productImageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductImage},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductImage&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImage,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductImage Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductImage,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductImage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductImage instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductImage Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductImage</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductImageChildEntityTypes.ProductImageType">
            <summary>
             Composite Property for <c>ProductImageType</c> at ProductImageTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductImageChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.NoteKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="noteID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="noteID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	fKSCNoteSCAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	fKSCNoteSCAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Note_SC_Account key.
            	FK_SC_Note_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Note objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.NoteKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IN1 index.
            </summary>
            <param name="caseID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IN1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_AccountNote index.
            </summary>
            <param name="noteID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="noteID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.GetByNoteID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AccountNote index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="noteID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Note},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Note&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Note,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Note Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NoteProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Note,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Note object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Note instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Note Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReviewKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="reviewID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="reviewID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	fKSCReviewAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	fKSCReviewAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Account key.
            	FK_SC_Review_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	fKSCReviewProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	fKSCReviewProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Review_Product key.
            	FK_SC_Review_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Review objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReviewKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Review index.
            </summary>
            <param name="reviewID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="reviewID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.GetByReviewID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Review index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="reviewID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Review},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Review&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Review)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Review,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Review"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Review Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReviewProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Review,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Review object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Review instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Review Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.GatewayKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="gatewayTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.GatewayKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Gateway index.
            </summary>
            <param name="gatewayTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Gateway index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Gateway},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Gateway&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Gateway,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Gateway Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Gateway,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Gateway object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Gateway instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Gateway Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Gateway</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.GatewayChildEntityTypes.PaymentSettingCollection">
            <summary>
             Collection of <c>Gateway</c> as OneToMany for PaymentSettingCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="contentPageID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	fKZNodePageZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	fKZNodePageZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePage_ZNodePortal key.
            	FK_ZNodePage_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPage objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ZNodePage index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodePage index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodePage_1 index.
            </summary>
            <param name="contentPageID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePage_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPage},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ContentPage&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPage,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ContentPage Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPage,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ContentPage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPage instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ContentPage Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ContentPage</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ContentPageChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ContentPageChildEntityTypes.ContentPageRevisionCollection">
            <summary>
             Collection of <c>ContentPage</c> as OneToMany for ContentPageRevisionCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="urlRedirectID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="urlRedirectID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirectKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeUrlRedirect index.
            </summary>
            <param name="urlRedirectID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="urlRedirectID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.GetByUrlRedirectID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeUrlRedirect index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="urlRedirectID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.UrlRedirect},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;UrlRedirect&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.UrlRedirect)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirect,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.UrlRedirect"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.UrlRedirect Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.UrlRedirect,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.UrlRedirect object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.UrlRedirect instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.UrlRedirect Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEventKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="trackingEventID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingEventID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="trackingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	fKZNodeTrackingEventZNodeTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="trackingID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	fKZNodeTrackingEventZNodeTracking Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="trackingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTrackingEvent_ZNodeTracking key.
            	FK_ZNodeTrackingEvent_ZNodeTracking Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TrackingEvent objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEventKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeTrackingEvent index.
            </summary>
            <param name="trackingEventID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingEventID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.GetByTrackingEventID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTrackingEvent index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingEventID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TrackingEvent},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;TrackingEvent&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.TrackingEvent)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEvent,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TrackingEvent"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TrackingEvent Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingEvent,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.TrackingEvent object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TrackingEvent instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TrackingEvent Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.TrackingEvent</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventChildEntityTypes.Tracking">
            <summary>
             Composite Property for <c>Tracking</c> at TrackingIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="currencyTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeCurrencyType index.
            </summary>
            <param name="currencyTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCurrencyType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CurrencyType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;CurrencyType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.CurrencyType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CurrencyType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CurrencyType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CurrencyType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.CurrencyType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CurrencyType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CurrencyType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.CurrencyType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeChildEntityTypes.PortalCollection">
            <summary>
             Collection of <c>CurrencyType</c> as OneToMany for PortalCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	fKSCProductPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	fKSCProductPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_Portals key.
            	FK_SC_Product_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="manufacturerID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	fKSCProductSCManufacturer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="manufacturerID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	fKSCProductSCManufacturer Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="manufacturerID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByManufacturerID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
            	FK_SC_Product_SC_Manufacturer Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="manufacturerID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="productTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	fKSCProductSCProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	fKSCProductSCProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
            	FK_SC_Product_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	fKSCProductSCShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	fKSCProductSCShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
            	FK_SC_Product_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	fKZNodeProductZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	fKZNodeProductZNodeSupplier Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="supplierID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySupplierID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeSupplier key.
            	FK_ZNodeProduct_ZNodeSupplier Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	fKZNodeProductZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	fKZNodeProductZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProduct_ZNodeTaxClass key.
            	FK_ZNodeProduct_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetBySKU(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SKU index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKU"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX3 index.
            </summary>
            <param name="productNum"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productNum"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductNum(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(System.Boolean,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX4 index.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByHomepageSpecialPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="homepageSpecial"></param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_Product_PK index.
            </summary>
            <param name="productID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Product_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Product},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Product&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Product,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Product Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Product,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Product instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Product Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Product</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.Manufacturer">
            <summary>
             Composite Property for <c>Manufacturer</c> at ManufacturerIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductType">
            <summary>
             Composite Property for <c>ProductType</c> at ProductTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ShippingRuleType">
            <summary>
             Composite Property for <c>ShippingRuleType</c> at ShippingRuleTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.Supplier">
            <summary>
             Composite Property for <c>Supplier</c> at SupplierIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.TaxClass">
            <summary>
             Composite Property for <c>TaxClass</c> at TaxClassIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ReviewCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ReviewCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.DigitalAssetCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for DigitalAssetCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductCategoryCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductCategoryCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductCrossSellCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductCrossSellCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.WishListCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for WishListCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductImageCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductImageCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.SKUCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for SKUCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductTierCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductTierCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductAddOnCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductAddOnCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductChildEntityTypes.ProductHighlightCollection">
            <summary>
             Collection of <c>Product</c> as OneToMany for ProductHighlightCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_PaymentType index.
            </summary>
            <param name="paymentTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;PaymentType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.PaymentType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PortalKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="portalID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="currencyTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	fKZNodePortalZNodeCurrencyType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="currencyTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	fKZNodePortalZNodeCurrencyType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="currencyTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByCurrencyTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeCurrencyType key.
            	FK_ZNodePortal_ZNodeCurrencyType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="currencyTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="defaultOrderStateID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="defaultOrderStateID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="defaultOrderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	fKZNodePortalZNodeOrderState Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="defaultOrderStateID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	fKZNodePortalZNodeOrderState Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="defaultOrderStateID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByDefaultOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePortal_ZNodeOrderState key.
            	FK_ZNodePortal_ZNodeOrderState Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="defaultOrderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PortalKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activeInd"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Portals index.
            </summary>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Portals index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Portal},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Portal&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Portal,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Portal Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PortalProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Portal,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Portal object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Portal instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Portal Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProviderCollection.Add(ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseStatusID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_CaseStatus index.
            </summary>
            <param name="caseStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CaseStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseStatus},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;CaseStatus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatus,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseStatus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseStatus,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.CaseStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseStatus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseStatus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ShippingType index.
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ShippingType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ShippingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="categoryID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	fKSCCategoryPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	fKSCCategoryPortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_Portals key.
            	FK_SC_Category_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="parentCategoryID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentCategoryID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	fKSCCategorySCCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentCategoryID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	fKSCCategorySCCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentCategoryID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByParentCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Category_SC_Category key.
            	FK_SC_Category_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Category objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CategoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetBySEOURL(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SEOURL index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sEOURL"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_Category_PK index.
            </summary>
            <param name="categoryID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_Category_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Category},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Category&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Category,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Category Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CategoryProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Category,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Category object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Category instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Category Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSettingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentSettingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="gatewayTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	fKSCPaymentSettingSCGateway Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="gatewayTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	fKSCPaymentSettingSCGateway Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="gatewayTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByGatewayTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_Gateway key.
            	FK_SC_PaymentSetting_SC_Gateway Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="gatewayTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="paymentTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	fKSCPaymentSettingSCPaymentType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	fKSCPaymentSettingSCPaymentType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_PaymentSetting_SC_PaymentType key.
            	FK_SC_PaymentSetting_SC_PaymentType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.PaymentSetting objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSettingKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileIDPaymentTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="paymentTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key ix2 index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_PaymentSetting index.
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_PaymentSetting index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentSetting},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;PaymentSetting&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSetting,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentSetting Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentSetting,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.PaymentSetting object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentSetting instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentSetting Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="activityLogTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ActivityTypeID index.
            </summary>
            <param name="activityLogTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByActivityLogTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ActivityTypeID index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="activityLogTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_TypeCategory index.
            </summary>
            <param name="typeCategory"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="typeCategory"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.GetByTypeCategory(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TypeCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="typeCategory"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ActivityLogType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ActivityLogType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ActivityLogType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ActivityLogType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ActivityLogType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ActivityLogType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ActivityLogType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ActivityLogType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ActivityLogType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="revisionID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="revisionID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="contentPageID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	fKZNodePageRevisionZNodePage Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contentPageID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	fKZNodePageRevisionZNodePage Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="contentPageID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByContentPageID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePageRevision_ZNodePage key.
            	FK_ZNodePageRevision_ZNodePage Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="contentPageID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ContentPageRevision objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodePageRevision index.
            </summary>
            <param name="revisionID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="revisionID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.GetByRevisionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePageRevision index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="revisionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ContentPageRevision},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ContentPageRevision&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevision,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ContentPageRevision Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ContentPageRevision,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ContentPageRevision object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ContentPageRevision instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ContentPageRevision Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ContentPageRevision</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionChildEntityTypes.ContentPage">
            <summary>
             Composite Property for <c>ContentPage</c> at ContentPageIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="sKUAttributeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUAttributeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="attributeId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	fKSCSKUAttributeSCAttribute Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="attributeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	fKSCSKUAttributeSCAttribute Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="attributeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_Attribute key.
            	FK_SC_SKUAttribute_SC_Attribute Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="sKUID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	fKSCSKUAttributeSCSKU Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="sKUID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	fKSCSKUAttributeSCSKU Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="sKUID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_SKUAttribute_SC_SKU key.
            	FK_SC_SKUAttribute_SC_SKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SKUAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttributeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ix1 index.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetByAttributeIdSKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ix1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="attributeId"></param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_SKUAttribute index.
            </summary>
            <param name="sKUAttributeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUAttributeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.GetBySKUAttributeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_SKUAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUAttributeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SKUAttribute},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;SKUAttribute&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SKUAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SKUAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.SKUAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SKUAttribute instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SKUAttribute Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.SKUAttribute</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeChildEntityTypes.ProductAttribute">
            <summary>
             Composite Property for <c>ProductAttribute</c> at AttributeIdSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeChildEntityTypes.SKU">
            <summary>
             Composite Property for <c>SKU</c> at SKUIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishListKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="wishListID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="wishListID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	fKZNodeWishListZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	fKZNodeWishListZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeAccount key.
            	FK_ZNodeWishList_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	fKZNodeWishListZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	fKZNodeWishListZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeWishList_ZNodeProduct key.
            	FK_ZNodeWishList_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.WishList objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishListKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeWishList index.
            </summary>
            <param name="wishListID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="wishListID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.GetByWishListID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeWishList index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="wishListID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.WishList},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;WishList&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.WishList)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishList,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.WishList"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.WishList Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.WishListProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.WishList,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.WishList object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.WishList instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.WishList Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="paymentStatusID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodePaymentStatus index.
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePaymentStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.PaymentStatus},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;PaymentStatus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.PaymentStatus)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatus,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentStatus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PaymentStatus,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.PaymentStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.PaymentStatus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.PaymentStatus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.PaymentStatus</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusChildEntityTypes.OrderCollection">
            <summary>
             Collection of <c>PaymentStatus</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusChildEntityTypes.OrderLineItemCollection">
            <summary>
             Collection of <c>PaymentStatus</c> as OneToMany for OrderLineItemCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingRuleID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	fKSCShippingRuleSCShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	fKSCShippingRuleSCShippingRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ShippingRule_SC_ShippingRuleType key.
            	FK_SC_ShippingRule_SC_ShippingRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="shippingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ShippingRule index.
            </summary>
            <param name="shippingRuleID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.GetByShippingRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRule},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ShippingRule&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRule,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingRule Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRule,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ShippingRule object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRule instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingRule Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ShippingRule</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleChildEntityTypes.Shipping">
            <summary>
             Composite Property for <c>Shipping</c> at ShippingIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleChildEntityTypes.ShippingRuleType">
            <summary>
             Composite Property for <c>ShippingRuleType</c> at ShippingRuleTypeIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethodKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="savedPaymentMethodID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="savedPaymentMethodID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	fKZNodeSavedPaymentMethodZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	fKZNodeSavedPaymentMethodZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodeAccount key.
            	FK_ZNodeSavedPaymentMethod_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="paymentSettingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	fKZNodeSavedPaymentMethodZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentSettingID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	fKZNodeSavedPaymentMethodZNodePaymentSetting Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentSettingID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetByPaymentSettingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting key.
            	FK_ZNodeSavedPaymentMethod_ZNodePaymentSetting Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentSettingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethodKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="savedPaymentMethodID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.GetBySavedPaymentMethodID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPaymentMethod index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="savedPaymentMethodID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;SavedPaymentMethod&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productAttributeTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAttributeTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="productTypeId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	fKSCProductTypeAttributeSCProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	fKSCProductTypeAttributeSCProductType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductTypeId(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductTypeAttribute_SC_ProductType key.
            	FK_SC_ProductTypeAttribute_SC_ProductType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="productAttributeTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAttributeTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.GetByProductAttributeTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ProductTypeAttribute index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAttributeTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductTypeAttribute&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeChildEntityTypes.ProductType">
            <summary>
             Composite Property for <c>ProductType</c> at ProductTypeIdSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderStateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderStateID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderStateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_OrderState_PK index.
            </summary>
            <param name="orderStateID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.GetByOrderStateID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderState_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderStateID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderState},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;OrderState&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderState,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderState Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderState,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.OrderState object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderState instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderState Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.OrderState</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderStateChildEntityTypes.OrderCollection">
            <summary>
             Collection of <c>OrderState</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderStateChildEntityTypes.PortalCollection">
            <summary>
             Collection of <c>OrderState</c> as OneToMany for PortalCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="referralCommissionTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.GetByReferralCommissionTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeReferralCommissionType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="referralCommissionTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ReferralCommissionType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ReferralCommissionType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ReferralCommissionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ReferralCommissionType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ReferralCommissionType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ReferralCommissionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ReferralCommissionType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ReferralCommissionType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendIsNotNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.ZNode#Libraries#DataAccess#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.#ctor(ZNode.Libraries.DataAccess.Data.Bases.DeepSession,System.String,System.Enum,ZNode.Libraries.DataAccess.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.#ctor(ZNode.Libraries.DataAccess.Data.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.#ctor(ZNode.Libraries.DataAccess.Data.Bases.DeepSession,System.String,System.Enum,ZNode.Libraries.DataAccess.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,ZNode.Libraries.DataAccess.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,ZNode.Libraries.DataAccess.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAssetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="digitalAssetID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="digitalAssetID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="orderLineItemID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	fKZNodeDigitalAssetZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderLineItemID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	fKZNodeDigitalAssetZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderLineItemID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeOrderLineItem key.
            	FK_ZNodeDigitalAsset_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	fKZNodeDigitalAssetZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	fKZNodeDigitalAssetZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeDigitalAsset_ZNodeProduct key.
            	FK_ZNodeDigitalAsset_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.DigitalAsset objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAssetKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeDigitalAsset index.
            </summary>
            <param name="digitalAssetID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="digitalAssetID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.GetByDigitalAssetID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDigitalAsset index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="digitalAssetID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DigitalAsset},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;DigitalAsset&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.DigitalAsset)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAsset,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DigitalAsset"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.DigitalAsset Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DigitalAsset,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.DigitalAsset object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DigitalAsset instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.DigitalAsset Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PromotionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="promotionID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="promotionID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	fKZNodePromotionZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	fKZNodePromotionZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAccount key.
            	FK_ZNodePromotion_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="addOnValueID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	fKZNodePromotionZNodeAddOnValue Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnValueID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	fKZNodePromotionZNodeAddOnValue Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnValueID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByAddOnValueID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeAddOnValue key.
            	FK_ZNodePromotion_ZNodeAddOnValue Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnValueID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="discountTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	fKZNodePromotionZNodeDiscountType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="discountTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	fKZNodePromotionZNodeDiscountType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="discountTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeDiscountType key.
            	FK_ZNodePromotion_ZNodeDiscountType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	fKZNodePromotionZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	fKZNodePromotionZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProduct key.
            	FK_ZNodePromotion_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="profileID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	fKZNodePromotionZNodeProfile Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="profileID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	fKZNodePromotionZNodeProfile Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="profileID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeProfile key.
            	FK_ZNodePromotion_ZNodeProfile Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="sKUID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	fKZNodePromotionZNodeSKU Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="sKUID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	fKZNodePromotionZNodeSKU Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="sKUID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetBySKUID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodePromotion_ZNodeSKU key.
            	FK_ZNodePromotion_ZNodeSKU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="sKUID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Promotion objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.PromotionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodePromotion index.
            </summary>
            <param name="promotionID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="promotionID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.GetByPromotionID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodePromotion index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="promotionID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Promotion},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Promotion&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Promotion)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Promotion,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Promotion"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Promotion Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.PromotionProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Promotion,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Promotion object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Promotion instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Promotion Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productCategoryID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCategoryID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="categoryID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	fKSCProductCategorySCCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="categoryID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	fKSCProductCategorySCCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="categoryID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Category key.
            	FK_SC_ProductCategory_SC_Category Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="categoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	fKSCProductCategorySCProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	fKSCProductCategorySCProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_ProductCategory_SC_Product key.
            	FK_SC_ProductCategory_SC_Product Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductCategory objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategoryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ProductCategory index.
            </summary>
            <param name="productCategoryID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCategoryID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.GetByProductCategoryID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ProductCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productCategoryID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductCategory},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductCategory&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategory,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductCategory,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductCategory instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductCategory Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductCategory</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryChildEntityTypes.Category">
            <summary>
             Composite Property for <c>Category</c> at CategoryIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PasswordLogChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.PasswordLog</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.GatewayProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.WishListChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.WishList</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.WishListChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.WishListChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingRuleTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_ShippingRuleType index.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.GetByShippingRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_ShippingRuleType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingRuleType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ShippingRuleType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingRuleType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingRuleType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ShippingRuleType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingRuleType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingRuleType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ShippingRuleType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeChildEntityTypes.AddOnValueCollection">
            <summary>
             Collection of <c>ShippingRuleType</c> as OneToMany for AddOnValueCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeChildEntityTypes.ShippingRuleCollection">
            <summary>
             Collection of <c>ShippingRuleType</c> as OneToMany for ShippingRuleCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>ShippingRuleType</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProfileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="profileID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	fKZNodeProfileZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	fKZNodeProfileZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProfile_ZNodeTaxClass key.
            	FK_ZNodeProfile_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Profile objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProfileKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Default index.
            </summary>
            <param name="isDefault"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="isDefault"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByIsDefault(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Default index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="isDefault"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX_Name index.
            </summary>
            <param name="name"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Name index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="name"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_Profile index.
            </summary>
            <param name="profileID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.GetByProfileID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_Profile index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="profileID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Profile},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Profile&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Profile,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Profile Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Profile,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Profile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Profile instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Profile Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Profile</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes.TaxClass">
            <summary>
             Composite Property for <c>TaxClass</c> at TaxClassIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>Profile</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes.PaymentSettingCollection">
            <summary>
             Collection of <c>Profile</c> as OneToMany for PaymentSettingCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes.ShippingCollection">
            <summary>
             Collection of <c>Profile</c> as OneToMany for ShippingCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProfileChildEntityTypes.AccountCollection">
            <summary>
             Collection of <c>Profile</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.DigitalAsset</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetChildEntityTypes.OrderLineItem">
            <summary>
             Composite Property for <c>OrderLineItem</c> at OrderLineItemIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.DigitalAssetChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderProcessingTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderProcessingTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_OrderProcessingType index.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderProcessingTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.GetByOrderProcessingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OrderProcessingType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderProcessingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderProcessingType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;OrderProcessingType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderProcessingType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderProcessingType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.OrderProcessingType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderProcessingType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderProcessingType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriorityKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="casePriorityID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriorityKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_CasePriority index.
            </summary>
            <param name="casePriorityID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CasePriority index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CasePriority},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;CasePriority&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriority,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CasePriority Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CasePriority,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.CasePriority object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CasePriority instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CasePriority Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.CasePriority</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityChildEntityTypes.CaseRequestCollection">
            <summary>
             Collection of <c>CasePriority</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageRevisionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="supplierTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeSupplierType index.
            </summary>
            <param name="supplierTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.GetBySupplierTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeSupplierType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="supplierTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.SupplierType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;SupplierType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.SupplierType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SupplierType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SupplierType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.SupplierType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.SupplierType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.SupplierType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.SupplierType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.SupplierType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeChildEntityTypes.SupplierCollection">
            <summary>
             Collection of <c>SupplierType</c> as OneToMany for SupplierCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingEventProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="trackingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TrackingKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeTracking index.
            </summary>
            <param name="trackingID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.GetByTrackingID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeTracking index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="trackingID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Tracking},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Tracking&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Tracking)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Tracking,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Tracking"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Tracking Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TrackingProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Tracking,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Tracking object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Tracking instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Tracking Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Manufacturer</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ManufacturerChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>Manufacturer</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Portal</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.CurrencyType">
            <summary>
             Composite Property for <c>CurrencyType</c> at CurrencyTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.OrderState">
            <summary>
             Composite Property for <c>OrderState</c> at DefaultOrderStateIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.TaxRuleCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for TaxRuleCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.AccountCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.CategoryCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for CategoryCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.OrderCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.CaseRequestCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.ContentPageCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for ContentPageCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.IPCommerce">
            <summary>
             Entity <c>IPCommerce</c> as OneToOne for IPCommerce
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.ProductTypeCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for ProductTypeCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.ManufacturerCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for ManufacturerCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PortalChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>Portal</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductHighlightProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductCrossSell</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductCrossSellChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIdSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPaymentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="accountPaymentID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountPaymentID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	fKZNodeAccountPaymentZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	fKZNodeAccountPaymentZNodeAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeAccount key.
            	FK_ZNodeAccountPayment_ZNodeAccount Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="orderID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	fKZNodeAccountPaymentZNodeOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	fKZNodeAccountPaymentZNodeOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeAccountPayment_ZNodeOrder key.
            	FK_ZNodeAccountPayment_ZNodeOrder Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.AccountPayment objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPaymentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeAccountPayment index.
            </summary>
            <param name="accountPaymentID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountPaymentID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.GetByAccountPaymentID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeAccountPayment index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountPaymentID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AccountPayment},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;AccountPayment&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.AccountPayment)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPayment,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountPayment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AccountPayment Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AccountPayment,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.AccountPayment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AccountPayment instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AccountPayment Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="zipCodeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zipCodeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCodeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="areaCode"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="areaCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByAreaCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_AreaCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="areaCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="cityName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="cityName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCityName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CityName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="cityName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="countyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="countyName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByCountyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_CountyName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="countyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(System.Nullable{System.Decimal})">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="latitude"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(System.Nullable{System.Decimal},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal})">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="latitude"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLatitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Latitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="latitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(System.Nullable{System.Decimal})">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="longitude"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(System.Nullable{System.Decimal},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal})">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="longitude"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByLongitude(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_Longitude index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="longitude"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="stateAbbr"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateAbbr"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateAbbr(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateAbbr index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateAbbr"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="stateName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByStateName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_StateName index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="stateName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="zIP"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zIP"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZIP(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_ZNodeZipCode_ZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zIP"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeZipCode index.
            </summary>
            <param name="zipCodeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zipCodeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.GetByZipCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeZipCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="zipCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ZipCode},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ZipCode&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ZipCode)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCode,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ZipCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ZipCode Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ZipCode,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ZipCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ZipCode instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ZipCode Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CountryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="code">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CountryKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByPortalIDActiveInd(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="activeInd"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeCountry index.
            </summary>
            <param name="code"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeCountry index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Country},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Country&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Country,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Country Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CountryProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Country,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Country object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Country instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Country Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="shippingServiceCodeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingServiceCodeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="shippingTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	fKZNodeShippingServiceCodeZNodeShippingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	fKZNodeShippingServiceCodeZNodeShippingType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="shippingTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeShippingServiceCode_ZNodeShippingType key.
            	FK_ZNodeShippingServiceCode_ZNodeShippingType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ShippingServiceCode objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingServiceCodeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.GetByShippingServiceCodeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeShippingServiceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="shippingServiceCodeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ShippingServiceCode},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ShippingServiceCode&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingServiceCode Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ShippingServiceCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ShippingServiceCode instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ShippingServiceCode Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProfileProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ZipCode</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ZipCodeChildEntityTypes.ZipCode">
            <summary>
             Composite Property for <c>ZipCode</c> at ZipCodeIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="code">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeState index.
            </summary>
            <param name="code"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.GetByCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeState index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="code"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.State},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;State&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.State,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.State Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.State,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.State object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.State instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.State Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.State</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="taxRuleID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="destinationCountryCode"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	fKZNodeTaxRuleZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="destinationCountryCode"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	fKZNodeTaxRuleZNodeCountry Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="destinationCountryCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByDestinationCountryCode(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeCountry key.
            	FK_ZNodeTaxRule_ZNodeCountry Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="destinationCountryCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	fKZNodeTaxRuleZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	fKZNodeTaxRuleZNodePortal Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodePortal key.
            	FK_ZNodeTaxRule_ZNodePortal Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	fKZNodeTaxRuleZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	fKZNodeTaxRuleZNodeTaxClass Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxClassID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxClassID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxClass key.
            	FK_ZNodeTaxRule_ZNodeTaxClass Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxClassID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="taxRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	fKZNodeTaxRuleZNodeTaxRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxRuleTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	fKZNodeTaxRuleZNodeTaxRuleType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="taxRuleTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeTaxRule_ZNodeTaxRuleType key.
            	FK_ZNodeTaxRule_ZNodeTaxRuleType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.TaxRule objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRuleKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_SC_TaxRule index.
            </summary>
            <param name="taxRuleID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.GetByTaxRuleID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SC_TaxRule index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="taxRuleID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.TaxRule},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;TaxRule&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRule,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxRule Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.TaxRule,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.TaxRule object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.TaxRule instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.TaxRule Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.TaxRule</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at DestinationCountryCodeSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleChildEntityTypes.TaxClass">
            <summary>
             Composite Property for <c>TaxClass</c> at TaxClassIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleChildEntityTypes.TaxRuleType">
            <summary>
             Composite Property for <c>TaxRuleType</c> at TaxRuleTypeIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ShippingType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeChildEntityTypes.ShippingServiceCodeCollection">
            <summary>
             Collection of <c>ShippingType</c> as OneToMany for ShippingServiceCodeCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingTypeChildEntityTypes.ShippingCollection">
            <summary>
             Collection of <c>ShippingType</c> as OneToMany for ShippingCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="iPCommerceID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iPCommerceID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerceKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX_ZNodeIPCommerce index.
            </summary>
            <param name="portalID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeIPCommerce index.
            </summary>
            <param name="iPCommerceID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iPCommerceID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.GetByIPCommerceID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeIPCommerce index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iPCommerceID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.IPCommerce},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;IPCommerce&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.IPCommerce)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerce,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.IPCommerce"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.IPCommerce Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.IPCommerce,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.IPCommerce object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.IPCommerce instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.IPCommerce Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="orderLineItemID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="orderID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	fKSCOrderLineItemSCOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	fKSCOrderLineItemSCOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="orderID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_OrderLineItem_SC_Order key.
            	FK_SC_OrderLineItem_SC_Order Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="parentOrderLineItemID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentOrderLineItemID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentOrderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	fKZNodeOrderLineItemZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentOrderLineItemID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	fKZNodeOrderLineItemZNodeOrderLineItem Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="parentOrderLineItemID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByParentOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodeOrderLineItem key.
            	FK_ZNodeOrderLineItem_ZNodeOrderLineItem Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="parentOrderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="paymentStatusID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	fKZNodeOrderLineItemZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentStatusID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	fKZNodeOrderLineItemZNodePaymentStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="paymentStatusID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByPaymentStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeOrderLineItem_ZNodePaymentStatus key.
            	FK_ZNodeOrderLineItem_ZNodePaymentStatus Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="paymentStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.OrderLineItem objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItemKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key SC_OrderLineItem_PK index.
            </summary>
            <param name="orderLineItemID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.GetByOrderLineItemID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SC_OrderLineItem_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="orderLineItemID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.OrderLineItem},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;OrderLineItem&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItem,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderLineItem Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.OrderLineItem,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.OrderLineItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.OrderLineItem instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.OrderLineItem Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CasePriorityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="addOnID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOnKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductAddOn index.
            </summary>
            <param name="addOnID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.AddOn},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;AddOn&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOn,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AddOn Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.AddOnProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.AddOn,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.AddOn object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.AddOn instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.AddOn Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ActivityLogType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogTypeChildEntityTypes.ActivityLogCollection">
            <summary>
             Collection of <c>ActivityLogType</c> as OneToMany for ActivityLogCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StorefrontKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="iD">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iD">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.StorefrontKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeStorefront index.
            </summary>
            <param name="iD"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iD"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.GetByID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeStorefront index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="iD"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.Storefront},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;Storefront&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.Storefront)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Storefront,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.Storefront"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Storefront Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.StorefrontProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.Storefront,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.Storefront object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.Storefront instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.Storefront Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Supplier</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SupplierChildEntityTypes.SupplierType">
            <summary>
             Composite Property for <c>SupplierType</c> at SupplierTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SupplierChildEntityTypes.ProductCollection">
            <summary>
             Collection of <c>Supplier</c> as OneToMany for ProductCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SupplierChildEntityTypes.SKUCollection">
            <summary>
             Collection of <c>Supplier</c> as OneToMany for SKUCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SupplierChildEntityTypes.AddOnValueCollection">
            <summary>
             Collection of <c>Supplier</c> as OneToMany for AddOnValueCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteNonQuery(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteReader(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteDataSet(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ExecuteScalar(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <c cref="T:ZNode.Libraries.DataAccess.Data.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ShippingTypeProvider">
            <summary>
             Current ShippingTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProfileProvider">
            <summary>
             Current ProfileProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ReferralCommissionTypeProvider">
            <summary>
             Current ReferralCommissionTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AccountProvider">
            <summary>
             Current AccountProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ShippingRuleTypeProvider">
            <summary>
             Current ShippingRuleTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.OrderStateProvider">
            <summary>
             Current OrderStateProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PortalProvider">
            <summary>
             Current PortalProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductTypeAttributeProvider">
            <summary>
             Current ProductTypeAttributeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.SavedPaymentMethodProvider">
            <summary>
             Current SavedPaymentMethodProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductTypeProvider">
            <summary>
             Current ProductTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ManufacturerProvider">
            <summary>
             Current ManufacturerProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PaymentTypeProvider">
            <summary>
             Current PaymentTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductProvider">
            <summary>
             Current ProductProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductAttributeProvider">
            <summary>
             Current ProductAttributeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.TaxClassProvider">
            <summary>
             Current TaxClassProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductImageTypeProvider">
            <summary>
             Current ProductImageTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ShippingProvider">
            <summary>
             Current ShippingProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CurrencyTypeProvider">
            <summary>
             Current CurrencyTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.TaxRuleTypeProvider">
            <summary>
             Current TaxRuleTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.TaxRuleProvider">
            <summary>
             Current TaxRuleProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.TrackingProvider">
            <summary>
             Current TrackingProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.TrackingEventProvider">
            <summary>
             Current TrackingEventProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.UrlRedirectProvider">
            <summary>
             Current UrlRedirectProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.SupplierTypeProvider">
            <summary>
             Current SupplierTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.SupplierProvider">
            <summary>
             Current SupplierProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ShippingRuleProvider">
            <summary>
             Current ShippingRuleProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ShippingServiceCodeProvider">
            <summary>
             Current ShippingServiceCodeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.StateProvider">
            <summary>
             Current StateProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.StoreProvider">
            <summary>
             Current StoreProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.StorefrontProvider">
            <summary>
             Current StorefrontProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PaymentStatusProvider">
            <summary>
             Current PaymentStatusProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.SKUProvider">
            <summary>
             Current SKUProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.WishListProvider">
            <summary>
             Current WishListProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CategoryProvider">
            <summary>
             Current CategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.SKUAttributeProvider">
            <summary>
             Current SKUAttributeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ContentPageProvider">
            <summary>
             Current ContentPageProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CountryProvider">
            <summary>
             Current CountryProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ContentPageRevisionProvider">
            <summary>
             Current ContentPageRevisionProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CaseTypeProvider">
            <summary>
             Current CaseTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.GatewayProvider">
            <summary>
             Current GatewayProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CaseStatusProvider">
            <summary>
             Current CaseStatusProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ActivityLogProvider">
            <summary>
             Current ActivityLogProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AccountTypeProvider">
            <summary>
             Current AccountTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CaseRequestProvider">
            <summary>
             Current CaseRequestProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ActivityLogTypeProvider">
            <summary>
             Current ActivityLogTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AddOnProvider">
            <summary>
             Current AddOnProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.CasePriorityProvider">
            <summary>
             Current CasePriorityProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AddOnValueProvider">
            <summary>
             Current AddOnValueProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PaymentSettingProvider">
            <summary>
             Current PaymentSettingProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AttributeTypeProvider">
            <summary>
             Current AttributeTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.OrderLineItemProvider">
            <summary>
             Current OrderLineItemProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.DiscountTypeProvider">
            <summary>
             Current DiscountTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductAddOnProvider">
            <summary>
             Current ProductAddOnProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.OrderProcessingTypeProvider">
            <summary>
             Current OrderProcessingTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.OrderProvider">
            <summary>
             Current OrderProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PasswordLogProvider">
            <summary>
             Current PasswordLogProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ZipCodeProvider">
            <summary>
             Current ZipCodeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.HighlightTypeProvider">
            <summary>
             Current HighlightTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.AccountPaymentProvider">
            <summary>
             Current AccountPaymentProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductCategoryProvider">
            <summary>
             Current ProductCategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.HighlightProvider">
            <summary>
             Current HighlightProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.PromotionProvider">
            <summary>
             Current PromotionProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductCrossSellProvider">
            <summary>
             Current ProductCrossSellProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.IPCommerceProvider">
            <summary>
             Current IPCommerceProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ReviewProvider">
            <summary>
             Current ReviewProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductTierProvider">
            <summary>
             Current ProductTierProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductHighlightProvider">
            <summary>
             Current ProductHighlightProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.NoteProvider">
            <summary>
             Current NoteProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.DigitalAssetProvider">
            <summary>
             Current DigitalAssetProviderBase instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Data.Bases.NetTiersProvider.ProductImageProvider">
            <summary>
             Current ProductImageProviderBase instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.PaymentSetting</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes.Gateway">
            <summary>
             Composite Property for <c>Gateway</c> at GatewayTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes.PaymentType">
            <summary>
             Composite Property for <c>PaymentType</c> at PaymentTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes.Profile">
            <summary>
             Composite Property for <c>Profile</c> at ProfileIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes.OrderCollection">
            <summary>
             Collection of <c>PaymentSetting</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentSettingChildEntityTypes.SavedPaymentMethodCollection">
            <summary>
             Collection of <c>PaymentSetting</c> as OneToMany for SavedPaymentMethodCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.AddOnValue</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes.ShippingRuleType">
            <summary>
             Composite Property for <c>ShippingRuleType</c> at ShippingRuleTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes.Supplier">
            <summary>
             Composite Property for <c>Supplier</c> at SupplierIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes.TaxClass">
            <summary>
             Composite Property for <c>TaxClass</c> at TaxClassIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes.AddOn">
            <summary>
             Composite Property for <c>AddOn</c> at AddOnIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnValueChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>AddOnValue</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ActivityLog</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ActivityLogChildEntityTypes.ActivityLogType">
            <summary>
             Composite Property for <c>ActivityLogType</c> at ActivityLogTypeIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxClassProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReviewChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Review</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ReviewChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ReviewChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="highlightTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeHighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.GetByHighlightTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeHighlightType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="highlightTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.HighlightType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;HighlightType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.HighlightType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.HighlightType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.HighlightType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.HighlightType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.HighlightType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.HighlightType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.HighlightType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeChildEntityTypes.HighlightCollection">
            <summary>
             Collection of <c>HighlightType</c> as OneToMany for HighlightCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderProcessingTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.OrderProcessingType</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOnKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="productAddOnID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAddOnID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="addOnID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	fKZNodeProductAddOnZNodeAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	fKZNodeProductAddOnZNodeAddOn Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="addOnID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeAddOn key.
            	FK_ZNodeProductAddOn_ZNodeAddOn Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="addOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	fKZNodeProductAddOnZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	fKZNodeProductAddOnZNodeProduct Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="productID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ZNodeProductAddOn_ZNodeProduct key.
            	FK_ZNodeProductAddOn_ZNodeProduct Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.ProductAddOn objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOnKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="productAddOnID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAddOnID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.GetByProductAddOnID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeProductAddOn_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="productAddOnID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.ProductAddOn},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;ProductAddOn&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOn,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductAddOn Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.ProductAddOn,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.ProductAddOn object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.ProductAddOn instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.ProductAddOn Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ProductAddOn</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnChildEntityTypes.AddOn">
            <summary>
             Composite Property for <c>AddOn</c> at AddOnIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CategoryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Category</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CategoryChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CategoryChildEntityTypes.Category">
            <summary>
             Composite Property for <c>Category</c> at ParentCategoryIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CategoryChildEntityTypes.CategoryCollection">
            <summary>
             Collection of <c>Category</c> as OneToMany for CategoryCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CategoryChildEntityTypes.ProductCategoryCollection">
            <summary>
             Collection of <c>Category</c> as OneToMany for ProductCategoryCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SKUProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StorefrontChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Storefront</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.StoreProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Shipping</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes.Profile">
            <summary>
             Composite Property for <c>Profile</c> at ProfileIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes.ShippingType">
            <summary>
             Composite Property for <c>ShippingType</c> at ShippingTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes.Country">
            <summary>
             Composite Property for <c>Country</c> at DestinationCountryCodeSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes.OrderCollection">
            <summary>
             Collection of <c>Shipping</c> as OneToMany for OrderCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingChildEntityTypes.ShippingRuleCollection">
            <summary>
             Collection of <c>Shipping</c> as OneToMany for ShippingRuleCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductTypeAttributeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AccountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductImageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.NoteChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Note</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.NoteChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.NoteChildEntityTypes.CaseRequest">
            <summary>
             Composite Property for <c>CaseRequest</c> at CaseIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.IPCommerce</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.IPCommerceChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.AccountPayment</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AccountPaymentChildEntityTypes.Order">
            <summary>
             Composite Property for <c>Order</c> at OrderIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.HighlightTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="discountTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ZNodeDiscountType index.
            </summary>
            <param name="discountTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.GetByDiscountTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZNodeDiscountType index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="discountTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.DiscountType},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;DiscountType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountType,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.DiscountType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.DiscountType,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.DiscountType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.DiscountType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.DiscountType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AddOnChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.AddOn</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnChildEntityTypes.AddOnValueCollection">
            <summary>
             Collection of <c>AddOn</c> as OneToMany for AddOnValueCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.AddOnChildEntityTypes.ProductAddOnCollection">
            <summary>
             Collection of <c>AddOn</c> as OneToMany for ProductAddOnCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CountryChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Country</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CountryChildEntityTypes.TaxRuleCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for TaxRuleCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CountryChildEntityTypes.ShippingCollection">
            <summary>
             Collection of <c>Country</c> as OneToMany for ShippingCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentStatusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.SupplierTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.OrderStateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Promotion</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.AddOnValue">
            <summary>
             Composite Property for <c>AddOnValue</c> at AddOnValueIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.DiscountType">
            <summary>
             Composite Property for <c>DiscountType</c> at DiscountTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.Product">
            <summary>
             Composite Property for <c>Product</c> at ProductIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.Profile">
            <summary>
             Composite Property for <c>Profile</c> at ProfileIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PromotionChildEntityTypes.SKU">
            <summary>
             Composite Property for <c>SKU</c> at SKUIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.DiscountType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.DiscountTypeChildEntityTypes.PromotionCollection">
            <summary>
             Collection of <c>DiscountType</c> as OneToMany for PromotionCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="caseID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.Delete(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="caseTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	fKCaseCaseType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="caseTypeID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	fKCaseCaseType Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="caseTypeID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_CaseType key.
            	FK_Case_CaseType Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	fKCasePortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	fKCasePortals Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="portalID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByPortalID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Case_Portals key.
            	FK_Case_Portals Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="portalID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	fKSCCaseSCAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	fKSCCaseSCAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="accountID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
            	FK_SC_Case_SC_Account Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="casePriorityID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	fKSCCaseSCCasePriority Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="casePriorityID"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	fKSCCaseSCCasePriority Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="casePriorityID"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCasePriorityID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
            	FK_SC_Case_SC_CasePriority Description: 
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="casePriorityID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.CaseRequest objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.Get(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequestKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key IX1 index.
            </summary>
            <param name="ownerAccountID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="ownerAccountID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByOwnerAccountID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="ownerAccountID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key IX2 index.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByTitleFirstNameLastNameCompanyName(ZNode.Libraries.DataAccess.Data.TransactionManager,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX2 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="title"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX3 index.
            </summary>
            <param name="caseStatusID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseStatusID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX3 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseStatusID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key IX4 index.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByAccountIDCaseTypeID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX4 index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="accountID"></param>
            <param name="caseTypeID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Case index.
            </summary>
            <param name="caseID"></param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.GetByCaseID(ZNode.Libraries.DataAccess.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Case index.
            </summary>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="caseID"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> class.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.Fill(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.TList{ZNode.Libraries.DataAccess.Entities.CaseRequest},System.Int32,System.Int32)">
            <summary>
            Fill a ZNode.Libraries.DataAccess.Entities.TList&lt;CaseRequest&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.RefreshEntity(System.Data.IDataReader,ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object to refresh.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.RefreshEntity(System.Data.DataSet,ZNode.Libraries.DataAccess.Entities.CaseRequest)">
            <summary>
            Refreshes the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.DeepLoad(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequest,System.Boolean,ZNode.Libraries.DataAccess.Data.DeepLoadType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ZNode.Libraries.DataAccess.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:ZNode.Libraries.DataAccess.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseRequest Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestProviderBaseCore.DeepSave(ZNode.Libraries.DataAccess.Data.TransactionManager,ZNode.Libraries.DataAccess.Entities.CaseRequest,ZNode.Libraries.DataAccess.Data.DeepSaveType,System.Type[],ZNode.Libraries.DataAccess.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the ZNode.Libraries.DataAccess.Entities.CaseRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">ZNode.Libraries.DataAccess.Entities.CaseRequest instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ZNode.Libraries.DataAccess.Entities.CaseRequest Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.CaseStatus</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseStatusChildEntityTypes.CaseRequestCollection">
            <summary>
             Collection of <c>CaseStatus</c> as OneToMany for CaseRequestCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ShippingServiceCode</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ShippingServiceCodeChildEntityTypes.ShippingType">
            <summary>
             Composite Property for <c>ShippingType</c> at ShippingTypeIDSource
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.UrlRedirectChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.UrlRedirect</c>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TrackingChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.Tracking</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TrackingChildEntityTypes.TrackingEventCollection">
            <summary>
             Collection of <c>Tracking</c> as OneToMany for TrackingEventCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.TaxRuleType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleTypeChildEntityTypes.TaxRuleCollection">
            <summary>
             Collection of <c>TaxRuleType</c> as OneToMany for TaxRuleCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.CurrencyTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.PaymentType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.PaymentTypeChildEntityTypes.PaymentSettingCollection">
            <summary>
             Collection of <c>PaymentType</c> as OneToMany for PaymentSettingCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.ReferralCommissionType</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.ReferralCommissionTypeChildEntityTypes.AccountCollection">
            <summary>
             Collection of <c>ReferralCommissionType</c> as OneToMany for AccountCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ProductAddOnProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.OrderLineItem</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes.Order">
            <summary>
             Composite Property for <c>Order</c> at OrderIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes.OrderLineItem">
            <summary>
             Composite Property for <c>OrderLineItem</c> at ParentOrderLineItemIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes.PaymentStatus">
            <summary>
             Composite Property for <c>PaymentStatus</c> at PaymentStatusIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes.DigitalAssetCollection">
            <summary>
             Collection of <c>OrderLineItem</c> as OneToMany for DigitalAssetCollection
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.OrderLineItemChildEntityTypes.OrderLineItemCollection">
            <summary>
             Collection of <c>OrderLineItem</c> as OneToMany for OrderLineItemCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.AttributeTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.CaseRequest</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.CaseStatus">
            <summary>
             Composite Property for <c>CaseStatus</c> at CaseStatusIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.CaseType">
            <summary>
             Composite Property for <c>CaseType</c> at CaseTypeIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.Portal">
            <summary>
             Composite Property for <c>Portal</c> at PortalIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.CasePriority">
            <summary>
             Composite Property for <c>CasePriority</c> at CasePriorityIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.CaseRequestChildEntityTypes.NoteCollection">
            <summary>
             Collection of <c>CaseRequest</c> as OneToMany for NoteCollection
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ContentPageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.ShippingRuleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBase">
            <summary>
             This class is the base class for any <see cref="T:ZNode.Libraries.DataAccess.Data.Bases.TaxRuleProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>ZNode.Libraries.DataAccess.Entities.SavedPaymentMethod</c>
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodChildEntityTypes.Account">
            <summary>
             Composite Property for <c>Account</c> at AccountIDSource
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Data.Bases.SavedPaymentMethodChildEntityTypes.PaymentSetting">
            <summary>
             Composite Property for <c>PaymentSetting</c> at PaymentSettingIDSource
            </summary>
        </member>
    </members>
</doc>
